-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scheduler_parser is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    cfg_pulse_sequence_s : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_num_pulses_to_ex : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_total_decimation : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_post_decimation : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_num_pulses_per_x : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_enabled_channel_vector : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_watchdog : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_p_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_p_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_p_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_p_3_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_p_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_n_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_n_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_n_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_b_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_b_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_c_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_c_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_p_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_p_4_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_p_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_f_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_f_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_f_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_f_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_f_3_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_f_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_f_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_f_4_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_f_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_16_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_16_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_16_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_17_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_17_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_17_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_18_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_18_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_19_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_19_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_19_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_20_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_20_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_20_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_21_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_21_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_22_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_22_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_23_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_23_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_24_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_24_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_25_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_25_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_26_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_26_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_27_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_27_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_27_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_28_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_28_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_28_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_29_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_29_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_29_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_30_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_30_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_30_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_filter_coefs_ch0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    cfg_filter_coefs_ch0_ce0 : OUT STD_LOGIC;
    cfg_filter_coefs_ch0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_filter_coefs_ch1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    cfg_filter_coefs_ch1_ce0 : OUT STD_LOGIC;
    cfg_filter_coefs_ch1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_filter_coefs_ch2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    cfg_filter_coefs_ch2_ce0 : OUT STD_LOGIC;
    cfg_filter_coefs_ch2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coef_ch0_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    coef_ch0_V_V_TVALID : OUT STD_LOGIC;
    coef_ch0_V_V_TREADY : IN STD_LOGIC;
    coef_ch1_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    coef_ch1_V_V_TVALID : OUT STD_LOGIC;
    coef_ch1_V_V_TREADY : IN STD_LOGIC;
    coef_ch2_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    coef_ch2_V_V_TVALID : OUT STD_LOGIC;
    coef_ch2_V_V_TREADY : IN STD_LOGIC;
    pulse_queue_0_V_din : OUT STD_LOGIC_VECTOR (852 downto 0);
    pulse_queue_0_V_full_n : IN STD_LOGIC;
    pulse_queue_0_V_write : OUT STD_LOGIC;
    pulse_queue_1_V_din : OUT STD_LOGIC_VECTOR (852 downto 0);
    pulse_queue_1_V_full_n : IN STD_LOGIC;
    pulse_queue_1_V_write : OUT STD_LOGIC;
    pulse_queue_2_V_din : OUT STD_LOGIC_VECTOR (852 downto 0);
    pulse_queue_2_V_full_n : IN STD_LOGIC;
    pulse_queue_2_V_write : OUT STD_LOGIC;
    pulse_queue_s_V_din : OUT STD_LOGIC_VECTOR (852 downto 0);
    pulse_queue_s_V_full_n : IN STD_LOGIC;
    pulse_queue_s_V_write : OUT STD_LOGIC );
end;


architecture behav of scheduler_parser is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1388 : STD_LOGIC_VECTOR (15 downto 0) := "0001001110001000";
    constant ap_const_lv853_lc_1 : STD_LOGIC_VECTOR (852 downto
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal coef_ch0_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln151_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal coef_ch1_V_V_TDATA_blk_n : STD_LOGIC;
    signal coef_ch2_V_V_TDATA_blk_n : STD_LOGIC;
    signal pulse_queue_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal trunc_ln791_reg_1731 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal pulse_queue_1_V_blk_n : STD_LOGIC;
    signal tmp_reg_1735 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_queue_2_V_blk_n : STD_LOGIC;
    signal p_Result_s_reg_1739 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_queue_s_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal set_fu_897_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal set_reg_1667 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_V_fu_903_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal pulse_post_decimatio_fu_910_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pulse_post_decimatio_reg_1723 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln791_fu_913_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln158_1_fu_970_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln158_1_reg_1743 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal coef_fu_982_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal coef_reg_1751 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln158_fu_998_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln158_reg_1756 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln156_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_V_1_fu_1009_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal tmp_V_2_fu_1014_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_3_fu_1019_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln178_fu_1038_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln178_1_fu_1042_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln178_1_reg_1796 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln178_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cfg_pulse_sequence_p_8_reg_1929 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal pulse_definition_num_reg_1937 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_blo_reg_1946 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_con_reg_1951 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_pol_reg_1959 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_fil_reg_1964 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_fil_1_reg_1972 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_fil_2_reg_1980 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_reg_1988 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_1_reg_1996 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_2_reg_2005 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_3_reg_2014 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_4_reg_2023 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_5_reg_2031 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_6_reg_2039 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_7_reg_2047 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_8_reg_2055 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_9_reg_2063 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_10_reg_2071 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_11_reg_2079 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_12_reg_2087 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_13_reg_2095 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_14_reg_2103 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_15_reg_2111 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_sequence_index_fu_1080_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pulse_sequence_index_reg_2119 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln193_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln193_reg_2127 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln204_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_reg_2132 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln213_fu_1096_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_reg_2136 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_1_fu_1102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_1_reg_2142 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_2_fu_1108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_2_reg_2148 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_rep_fu_1119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_rep_reg_2157 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal pulse_first_pulse_in_fu_1125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_first_pulse_in_reg_2162 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_last_pulse_in_s_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_last_pulse_in_s_reg_2170 : STD_LOGIC_VECTOR (0 downto 0);
    signal seq_idx_fu_1141_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_def_block_post_t_fu_1147_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_def_block_post_t_reg_2189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal pulse_definition_prt_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_prt_4_reg_2197 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_polarizati_fu_1161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln214_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_2213 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_1_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_1_reg_2218 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_2_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_2_reg_2223 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln216_fu_1185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln216_reg_2228 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sub_ln216_1_fu_1195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln216_1_reg_2233 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln216_2_fu_1205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln216_2_reg_2238 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_first_pulse_in_1_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_first_pulse_in_1_reg_2243 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal num_pulses_scheduled_5_fu_1231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pulses_scheduled_5_reg_2251 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2257 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_4_reg_2262 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_reg_2267 : STD_LOGIC_VECTOR (30 downto 0);
    signal and_ln224_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_reg_2272 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_reg_2278 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_num_samples_fu_1311_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_num_samples_reg_2283 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_num_samples_1_fu_1332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_num_samples_1_reg_2288 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_num_samples_2_fu_1353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_num_samples_2_reg_2293 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_last_pulse_in_1_fu_1361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_last_pulse_in_1_reg_2299 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln233_fu_1365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln233_reg_2306 : STD_LOGIC_VECTOR (31 downto 0);
    signal hhvv_index_V_fu_1543_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal hhvv_index_V_reg_2311 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state51 : BOOLEAN;
    signal staggered_prt_index_fu_1560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal staggered_prt_index_reg_2319 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln254_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal watchdog_count_fu_1571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal watchdog_count_reg_2330 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln269_fu_1610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal pulse_definition_prt_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_definition_prt_ce0 : STD_LOGIC;
    signal pulse_definition_prt_we0 : STD_LOGIC;
    signal pulse_definition_prt_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_definition_prt_ce1 : STD_LOGIC;
    signal pulse_definition_prt_we1 : STD_LOGIC;
    signal pulse_definition_prt_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_reg_810 : STD_LOGIC_VECTOR (3 downto 0);
    signal coef_0_i_reg_822 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal seq_idx_0_i_reg_833 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_s_reg_843 : STD_LOGIC_VECTOR (1 downto 0);
    signal staggered_prt_index_s_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal pulse_rep_0_i_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_def_polarization_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln158_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_1051_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_fu_1136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_fu_1566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal watchdog_count_2_fu_292 : STD_LOGIC_VECTOR (15 downto 0);
    signal watchdog_count_3_fu_1623_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal watchdog_prev_fu_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pulses_scheduled_2_fu_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pulses_scheduled_1_fu_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pulses_scheduled_fu_1537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num_samples_fu_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1372_p34 : STD_LOGIC_VECTOR (852 downto 0);
    signal regslice_both_coef_ch0_V_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_coef_ch1_V_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_coef_ch2_V_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state53 : BOOLEAN;
    signal tmp_1_1_fu_1414_p34 : STD_LOGIC_VECTOR (852 downto 0);
    signal tmp_2_1_fu_1454_p34 : STD_LOGIC_VECTOR (852 downto 0);
    signal tmp_3_1_fu_1494_p34 : STD_LOGIC_VECTOR (852 downto 0);
    signal tmp_9_fu_958_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_950_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln158_fu_966_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln158_fu_988_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln158_1_fu_994_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal start_index_fu_1024_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stop_index_fu_1028_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_1153_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln214_fu_1180_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln214_1_fu_1190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln214_2_fu_1200_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_1210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln224_1_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln224_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_1298_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln218_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln217_1_fu_1319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln218_1_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln217_2_fu_1340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln218_2_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_fu_1549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln269_fu_1593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln269_1_fu_1598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln269_fu_1604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln276_fu_1617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1210_ap_start : STD_LOGIC;
    signal grp_fu_1210_ap_done : STD_LOGIC;
    signal grp_fu_1214_ap_start : STD_LOGIC;
    signal grp_fu_1214_ap_done : STD_LOGIC;
    signal grp_fu_1218_ap_start : STD_LOGIC;
    signal grp_fu_1218_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);
    signal coef_ch0_V_V_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch0_V_V_TVALID_int : STD_LOGIC;
    signal coef_ch0_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_coef_ch0_V_V_U_vld_out : STD_LOGIC;
    signal coef_ch1_V_V_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch1_V_V_TVALID_int : STD_LOGIC;
    signal coef_ch1_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_coef_ch1_V_V_U_vld_out : STD_LOGIC;
    signal coef_ch2_V_V_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch2_V_V_TVALID_int : STD_LOGIC;
    signal coef_ch2_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_coef_ch2_V_V_U_vld_out : STD_LOGIC;

    component hcr_controller_udcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scheduler_parser_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    pulse_definition_prt_U : component scheduler_parser_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pulse_definition_prt_address0,
        ce0 => pulse_definition_prt_ce0,
        we0 => pulse_definition_prt_we0,
        d0 => cfg_pulse_sequence_p_q0,
        q0 => pulse_definition_prt_q0,
        address1 => pulse_definition_prt_address1,
        ce1 => pulse_definition_prt_ce1,
        we1 => pulse_definition_prt_we1,
        d1 => cfg_pulse_sequence_p_3_q0,
        q1 => pulse_definition_prt_q1);

    hcr_controller_udcud_U1 : component hcr_controller_udcud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1210_ap_start,
        done => grp_fu_1210_ap_done,
        din0 => sub_ln216_reg_2228,
        din1 => cfg_total_decimation,
        ce => ap_const_logic_1,
        dout => grp_fu_1210_p2);

    hcr_controller_udcud_U2 : component hcr_controller_udcud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1214_ap_start,
        done => grp_fu_1214_ap_done,
        din0 => sub_ln216_1_reg_2233,
        din1 => cfg_total_decimation,
        ce => ap_const_logic_1,
        dout => grp_fu_1214_p2);

    hcr_controller_udcud_U3 : component hcr_controller_udcud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1218_ap_start,
        done => grp_fu_1218_ap_done,
        din0 => sub_ln216_2_reg_2238,
        din1 => cfg_total_decimation,
        ce => ap_const_logic_1,
        dout => grp_fu_1218_p2);

    regslice_both_coef_ch0_V_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => coef_ch0_V_V_TDATA_int,
        vld_in => coef_ch0_V_V_TVALID_int,
        ack_in => coef_ch0_V_V_TREADY_int,
        data_out => coef_ch0_V_V_TDATA,
        vld_out => regslice_both_coef_ch0_V_V_U_vld_out,
        ack_out => coef_ch0_V_V_TREADY,
        apdone_blk => regslice_both_coef_ch0_V_V_U_apdone_blk);

    regslice_both_coef_ch1_V_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => coef_ch1_V_V_TDATA_int,
        vld_in => coef_ch1_V_V_TVALID_int,
        ack_in => coef_ch1_V_V_TREADY_int,
        data_out => coef_ch1_V_V_TDATA,
        vld_out => regslice_both_coef_ch1_V_V_U_vld_out,
        ack_out => coef_ch1_V_V_TREADY,
        apdone_blk => regslice_both_coef_ch1_V_V_U_apdone_blk);

    regslice_both_coef_ch2_V_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => coef_ch2_V_V_TDATA_int,
        vld_in => coef_ch2_V_V_TVALID_int,
        ack_in => coef_ch2_V_V_TREADY_int,
        data_out => coef_ch2_V_V_TDATA,
        vld_out => regslice_both_coef_ch2_V_V_U_vld_out,
        ack_out => coef_ch2_V_V_TREADY,
        apdone_blk => regslice_both_coef_ch2_V_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    coef_0_i_reg_822_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                coef_0_i_reg_822 <= coef_reg_1751;
            elsif (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                coef_0_i_reg_822 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    num_pulses_scheduled_1_fu_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (or_ln254_fu_1555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                num_pulses_scheduled_1_fu_304 <= num_pulses_scheduled_fu_1537_p2;
            elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                num_pulses_scheduled_1_fu_304 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    num_pulses_scheduled_2_fu_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (or_ln254_fu_1555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                num_pulses_scheduled_2_fu_300 <= select_ln233_reg_2306;
            elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                num_pulses_scheduled_2_fu_300 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_843_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                p_Val2_s_reg_843 <= hhvv_index_V_reg_2311;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_s_reg_843 <= ap_const_lv2_3;
            end if; 
        end if;
    end process;

    pulse_rep_0_i_reg_867_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                pulse_rep_0_i_reg_867 <= pulse_rep_reg_2157;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                pulse_rep_0_i_reg_867 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    seq_idx_0_i_reg_833_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln186_fu_1114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                seq_idx_0_i_reg_833 <= seq_idx_fu_1141_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                seq_idx_0_i_reg_833 <= zext_ln178_fu_1038_p1;
            end if; 
        end if;
    end process;

    staggered_prt_index_s_reg_855_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                staggered_prt_index_s_reg_855 <= select_ln269_fu_1610_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                staggered_prt_index_s_reg_855 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    tmp_def_polarization_reg_878_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                if ((icmp_ln204_reg_2132 = ap_const_lv1_0)) then 
                    tmp_def_polarization_reg_878 <= pulse_definition_pol_reg_1959;
                elsif ((icmp_ln204_reg_2132 = ap_const_lv1_1)) then 
                    tmp_def_polarization_reg_878 <= pulse_def_polarizati_fu_1161_p1;
                end if;
            end if; 
        end if;
    end process;

    val_assign_reg_810_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln156_fu_976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                val_assign_reg_810 <= set_reg_1667;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                val_assign_reg_810 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    watchdog_count_2_fu_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                watchdog_count_2_fu_292 <= watchdog_count_3_fu_1623_p3;
            elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                watchdog_count_2_fu_292 <= ap_const_lv16_1388;
            end if; 
        end if;
    end process;

    watchdog_prev_fu_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                watchdog_prev_fu_296 <= cfg_watchdog;
            elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                watchdog_prev_fu_296 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln156_fu_976_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln158_reg_1756 <= add_ln158_fu_998_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln193_reg_2127 <= add_ln193_fu_1084_p2;
                add_ln213_1_reg_2142 <= add_ln213_1_fu_1102_p2;
                add_ln213_2_reg_2148 <= add_ln213_2_fu_1108_p2;
                add_ln213_reg_2136 <= add_ln213_fu_1096_p2;
                cfg_pulse_sequence_p_8_reg_1929 <= cfg_pulse_sequence_p_3_q0;
                icmp_ln204_reg_2132 <= icmp_ln204_fu_1090_p2;
                pulse_definition_blo_reg_1946 <= cfg_pulse_sequence_b_q0;
                pulse_definition_con_reg_1951 <= cfg_pulse_sequence_c_q0;
                pulse_definition_fil_1_reg_1972 <= cfg_pulse_sequence_f_3_q0;
                pulse_definition_fil_2_reg_1980 <= cfg_pulse_sequence_f_4_q0;
                pulse_definition_fil_reg_1964 <= cfg_pulse_sequence_f_q0;
                pulse_definition_num_reg_1937 <= cfg_pulse_sequence_n_q0;
                pulse_definition_pol_reg_1959 <= cfg_pulse_sequence_p_4_q0;
                pulse_definition_tim_10_reg_2071 <= cfg_pulse_sequence_t_25_q0;
                pulse_definition_tim_11_reg_2079 <= cfg_pulse_sequence_t_26_q0;
                pulse_definition_tim_12_reg_2087 <= cfg_pulse_sequence_t_27_q0;
                pulse_definition_tim_13_reg_2095 <= cfg_pulse_sequence_t_28_q0;
                pulse_definition_tim_14_reg_2103 <= cfg_pulse_sequence_t_29_q0;
                pulse_definition_tim_15_reg_2111 <= cfg_pulse_sequence_t_30_q0;
                pulse_definition_tim_1_reg_1996 <= cfg_pulse_sequence_t_16_q0;
                pulse_definition_tim_2_reg_2005 <= cfg_pulse_sequence_t_17_q0;
                pulse_definition_tim_3_reg_2014 <= cfg_pulse_sequence_t_18_q0;
                pulse_definition_tim_4_reg_2023 <= cfg_pulse_sequence_t_19_q0;
                pulse_definition_tim_5_reg_2031 <= cfg_pulse_sequence_t_20_q0;
                pulse_definition_tim_6_reg_2039 <= cfg_pulse_sequence_t_21_q0;
                pulse_definition_tim_7_reg_2047 <= cfg_pulse_sequence_t_22_q0;
                pulse_definition_tim_8_reg_2055 <= cfg_pulse_sequence_t_23_q0;
                pulse_definition_tim_9_reg_2063 <= cfg_pulse_sequence_t_24_q0;
                pulse_definition_tim_reg_1988 <= cfg_pulse_sequence_t_q0;
                pulse_sequence_index_reg_2119 <= pulse_sequence_index_fu_1080_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                and_ln224_reg_2272 <= and_ln224_fu_1285_p2;
                icmp_ln233_reg_2278 <= icmp_ln233_fu_1291_p2;
                tmp_4_reg_2262 <= grp_fu_1214_p2(31 downto 1);
                tmp_5_reg_2267 <= grp_fu_1218_p2(31 downto 1);
                tmp_s_reg_2257 <= grp_fu_1210_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                coef_reg_1751 <= coef_fu_982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                hhvv_index_V_reg_2311 <= hhvv_index_V_fu_1543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln214_1_reg_2218 <= icmp_ln214_1_fu_1170_p2;
                icmp_ln214_2_reg_2223 <= icmp_ln214_2_fu_1175_p2;
                icmp_ln214_reg_2213 <= icmp_ln214_fu_1165_p2;
                pulse_definition_prt_4_reg_2197 <= pulse_definition_prt_q0;
                tmp_def_block_post_t_reg_2189 <= tmp_def_block_post_t_fu_1147_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                num_pulses_scheduled_5_reg_2251 <= num_pulses_scheduled_5_fu_1231_p2;
                pulse_first_pulse_in_1_reg_2243 <= pulse_first_pulse_in_1_fu_1225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Result_s_reg_1739 <= cfg_enabled_channel_vector(2 downto 2);
                pulse_post_decimatio_reg_1723 <= pulse_post_decimatio_fu_910_p1;
                tmp_reg_1735 <= cfg_enabled_channel_vector(1 downto 1);
                trunc_ln791_reg_1731 <= trunc_ln791_fu_913_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln186_fu_1114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                pulse_first_pulse_in_reg_2162 <= pulse_first_pulse_in_fu_1125_p2;
                pulse_last_pulse_in_s_reg_2170 <= pulse_last_pulse_in_s_fu_1131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((pulse_queue_s_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                pulse_last_pulse_in_1_reg_2299 <= pulse_last_pulse_in_1_fu_1361_p2;
                    pulse_num_samples_1_reg_2288(31 downto 1) <= pulse_num_samples_1_fu_1332_p3(31 downto 1);
                    pulse_num_samples_2_reg_2293(31 downto 1) <= pulse_num_samples_2_fu_1353_p3(31 downto 1);
                    pulse_num_samples_reg_2283(31 downto 1) <= pulse_num_samples_fu_1311_p3(31 downto 1);
                select_ln233_reg_2306 <= select_ln233_fu_1365_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                pulse_rep_reg_2157 <= pulse_rep_fu_1119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                set_reg_1667 <= set_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (or_ln254_fu_1555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                staggered_prt_index_reg_2319 <= staggered_prt_index_fu_1560_p2;
                    tmp_num_samples_fu_308(31 downto 1) <= pulse_num_samples_2_reg_2293(31 downto 1);
                watchdog_count_reg_2330 <= watchdog_count_fu_1571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln158_1_reg_1743(9 downto 4) <= sub_ln158_1_fu_970_p2(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sub_ln216_1_reg_2233 <= sub_ln216_1_fu_1195_p2;
                sub_ln216_2_reg_2238 <= sub_ln216_2_fu_1205_p2;
                sub_ln216_reg_2228 <= sub_ln216_fu_1185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    zext_ln178_1_reg_1796(15 downto 0) <= zext_ln178_1_fu_1042_p1(15 downto 0);
            end if;
        end if;
    end process;
    sub_ln158_1_reg_1743(3 downto 0) <= "0000";
    zext_ln178_1_reg_1796(16) <= '0';
    pulse_num_samples_reg_2283(0) <= '0';
    pulse_num_samples_1_reg_2288(0) <= '0';
    pulse_num_samples_2_reg_2293(0) <= '0';
    tmp_num_samples_fu_308(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state51, trunc_ln791_reg_1731, ap_CS_fsm_state53, tmp_reg_1735, p_Result_s_reg_1739, ap_CS_fsm_state50, ap_block_state2_io, ap_block_state3_io, ap_CS_fsm_state4, icmp_ln156_fu_976_p2, ap_block_state6_io, ap_CS_fsm_state9, icmp_ln178_fu_1046_p2, ap_CS_fsm_state11, icmp_ln186_fu_1114_p2, or_ln254_fu_1555_p2, ap_block_state7_io, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln156_fu_976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln178_fu_1046_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln186_fu_1114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((pulse_queue_s_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (or_ln254_fu_1555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (or_ln254_fu_1555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state53 => 
                if ((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln158_fu_998_p2 <= std_logic_vector(unsigned(sub_ln158_1_reg_1743) + unsigned(zext_ln158_1_fu_994_p1));
    add_ln193_fu_1084_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(cfg_pulse_sequence_n_q0));
    add_ln213_1_fu_1102_p2 <= std_logic_vector(unsigned(cfg_pulse_sequence_t_17_q0) + unsigned(cfg_pulse_sequence_t_25_q0));
    add_ln213_2_fu_1108_p2 <= std_logic_vector(unsigned(cfg_pulse_sequence_t_18_q0) + unsigned(cfg_pulse_sequence_t_26_q0));
    add_ln213_fu_1096_p2 <= std_logic_vector(unsigned(cfg_pulse_sequence_t_16_q0) + unsigned(cfg_pulse_sequence_t_24_q0));
    and_ln217_1_fu_1319_p3 <= (tmp_4_reg_2262 & ap_const_lv1_0);
    and_ln217_2_fu_1340_p3 <= (tmp_5_reg_2267 & ap_const_lv1_0);
    and_ln224_fu_1285_p2 <= (xor_ln224_fu_1279_p2 and icmp_ln224_fu_1267_p2);
    and_ln_fu_1298_p3 <= (tmp_s_reg_2257 & ap_const_lv1_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(icmp_ln151_fu_891_p2, coef_ch0_V_V_TREADY_int, coef_ch1_V_V_TREADY_int, coef_ch2_V_V_TREADY_int)
    begin
                ap_block_state2_io <= (((coef_ch2_V_V_TREADY_int = ap_const_logic_0) and (icmp_ln151_fu_891_p2 = ap_const_lv1_0)) or ((coef_ch1_V_V_TREADY_int = ap_const_logic_0) and (icmp_ln151_fu_891_p2 = ap_const_lv1_0)) or ((coef_ch0_V_V_TREADY_int = ap_const_logic_0) and (icmp_ln151_fu_891_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state3_io_assign_proc : process(coef_ch0_V_V_TREADY_int, coef_ch1_V_V_TREADY_int, coef_ch2_V_V_TREADY_int)
    begin
                ap_block_state3_io <= ((coef_ch2_V_V_TREADY_int = ap_const_logic_0) or (coef_ch1_V_V_TREADY_int = ap_const_logic_0) or (coef_ch0_V_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state51_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, trunc_ln791_reg_1731, tmp_reg_1735, p_Result_s_reg_1739)
    begin
                ap_block_state51 <= (((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)));
    end process;


    ap_block_state53_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
                ap_block_state53 <= ((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state6_io_assign_proc : process(coef_ch0_V_V_TREADY_int, coef_ch1_V_V_TREADY_int, coef_ch2_V_V_TREADY_int)
    begin
                ap_block_state6_io <= ((coef_ch2_V_V_TREADY_int = ap_const_logic_0) or (coef_ch1_V_V_TREADY_int = ap_const_logic_0) or (coef_ch0_V_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(coef_ch0_V_V_TREADY_int, coef_ch1_V_V_TREADY_int, coef_ch2_V_V_TREADY_int)
    begin
                ap_block_state7_io <= ((coef_ch2_V_V_TREADY_int = ap_const_logic_0) or (coef_ch1_V_V_TREADY_int = ap_const_logic_0) or (coef_ch0_V_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state53, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
        if ((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    cfg_filter_coefs_ch0_address0 <= sext_ln158_fu_1003_p1(9 - 1 downto 0);

    cfg_filter_coefs_ch0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cfg_filter_coefs_ch0_ce0 <= ap_const_logic_1;
        else 
            cfg_filter_coefs_ch0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_filter_coefs_ch1_address0 <= sext_ln158_fu_1003_p1(9 - 1 downto 0);

    cfg_filter_coefs_ch1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cfg_filter_coefs_ch1_ce0 <= ap_const_logic_1;
        else 
            cfg_filter_coefs_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_filter_coefs_ch2_address0 <= sext_ln158_fu_1003_p1(9 - 1 downto 0);

    cfg_filter_coefs_ch2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cfg_filter_coefs_ch2_ce0 <= ap_const_logic_1;
        else 
            cfg_filter_coefs_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_b_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_b_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_b_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_c_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_c_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_c_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_f_3_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_f_3_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_f_3_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_f_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_f_4_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_f_4_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_f_4_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_f_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_f_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_f_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_f_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_n_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_n_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_n_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_n_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_p_3_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_p_3_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_p_3_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_p_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_p_4_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_p_4_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_p_4_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_p_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_p_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_p_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_p_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_16_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_16_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_16_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_17_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_17_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_17_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_18_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_18_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_18_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_19_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_19_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_19_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_20_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_20_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_20_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_21_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_21_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_21_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_22_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_22_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_22_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_23_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_23_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_23_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_24_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_24_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_24_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_25_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_25_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_25_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_26_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_26_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_26_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_27_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_27_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_27_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_28_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_28_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_28_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_29_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_29_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_29_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_30_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_30_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_30_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_address0 <= zext_ln181_fu_1051_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cfg_pulse_sequence_t_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    coef_ch0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, coef_ch0_V_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            coef_ch0_V_V_TDATA_blk_n <= coef_ch0_V_V_TREADY_int;
        else 
            coef_ch0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    coef_ch0_V_V_TDATA_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state6, tmp_V_fu_903_p1, tmp_V_1_fu_1009_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            coef_ch0_V_V_TDATA_int <= tmp_V_1_fu_1009_p1;
        elsif (((icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            coef_ch0_V_V_TDATA_int <= tmp_V_fu_903_p1;
        else 
            coef_ch0_V_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    coef_ch0_V_V_TVALID <= regslice_both_coef_ch0_V_V_U_vld_out;

    coef_ch0_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state6, ap_block_state2_io, ap_block_state6_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            coef_ch0_V_V_TVALID_int <= ap_const_logic_1;
        else 
            coef_ch0_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    coef_ch1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, coef_ch1_V_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            coef_ch1_V_V_TDATA_blk_n <= coef_ch1_V_V_TREADY_int;
        else 
            coef_ch1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    coef_ch1_V_V_TDATA_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state6, tmp_V_fu_903_p1, tmp_V_2_fu_1014_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            coef_ch1_V_V_TDATA_int <= tmp_V_2_fu_1014_p1;
        elsif (((icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            coef_ch1_V_V_TDATA_int <= tmp_V_fu_903_p1;
        else 
            coef_ch1_V_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    coef_ch1_V_V_TVALID <= regslice_both_coef_ch1_V_V_U_vld_out;

    coef_ch1_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state6, ap_block_state2_io, ap_block_state6_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            coef_ch1_V_V_TVALID_int <= ap_const_logic_1;
        else 
            coef_ch1_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    coef_ch2_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, coef_ch2_V_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            coef_ch2_V_V_TDATA_blk_n <= coef_ch2_V_V_TREADY_int;
        else 
            coef_ch2_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    coef_ch2_V_V_TDATA_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state6, tmp_V_fu_903_p1, tmp_V_3_fu_1019_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            coef_ch2_V_V_TDATA_int <= tmp_V_3_fu_1019_p1;
        elsif (((icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            coef_ch2_V_V_TDATA_int <= tmp_V_fu_903_p1;
        else 
            coef_ch2_V_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    coef_ch2_V_V_TVALID <= regslice_both_coef_ch2_V_V_U_vld_out;

    coef_ch2_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln151_fu_891_p2, ap_CS_fsm_state6, ap_block_state2_io, ap_block_state6_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state6_io) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln151_fu_891_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            coef_ch2_V_V_TVALID_int <= ap_const_logic_1;
        else 
            coef_ch2_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    coef_fu_982_p2 <= std_logic_vector(unsigned(coef_0_i_reg_822) + unsigned(ap_const_lv6_1));

    grp_fu_1210_ap_start_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_1210_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1210_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1214_ap_start_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_1214_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1214_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1218_ap_start_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_1218_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1218_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    hhvv_index_V_fu_1543_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_843) + unsigned(ap_const_lv2_1));
    icmp_ln151_fu_891_p2 <= "1" when (val_assign_reg_810 = ap_const_lv4_8) else "0";
    icmp_ln156_fu_976_p2 <= "1" when (coef_0_i_reg_822 = ap_const_lv6_30) else "0";
    icmp_ln178_fu_1046_p2 <= "1" when (unsigned(seq_idx_0_i_reg_833) > unsigned(zext_ln178_1_reg_1796)) else "0";
    icmp_ln186_fu_1114_p2 <= "1" when (unsigned(pulse_rep_0_i_reg_867) < unsigned(pulse_definition_num_reg_1937)) else "0";
    icmp_ln204_fu_1090_p2 <= "1" when (cfg_pulse_sequence_p_4_q0 = ap_const_lv32_2) else "0";
    icmp_ln214_1_fu_1170_p2 <= "1" when (unsigned(pulse_definition_prt_q0) < unsigned(add_ln213_1_reg_2142)) else "0";
    icmp_ln214_2_fu_1175_p2 <= "1" when (unsigned(pulse_definition_prt_q0) < unsigned(add_ln213_2_reg_2148)) else "0";
    icmp_ln214_fu_1165_p2 <= "1" when (unsigned(pulse_definition_prt_q0) < unsigned(add_ln213_reg_2136)) else "0";
    icmp_ln218_1_fu_1326_p2 <= "1" when (and_ln217_1_fu_1319_p3 = ap_const_lv32_0) else "0";
    icmp_ln218_2_fu_1347_p2 <= "1" when (and_ln217_2_fu_1340_p3 = ap_const_lv32_0) else "0";
    icmp_ln218_fu_1305_p2 <= "1" when (and_ln_fu_1298_p3 = ap_const_lv32_0) else "0";
    icmp_ln224_1_fu_1273_p2 <= "1" when (unsigned(num_pulses_scheduled_1_fu_304) < unsigned(cfg_num_pulses_to_ex)) else "0";
    icmp_ln224_fu_1267_p2 <= "0" when (cfg_num_pulses_to_ex = ap_const_lv32_0) else "1";
    icmp_ln233_fu_1291_p2 <= "1" when (num_pulses_scheduled_5_reg_2251 = cfg_num_pulses_per_x) else "0";
    icmp_ln254_fu_1549_p2 <= "1" when (watchdog_count_2_fu_292 = ap_const_lv16_0) else "0";
    icmp_ln269_1_fu_1598_p2 <= "1" when (pulse_definition_prt_q1 = ap_const_lv32_0) else "0";
    icmp_ln269_fu_1593_p2 <= "1" when (staggered_prt_index_reg_2319 = ap_const_lv8_2) else "0";
    icmp_ln276_fu_1617_p2 <= "1" when (cfg_watchdog = watchdog_prev_fu_296) else "0";

    internal_ap_ready_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state53, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
        if ((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    num_pulses_scheduled_5_fu_1231_p2 <= std_logic_vector(unsigned(num_pulses_scheduled_2_fu_300) + unsigned(ap_const_lv32_1));
    num_pulses_scheduled_fu_1537_p2 <= std_logic_vector(unsigned(num_pulses_scheduled_1_fu_304) + unsigned(ap_const_lv32_1));
    or_ln254_fu_1555_p2 <= (icmp_ln254_fu_1549_p2 or and_ln224_reg_2272);
    or_ln269_fu_1604_p2 <= (icmp_ln269_fu_1593_p2 or icmp_ln269_1_fu_1598_p2);
    pulse_def_polarizati_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1153_p3),32));

    pulse_definition_prt_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln201_fu_1136_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pulse_definition_prt_address0 <= zext_ln201_fu_1136_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pulse_definition_prt_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            pulse_definition_prt_address0 <= "X";
        end if; 
    end process;


    pulse_definition_prt_address1_assign_proc : process(ap_CS_fsm_state51, ap_CS_fsm_state10, zext_ln269_fu_1566_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            pulse_definition_prt_address1 <= zext_ln269_fu_1566_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pulse_definition_prt_address1 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            pulse_definition_prt_address1 <= "X";
        end if; 
    end process;


    pulse_definition_prt_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            pulse_definition_prt_ce0 <= ap_const_logic_1;
        else 
            pulse_definition_prt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pulse_definition_prt_ce1_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, ap_CS_fsm_state51, trunc_ln791_reg_1731, tmp_reg_1735, p_Result_s_reg_1739, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            pulse_definition_prt_ce1 <= ap_const_logic_1;
        else 
            pulse_definition_prt_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pulse_definition_prt_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pulse_definition_prt_we0 <= ap_const_logic_1;
        else 
            pulse_definition_prt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pulse_definition_prt_we1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pulse_definition_prt_we1 <= ap_const_logic_1;
        else 
            pulse_definition_prt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    pulse_first_pulse_in_1_fu_1225_p2 <= "1" when (num_pulses_scheduled_2_fu_300 = ap_const_lv32_0) else "0";
    pulse_first_pulse_in_fu_1125_p2 <= "1" when (pulse_rep_0_i_reg_867 = ap_const_lv32_0) else "0";
    pulse_last_pulse_in_1_fu_1361_p2 <= (icmp_ln233_reg_2278 or and_ln224_reg_2272);
    pulse_last_pulse_in_s_fu_1131_p2 <= "1" when (pulse_rep_0_i_reg_867 = add_ln193_reg_2127) else "0";
    pulse_num_samples_1_fu_1332_p3 <= 
        ap_const_lv32_2 when (icmp_ln218_1_fu_1326_p2(0) = '1') else 
        and_ln217_1_fu_1319_p3;
    pulse_num_samples_2_fu_1353_p3 <= 
        ap_const_lv32_2 when (icmp_ln218_2_fu_1347_p2(0) = '1') else 
        and_ln217_2_fu_1340_p3;
    pulse_num_samples_fu_1311_p3 <= 
        ap_const_lv32_2 when (icmp_ln218_fu_1305_p2(0) = '1') else 
        and_ln_fu_1298_p3;
    pulse_post_decimatio_fu_910_p1 <= cfg_post_decimation(8 - 1 downto 0);

    pulse_queue_0_V_blk_n_assign_proc : process(pulse_queue_0_V_full_n, ap_CS_fsm_state51, trunc_ln791_reg_1731, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or ((trunc_ln791_reg_1731 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            pulse_queue_0_V_blk_n <= pulse_queue_0_V_full_n;
        else 
            pulse_queue_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_0_V_din_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state51, trunc_ln791_reg_1731, ap_CS_fsm_state53, tmp_reg_1735, p_Result_s_reg_1739, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk, tmp_1_1_fu_1414_p34)
    begin
        if ((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            pulse_queue_0_V_din <= ap_const_lv853_lc_1;
        elsif ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (trunc_ln791_reg_1731 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pulse_queue_0_V_din <= tmp_1_1_fu_1414_p34;
        else 
            pulse_queue_0_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pulse_queue_0_V_write_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state51, trunc_ln791_reg_1731, ap_CS_fsm_state53, tmp_reg_1735, p_Result_s_reg_1739, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
        if (((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53)) or (not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (trunc_ln791_reg_1731 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            pulse_queue_0_V_write <= ap_const_logic_1;
        else 
            pulse_queue_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pulse_queue_1_V_blk_n_assign_proc : process(pulse_queue_1_V_full_n, ap_CS_fsm_state51, ap_CS_fsm_state53, tmp_reg_1735)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or ((tmp_reg_1735 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            pulse_queue_1_V_blk_n <= pulse_queue_1_V_full_n;
        else 
            pulse_queue_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_1_V_din_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state51, trunc_ln791_reg_1731, ap_CS_fsm_state53, tmp_reg_1735, p_Result_s_reg_1739, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk, tmp_2_1_fu_1454_p34)
    begin
        if ((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            pulse_queue_1_V_din <= ap_const_lv853_lc_1;
        elsif ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (tmp_reg_1735 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pulse_queue_1_V_din <= tmp_2_1_fu_1454_p34;
        else 
            pulse_queue_1_V_din
        end if; 
    end process;


    pulse_queue_1_V_write_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state51, trunc_ln791_reg_1731, ap_CS_fsm_state53, tmp_reg_1735, p_Result_s_reg_1739, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
        if (((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53)) or (not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (tmp_reg_1735 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            pulse_queue_1_V_write <= ap_const_logic_1;
        else 
            pulse_queue_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pulse_queue_2_V_blk_n_assign_proc : process(pulse_queue_2_V_full_n, ap_CS_fsm_state51, ap_CS_fsm_state53, p_Result_s_reg_1739)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or ((p_Result_s_reg_1739 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            pulse_queue_2_V_blk_n <= pulse_queue_2_V_full_n;
        else 
            pulse_queue_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_2_V_din_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state51, trunc_ln791_reg_1731, ap_CS_fsm_state53, tmp_reg_1735, p_Result_s_reg_1739, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk, tmp_3_1_fu_1494_p34)
    begin
        if ((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            pulse_queue_2_V_din <= ap_const_lv853_lc_1;
        elsif ((not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (p_Result_s_reg_1739 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pulse_queue_2_V_din <= tmp_3_1_fu_1494_p34;
        else 
            pulse_queue_2_V_din
        end if; 
    end process;


    pulse_queue_2_V_write_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state51, trunc_ln791_reg_1731, ap_CS_fsm_state53, tmp_reg_1735, p_Result_s_reg_1739, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
        if (((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53)) or (not((((pulse_queue_2_V_full_n = ap_const_logic_0) and (p_Result_s_reg_1739 = ap_const_lv1_1)) or ((pulse_queue_1_V_full_n = ap_const_logic_0) and (tmp_reg_1735 = ap_const_lv1_1)) or ((pulse_queue_0_V_full_n = ap_const_logic_0) and (trunc_ln791_reg_1731 = ap_const_lv1_1)))) and (p_Result_s_reg_1739 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            pulse_queue_2_V_write <= ap_const_logic_1;
        else 
            pulse_queue_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pulse_queue_s_V_blk_n_assign_proc : process(pulse_queue_s_V_full_n, ap_CS_fsm_state53, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            pulse_queue_s_V_blk_n <= pulse_queue_s_V_full_n;
        else 
            pulse_queue_s_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_s_V_din_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state53, ap_CS_fsm_state50, tmp_1_fu_1372_p34, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
        if ((not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            pulse_queue_s_V_din <= ap_const_lv853_lc_1;
        elsif (((pulse_queue_s_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            pulse_queue_s_V_din <= tmp_1_fu_1372_p34;
        else 
            pulse_queue_s_V_din
        end if; 
    end process;


    pulse_queue_s_V_write_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state53, ap_CS_fsm_state50, regslice_both_coef_ch0_V_V_U_apdone_blk, regslice_both_coef_ch1_V_V_U_apdone_blk, regslice_both_coef_ch2_V_V_U_apdone_blk)
    begin
        if ((((pulse_queue_s_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50)) or (not(((pulse_queue_s_V_full_n = ap_const_logic_0) or (pulse_queue_2_V_full_n = ap_const_logic_0) or (pulse_queue_1_V_full_n = ap_const_logic_0) or (pulse_queue_0_V_full_n = ap_const_logic_0) or (regslice_both_coef_ch2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_coef_ch0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            pulse_queue_s_V_write <= ap_const_logic_1;
        else 
            pulse_queue_s_V_write <= ap_const_logic_0;
        end if; 
    end process;

    pulse_rep_fu_1119_p2 <= std_logic_vector(unsigned(pulse_rep_0_i_reg_867) + unsigned(ap_const_lv32_1));
    pulse_sequence_index_fu_1080_p1 <= seq_idx_0_i_reg_833(8 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln214_1_fu_1190_p3 <= 
        pulse_definition_prt_4_reg_2197 when (icmp_ln214_1_reg_2218(0) = '1') else 
        add_ln213_1_reg_2142;
    select_ln214_2_fu_1200_p3 <= 
        pulse_definition_prt_4_reg_2197 when (icmp_ln214_2_reg_2223(0) = '1') else 
        add_ln213_2_reg_2148;
    select_ln214_fu_1180_p3 <= 
        pulse_definition_prt_4_reg_2197 when (icmp_ln214_reg_2213(0) = '1') else 
        add_ln213_reg_2136;
    select_ln233_fu_1365_p3 <= 
        ap_const_lv32_0 when (pulse_last_pulse_in_1_fu_1361_p2(0) = '1') else 
        num_pulses_scheduled_5_reg_2251;
    select_ln269_fu_1610_p3 <= 
        ap_const_lv8_0 when (or_ln269_fu_1604_p2(0) = '1') else 
        staggered_prt_index_reg_2319;
    seq_idx_fu_1141_p2 <= std_logic_vector(unsigned(seq_idx_0_i_reg_833) + unsigned(ap_const_lv17_1));
    set_fu_897_p2 <= std_logic_vector(unsigned(val_assign_reg_810) + unsigned(ap_const_lv4_1));
        sext_ln158_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln158_reg_1756),64));

    staggered_prt_index_fu_1560_p2 <= std_logic_vector(unsigned(staggered_prt_index_s_reg_855) + unsigned(ap_const_lv8_1));
    start_index_fu_1024_p1 <= cfg_pulse_sequence_s(16 - 1 downto 0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    stop_index_fu_1028_p4 <= cfg_pulse_sequence_s(31 downto 16);
    sub_ln158_1_fu_970_p2 <= std_logic_vector(unsigned(tmp_8_fu_950_p3) - unsigned(zext_ln158_fu_966_p1));
    sub_ln158_fu_988_p2 <= std_logic_vector(signed(ap_const_lv6_2F) - signed(coef_0_i_reg_822));
    sub_ln216_1_fu_1195_p2 <= std_logic_vector(unsigned(select_ln214_1_fu_1190_p3) - unsigned(pulse_definition_tim_2_reg_2005));
    sub_ln216_2_fu_1205_p2 <= std_logic_vector(unsigned(select_ln214_2_fu_1200_p3) - unsigned(pulse_definition_tim_3_reg_2014));
    sub_ln216_fu_1185_p2 <= std_logic_vector(unsigned(select_ln214_fu_1180_p3) - unsigned(pulse_definition_tim_1_reg_1996));
    tmp_1_1_fu_1414_p34 <= ((((((((((((((((((((((((((((((((ap_const_lv1_0 & pulse_last_pulse_in_1_reg_2299) & pulse_first_pulse_in_1_reg_2243) & pulse_last_pulse_in_s_reg_2170) & pulse_first_pulse_in_reg_2162) & pulse_post_decimatio_reg_1723) & pulse_num_samples_reg_2283) & pulse_sequence_index_reg_2119) & pulse_definition_tim_15_reg_2111) & pulse_definition_tim_14_reg_2103) & pulse_definition_tim_13_reg_2095) & pulse_definition_tim_12_reg_2087) & pulse_definition_tim_11_reg_2079) & pulse_definition_tim_10_reg_2071) & pulse_definition_tim_9_reg_2063) & pulse_definition_tim_8_reg_2055) & pulse_definition_tim_7_reg_2047) & pulse_definition_tim_6_reg_2039) & pulse_definition_tim_5_reg_2031) & pulse_definition_tim_4_reg_2023) & pulse_definition_tim_3_reg_2014) & pulse_definition_tim_2_reg_2005) & pulse_definition_tim_1_reg_1996) & pulse_definition_tim_reg_1988) & pulse_definition_fil_2_reg_1980) & pulse_definition_fil_1_reg_1972) & pulse_definition_fil_reg_1964) & tmp_def_polarization_reg_878) & pulse_definition_con_reg_1951) & tmp_def_block_post_t_reg_2189) & pulse_definition_num_reg_1937) & cfg_pulse_sequence_p_8_reg_1929) & pulse_definition_prt_4_reg_2197);
    tmp_1_fu_1372_p34 <= ((((((((((((((((((((((((((((((((ap_const_lv1_0 & pulse_last_pulse_in_1_fu_1361_p2) & pulse_first_pulse_in_1_reg_2243) & pulse_last_pulse_in_s_reg_2170) & pulse_first_pulse_in_reg_2162) & pulse_post_decimatio_reg_1723) & tmp_num_samples_fu_308) & pulse_sequence_index_reg_2119) & pulse_definition_tim_15_reg_2111) & pulse_definition_tim_14_reg_2103) & pulse_definition_tim_13_reg_2095) & pulse_definition_tim_12_reg_2087) & pulse_definition_tim_11_reg_2079) & pulse_definition_tim_10_reg_2071) & pulse_definition_tim_9_reg_2063) & pulse_definition_tim_8_reg_2055) & pulse_definition_tim_7_reg_2047) & pulse_definition_tim_6_reg_2039) & pulse_definition_tim_5_reg_2031) & pulse_definition_tim_4_reg_2023) & pulse_definition_tim_3_reg_2014) & pulse_definition_tim_2_reg_2005) & pulse_definition_tim_1_reg_1996) & pulse_definition_tim_reg_1988) & pulse_definition_fil_2_reg_1980) & pulse_definition_fil_1_reg_1972) & pulse_definition_fil_reg_1964) & tmp_def_polarization_reg_878) & pulse_definition_con_reg_1951) & tmp_def_block_post_t_reg_2189) & pulse_definition_num_reg_1937) & cfg_pulse_sequence_p_8_reg_1929) & pulse_definition_prt_4_reg_2197);
    tmp_2_1_fu_1454_p34 <= ((((((((((((((((((((((((((((((((ap_const_lv1_0 & pulse_last_pulse_in_1_reg_2299) & pulse_first_pulse_in_1_reg_2243) & pulse_last_pulse_in_s_reg_2170) & pulse_first_pulse_in_reg_2162) & pulse_post_decimatio_reg_1723) & pulse_num_samples_1_reg_2288) & pulse_sequence_index_reg_2119) & pulse_definition_tim_15_reg_2111) & pulse_definition_tim_14_reg_2103) & pulse_definition_tim_13_reg_2095) & pulse_definition_tim_12_reg_2087) & pulse_definition_tim_11_reg_2079) & pulse_definition_tim_10_reg_2071) & pulse_definition_tim_9_reg_2063) & pulse_definition_tim_8_reg_2055) & pulse_definition_tim_7_reg_2047) & pulse_definition_tim_6_reg_2039) & pulse_definition_tim_5_reg_2031) & pulse_definition_tim_4_reg_2023) & pulse_definition_tim_3_reg_2014) & pulse_definition_tim_2_reg_2005) & pulse_definition_tim_1_reg_1996) & pulse_definition_tim_reg_1988) & pulse_definition_fil_2_reg_1980) & pulse_definition_fil_1_reg_1972) & pulse_definition_fil_reg_1964) & tmp_def_polarization_reg_878) & pulse_definition_con_reg_1951) & tmp_def_block_post_t_reg_2189) & pulse_definition_num_reg_1937) & cfg_pulse_sequence_p_8_reg_1929) & pulse_definition_prt_4_reg_2197);
    tmp_3_1_fu_1494_p34 <= ((((((((((((((((((((((((((((((((ap_const_lv1_0 & pulse_last_pulse_in_1_reg_2299) & pulse_first_pulse_in_1_reg_2243) & pulse_last_pulse_in_s_reg_2170) & pulse_first_pulse_in_reg_2162) & pulse_post_decimatio_reg_1723) & pulse_num_samples_2_reg_2293) & pulse_sequence_index_reg_2119) & pulse_definition_tim_15_reg_2111) & pulse_definition_tim_14_reg_2103) & pulse_definition_tim_13_reg_2095) & pulse_definition_tim_12_reg_2087) & pulse_definition_tim_11_reg_2079) & pulse_definition_tim_10_reg_2071) & pulse_definition_tim_9_reg_2063) & pulse_definition_tim_8_reg_2055) & pulse_definition_tim_7_reg_2047) & pulse_definition_tim_6_reg_2039) & pulse_definition_tim_5_reg_2031) & pulse_definition_tim_4_reg_2023) & pulse_definition_tim_3_reg_2014) & pulse_definition_tim_2_reg_2005) & pulse_definition_tim_1_reg_1996) & pulse_definition_tim_reg_1988) & pulse_definition_fil_2_reg_1980) & pulse_definition_fil_1_reg_1972) & pulse_definition_fil_reg_1964) & tmp_def_polarization_reg_878) & pulse_definition_con_reg_1951) & tmp_def_block_post_t_reg_2189) & pulse_definition_num_reg_1937) & cfg_pulse_sequence_p_8_reg_1929) & pulse_definition_prt_4_reg_2197);
    tmp_3_fu_1153_p3 <= p_Val2_s_reg_843(1 downto 1);
    tmp_8_fu_950_p3 <= (val_assign_reg_810 & ap_const_lv6_0);
    tmp_9_fu_958_p3 <= (val_assign_reg_810 & ap_const_lv4_0);
    tmp_V_1_fu_1009_p1 <= cfg_filter_coefs_ch0_q0(24 - 1 downto 0);
    tmp_V_2_fu_1014_p1 <= cfg_filter_coefs_ch1_q0(24 - 1 downto 0);
    tmp_V_3_fu_1019_p1 <= cfg_filter_coefs_ch2_q0(24 - 1 downto 0);
    tmp_V_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_810),24));
    tmp_def_block_post_t_fu_1147_p3 <= 
        pulse_definition_blo_reg_1946 when (pulse_last_pulse_in_s_reg_2170(0) = '1') else 
        ap_const_lv32_0;
    trunc_ln791_fu_913_p1 <= cfg_enabled_channel_vector(1 - 1 downto 0);
    watchdog_count_3_fu_1623_p3 <= 
        watchdog_count_reg_2330 when (icmp_ln276_fu_1617_p2(0) = '1') else 
        ap_const_lv16_1388;
    watchdog_count_fu_1571_p2 <= std_logic_vector(unsigned(watchdog_count_2_fu_292) + unsigned(ap_const_lv16_FFFF));
    xor_ln224_fu_1279_p2 <= (icmp_ln224_1_fu_1273_p2 xor ap_const_lv1_1);
    zext_ln158_1_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln158_fu_988_p2),10));
    zext_ln158_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_958_p3),10));
    zext_ln178_1_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stop_index_fu_1028_p4),17));
    zext_ln178_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_index_fu_1024_p1),17));
    zext_ln181_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(seq_idx_0_i_reg_833),64));
    zext_ln201_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(staggered_prt_index_s_reg_855),64));
    zext_ln269_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(staggered_prt_index_fu_1560_p2),64));
end behav;
