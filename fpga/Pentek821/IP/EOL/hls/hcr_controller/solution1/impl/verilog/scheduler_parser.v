// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scheduler_parser (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cfg_pulse_sequence_s,
        cfg_num_pulses_to_ex,
        cfg_total_decimation,
        cfg_post_decimation,
        cfg_num_pulses_per_x,
        cfg_enabled_channel_vector,
        cfg_pulse_sequence_p_address0,
        cfg_pulse_sequence_p_ce0,
        cfg_pulse_sequence_p_q0,
        cfg_pulse_sequence_p_3_address0,
        cfg_pulse_sequence_p_3_ce0,
        cfg_pulse_sequence_p_3_q0,
        cfg_pulse_sequence_n_address0,
        cfg_pulse_sequence_n_ce0,
        cfg_pulse_sequence_n_q0,
        cfg_pulse_sequence_b_address0,
        cfg_pulse_sequence_b_ce0,
        cfg_pulse_sequence_b_q0,
        cfg_pulse_sequence_c_address0,
        cfg_pulse_sequence_c_ce0,
        cfg_pulse_sequence_c_q0,
        cfg_pulse_sequence_p_4_address0,
        cfg_pulse_sequence_p_4_ce0,
        cfg_pulse_sequence_p_4_q0,
        cfg_pulse_sequence_f_address0,
        cfg_pulse_sequence_f_ce0,
        cfg_pulse_sequence_f_q0,
        cfg_pulse_sequence_f_3_address0,
        cfg_pulse_sequence_f_3_ce0,
        cfg_pulse_sequence_f_3_q0,
        cfg_pulse_sequence_f_4_address0,
        cfg_pulse_sequence_f_4_ce0,
        cfg_pulse_sequence_f_4_q0,
        cfg_pulse_sequence_t_address0,
        cfg_pulse_sequence_t_ce0,
        cfg_pulse_sequence_t_q0,
        cfg_pulse_sequence_t_16_address0,
        cfg_pulse_sequence_t_16_ce0,
        cfg_pulse_sequence_t_16_q0,
        cfg_pulse_sequence_t_17_address0,
        cfg_pulse_sequence_t_17_ce0,
        cfg_pulse_sequence_t_17_q0,
        cfg_pulse_sequence_t_18_address0,
        cfg_pulse_sequence_t_18_ce0,
        cfg_pulse_sequence_t_18_q0,
        cfg_pulse_sequence_t_19_address0,
        cfg_pulse_sequence_t_19_ce0,
        cfg_pulse_sequence_t_19_q0,
        cfg_pulse_sequence_t_20_address0,
        cfg_pulse_sequence_t_20_ce0,
        cfg_pulse_sequence_t_20_q0,
        cfg_pulse_sequence_t_21_address0,
        cfg_pulse_sequence_t_21_ce0,
        cfg_pulse_sequence_t_21_q0,
        cfg_pulse_sequence_t_22_address0,
        cfg_pulse_sequence_t_22_ce0,
        cfg_pulse_sequence_t_22_q0,
        cfg_pulse_sequence_t_23_address0,
        cfg_pulse_sequence_t_23_ce0,
        cfg_pulse_sequence_t_23_q0,
        cfg_pulse_sequence_t_24_address0,
        cfg_pulse_sequence_t_24_ce0,
        cfg_pulse_sequence_t_24_q0,
        cfg_pulse_sequence_t_25_address0,
        cfg_pulse_sequence_t_25_ce0,
        cfg_pulse_sequence_t_25_q0,
        cfg_pulse_sequence_t_26_address0,
        cfg_pulse_sequence_t_26_ce0,
        cfg_pulse_sequence_t_26_q0,
        cfg_pulse_sequence_t_27_address0,
        cfg_pulse_sequence_t_27_ce0,
        cfg_pulse_sequence_t_27_q0,
        cfg_pulse_sequence_t_28_address0,
        cfg_pulse_sequence_t_28_ce0,
        cfg_pulse_sequence_t_28_q0,
        cfg_pulse_sequence_t_29_address0,
        cfg_pulse_sequence_t_29_ce0,
        cfg_pulse_sequence_t_29_q0,
        cfg_pulse_sequence_t_30_address0,
        cfg_pulse_sequence_t_30_ce0,
        cfg_pulse_sequence_t_30_q0,
        cfg_filter_coefs_ch0_address0,
        cfg_filter_coefs_ch0_ce0,
        cfg_filter_coefs_ch0_q0,
        cfg_filter_coefs_ch1_address0,
        cfg_filter_coefs_ch1_ce0,
        cfg_filter_coefs_ch1_q0,
        cfg_filter_coefs_ch2_address0,
        cfg_filter_coefs_ch2_ce0,
        cfg_filter_coefs_ch2_q0,
        coef_ch0_V_V_TDATA,
        coef_ch0_V_V_TVALID,
        coef_ch0_V_V_TREADY,
        coef_ch1_V_V_TDATA,
        coef_ch1_V_V_TVALID,
        coef_ch1_V_V_TREADY,
        coef_ch2_V_V_TDATA,
        coef_ch2_V_V_TVALID,
        coef_ch2_V_V_TREADY,
        pulse_queue_0_V_din,
        pulse_queue_0_V_full_n,
        pulse_queue_0_V_write,
        pulse_queue_1_V_din,
        pulse_queue_1_V_full_n,
        pulse_queue_1_V_write,
        pulse_queue_2_V_din,
        pulse_queue_2_V_full_n,
        pulse_queue_2_V_write,
        pulse_queue_s_V_din,
        pulse_queue_s_V_full_n,
        pulse_queue_s_V_write
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_state12 = 50'd2048;
parameter    ap_ST_fsm_state13 = 50'd4096;
parameter    ap_ST_fsm_state14 = 50'd8192;
parameter    ap_ST_fsm_state15 = 50'd16384;
parameter    ap_ST_fsm_state16 = 50'd32768;
parameter    ap_ST_fsm_state17 = 50'd65536;
parameter    ap_ST_fsm_state18 = 50'd131072;
parameter    ap_ST_fsm_state19 = 50'd262144;
parameter    ap_ST_fsm_state20 = 50'd524288;
parameter    ap_ST_fsm_state21 = 50'd1048576;
parameter    ap_ST_fsm_state22 = 50'd2097152;
parameter    ap_ST_fsm_state23 = 50'd4194304;
parameter    ap_ST_fsm_state24 = 50'd8388608;
parameter    ap_ST_fsm_state25 = 50'd16777216;
parameter    ap_ST_fsm_state26 = 50'd33554432;
parameter    ap_ST_fsm_state27 = 50'd67108864;
parameter    ap_ST_fsm_state28 = 50'd134217728;
parameter    ap_ST_fsm_state29 = 50'd268435456;
parameter    ap_ST_fsm_state30 = 50'd536870912;
parameter    ap_ST_fsm_state31 = 50'd1073741824;
parameter    ap_ST_fsm_state32 = 50'd2147483648;
parameter    ap_ST_fsm_state33 = 50'd4294967296;
parameter    ap_ST_fsm_state34 = 50'd8589934592;
parameter    ap_ST_fsm_state35 = 50'd17179869184;
parameter    ap_ST_fsm_state36 = 50'd34359738368;
parameter    ap_ST_fsm_state37 = 50'd68719476736;
parameter    ap_ST_fsm_state38 = 50'd137438953472;
parameter    ap_ST_fsm_state39 = 50'd274877906944;
parameter    ap_ST_fsm_state40 = 50'd549755813888;
parameter    ap_ST_fsm_state41 = 50'd1099511627776;
parameter    ap_ST_fsm_state42 = 50'd2199023255552;
parameter    ap_ST_fsm_state43 = 50'd4398046511104;
parameter    ap_ST_fsm_state44 = 50'd8796093022208;
parameter    ap_ST_fsm_state45 = 50'd17592186044416;
parameter    ap_ST_fsm_state46 = 50'd35184372088832;
parameter    ap_ST_fsm_state47 = 50'd70368744177664;
parameter    ap_ST_fsm_state48 = 50'd140737488355328;
parameter    ap_ST_fsm_state49 = 50'd281474976710656;
parameter    ap_ST_fsm_state50 = 50'd562949953421312;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] cfg_pulse_sequence_s;
input  [31:0] cfg_num_pulses_to_ex;
input  [31:0] cfg_total_decimation;
input  [31:0] cfg_post_decimation;
input  [31:0] cfg_num_pulses_per_x;
input  [31:0] cfg_enabled_channel_vector;
output  [4:0] cfg_pulse_sequence_p_address0;
output   cfg_pulse_sequence_p_ce0;
input  [31:0] cfg_pulse_sequence_p_q0;
output  [4:0] cfg_pulse_sequence_p_3_address0;
output   cfg_pulse_sequence_p_3_ce0;
input  [31:0] cfg_pulse_sequence_p_3_q0;
output  [4:0] cfg_pulse_sequence_n_address0;
output   cfg_pulse_sequence_n_ce0;
input  [31:0] cfg_pulse_sequence_n_q0;
output  [4:0] cfg_pulse_sequence_b_address0;
output   cfg_pulse_sequence_b_ce0;
input  [31:0] cfg_pulse_sequence_b_q0;
output  [4:0] cfg_pulse_sequence_c_address0;
output   cfg_pulse_sequence_c_ce0;
input  [31:0] cfg_pulse_sequence_c_q0;
output  [4:0] cfg_pulse_sequence_p_4_address0;
output   cfg_pulse_sequence_p_4_ce0;
input  [31:0] cfg_pulse_sequence_p_4_q0;
output  [4:0] cfg_pulse_sequence_f_address0;
output   cfg_pulse_sequence_f_ce0;
input  [31:0] cfg_pulse_sequence_f_q0;
output  [4:0] cfg_pulse_sequence_f_3_address0;
output   cfg_pulse_sequence_f_3_ce0;
input  [31:0] cfg_pulse_sequence_f_3_q0;
output  [4:0] cfg_pulse_sequence_f_4_address0;
output   cfg_pulse_sequence_f_4_ce0;
input  [31:0] cfg_pulse_sequence_f_4_q0;
output  [4:0] cfg_pulse_sequence_t_address0;
output   cfg_pulse_sequence_t_ce0;
input  [31:0] cfg_pulse_sequence_t_q0;
output  [4:0] cfg_pulse_sequence_t_16_address0;
output   cfg_pulse_sequence_t_16_ce0;
input  [31:0] cfg_pulse_sequence_t_16_q0;
output  [4:0] cfg_pulse_sequence_t_17_address0;
output   cfg_pulse_sequence_t_17_ce0;
input  [31:0] cfg_pulse_sequence_t_17_q0;
output  [4:0] cfg_pulse_sequence_t_18_address0;
output   cfg_pulse_sequence_t_18_ce0;
input  [31:0] cfg_pulse_sequence_t_18_q0;
output  [4:0] cfg_pulse_sequence_t_19_address0;
output   cfg_pulse_sequence_t_19_ce0;
input  [31:0] cfg_pulse_sequence_t_19_q0;
output  [4:0] cfg_pulse_sequence_t_20_address0;
output   cfg_pulse_sequence_t_20_ce0;
input  [31:0] cfg_pulse_sequence_t_20_q0;
output  [4:0] cfg_pulse_sequence_t_21_address0;
output   cfg_pulse_sequence_t_21_ce0;
input  [31:0] cfg_pulse_sequence_t_21_q0;
output  [4:0] cfg_pulse_sequence_t_22_address0;
output   cfg_pulse_sequence_t_22_ce0;
input  [31:0] cfg_pulse_sequence_t_22_q0;
output  [4:0] cfg_pulse_sequence_t_23_address0;
output   cfg_pulse_sequence_t_23_ce0;
input  [31:0] cfg_pulse_sequence_t_23_q0;
output  [4:0] cfg_pulse_sequence_t_24_address0;
output   cfg_pulse_sequence_t_24_ce0;
input  [31:0] cfg_pulse_sequence_t_24_q0;
output  [4:0] cfg_pulse_sequence_t_25_address0;
output   cfg_pulse_sequence_t_25_ce0;
input  [31:0] cfg_pulse_sequence_t_25_q0;
output  [4:0] cfg_pulse_sequence_t_26_address0;
output   cfg_pulse_sequence_t_26_ce0;
input  [31:0] cfg_pulse_sequence_t_26_q0;
output  [4:0] cfg_pulse_sequence_t_27_address0;
output   cfg_pulse_sequence_t_27_ce0;
input  [31:0] cfg_pulse_sequence_t_27_q0;
output  [4:0] cfg_pulse_sequence_t_28_address0;
output   cfg_pulse_sequence_t_28_ce0;
input  [31:0] cfg_pulse_sequence_t_28_q0;
output  [4:0] cfg_pulse_sequence_t_29_address0;
output   cfg_pulse_sequence_t_29_ce0;
input  [31:0] cfg_pulse_sequence_t_29_q0;
output  [4:0] cfg_pulse_sequence_t_30_address0;
output   cfg_pulse_sequence_t_30_ce0;
input  [31:0] cfg_pulse_sequence_t_30_q0;
output  [8:0] cfg_filter_coefs_ch0_address0;
output   cfg_filter_coefs_ch0_ce0;
input  [31:0] cfg_filter_coefs_ch0_q0;
output  [8:0] cfg_filter_coefs_ch1_address0;
output   cfg_filter_coefs_ch1_ce0;
input  [31:0] cfg_filter_coefs_ch1_q0;
output  [8:0] cfg_filter_coefs_ch2_address0;
output   cfg_filter_coefs_ch2_ce0;
input  [31:0] cfg_filter_coefs_ch2_q0;
output  [23:0] coef_ch0_V_V_TDATA;
output   coef_ch0_V_V_TVALID;
input   coef_ch0_V_V_TREADY;
output  [23:0] coef_ch1_V_V_TDATA;
output   coef_ch1_V_V_TVALID;
input   coef_ch1_V_V_TREADY;
output  [23:0] coef_ch2_V_V_TDATA;
output   coef_ch2_V_V_TVALID;
input   coef_ch2_V_V_TREADY;
output  [852:0] pulse_queue_0_V_din;
input   pulse_queue_0_V_full_n;
output   pulse_queue_0_V_write;
output  [852:0] pulse_queue_1_V_din;
input   pulse_queue_1_V_full_n;
output   pulse_queue_1_V_write;
output  [852:0] pulse_queue_2_V_din;
input   pulse_queue_2_V_full_n;
output   pulse_queue_2_V_write;
output  [852:0] pulse_queue_s_V_din;
input   pulse_queue_s_V_full_n;
output   pulse_queue_s_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cfg_pulse_sequence_p_ce0;
reg cfg_pulse_sequence_p_3_ce0;
reg cfg_pulse_sequence_n_ce0;
reg cfg_pulse_sequence_b_ce0;
reg cfg_pulse_sequence_c_ce0;
reg cfg_pulse_sequence_p_4_ce0;
reg cfg_pulse_sequence_f_ce0;
reg cfg_pulse_sequence_f_3_ce0;
reg cfg_pulse_sequence_f_4_ce0;
reg cfg_pulse_sequence_t_ce0;
reg cfg_pulse_sequence_t_16_ce0;
reg cfg_pulse_sequence_t_17_ce0;
reg cfg_pulse_sequence_t_18_ce0;
reg cfg_pulse_sequence_t_19_ce0;
reg cfg_pulse_sequence_t_20_ce0;
reg cfg_pulse_sequence_t_21_ce0;
reg cfg_pulse_sequence_t_22_ce0;
reg cfg_pulse_sequence_t_23_ce0;
reg cfg_pulse_sequence_t_24_ce0;
reg cfg_pulse_sequence_t_25_ce0;
reg cfg_pulse_sequence_t_26_ce0;
reg cfg_pulse_sequence_t_27_ce0;
reg cfg_pulse_sequence_t_28_ce0;
reg cfg_pulse_sequence_t_29_ce0;
reg cfg_pulse_sequence_t_30_ce0;
reg cfg_filter_coefs_ch0_ce0;
reg cfg_filter_coefs_ch1_ce0;
reg cfg_filter_coefs_ch2_ce0;
reg[852:0] pulse_queue_0_V_din;
reg pulse_queue_0_V_write;
reg[852:0] pulse_queue_1_V_din;
reg pulse_queue_1_V_write;
reg[852:0] pulse_queue_2_V_din;
reg pulse_queue_2_V_write;
reg[852:0] pulse_queue_s_V_din;
reg pulse_queue_s_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    coef_ch0_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln147_fu_865_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    coef_ch1_V_V_TDATA_blk_n;
reg    coef_ch2_V_V_TDATA_blk_n;
reg    pulse_queue_0_V_blk_n;
wire    ap_CS_fsm_state48;
reg   [0:0] trunc_ln791_reg_1593;
wire    ap_CS_fsm_state50;
reg    pulse_queue_1_V_blk_n;
reg   [0:0] tmp_reg_1597;
reg    pulse_queue_2_V_blk_n;
reg   [0:0] p_Result_s_reg_1601;
reg    pulse_queue_s_V_blk_n;
wire    ap_CS_fsm_state47;
reg    ap_block_state1;
wire   [3:0] set_fu_871_p2;
reg   [3:0] set_reg_1543;
reg    ap_block_state2_io;
wire   [23:0] tmp_V_fu_877_p1;
wire   [7:0] pulse_post_decimatio_fu_884_p1;
reg   [7:0] pulse_post_decimatio_reg_1585;
wire   [0:0] trunc_ln791_fu_887_p1;
wire   [9:0] sub_ln154_1_fu_934_p2;
reg   [9:0] sub_ln154_1_reg_1605;
reg    ap_block_state3_io;
wire   [5:0] coef_fu_946_p2;
reg   [5:0] coef_reg_1613;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln152_fu_940_p2;
wire   [23:0] tmp_V_1_fu_974_p1;
reg    ap_block_state5_io;
wire   [23:0] tmp_V_2_fu_979_p1;
wire   [23:0] tmp_V_3_fu_984_p1;
wire   [16:0] zext_ln172_fu_1003_p1;
wire    ap_CS_fsm_state7;
wire   [16:0] zext_ln172_1_fu_1007_p1;
reg   [16:0] zext_ln172_1_reg_1653;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln172_fu_1011_p2;
reg   [31:0] cfg_pulse_sequence_p_8_reg_1786;
wire    ap_CS_fsm_state9;
reg   [31:0] pulse_definition_num_reg_1794;
reg   [31:0] pulse_definition_blo_reg_1803;
reg   [31:0] pulse_definition_con_reg_1808;
reg   [31:0] pulse_definition_pol_reg_1816;
reg   [31:0] pulse_definition_fil_reg_1821;
reg   [31:0] pulse_definition_fil_1_reg_1829;
reg   [31:0] pulse_definition_fil_2_reg_1837;
reg   [31:0] pulse_definition_tim_reg_1845;
reg   [31:0] pulse_definition_tim_1_reg_1853;
reg   [31:0] pulse_definition_tim_2_reg_1862;
reg   [31:0] pulse_definition_tim_3_reg_1871;
reg   [31:0] pulse_definition_tim_4_reg_1880;
reg   [31:0] pulse_definition_tim_5_reg_1888;
reg   [31:0] pulse_definition_tim_6_reg_1896;
reg   [31:0] pulse_definition_tim_7_reg_1904;
reg   [31:0] pulse_definition_tim_8_reg_1912;
reg   [31:0] pulse_definition_tim_9_reg_1920;
reg   [31:0] pulse_definition_tim_10_reg_1928;
reg   [31:0] pulse_definition_tim_11_reg_1936;
reg   [31:0] pulse_definition_tim_12_reg_1944;
reg   [31:0] pulse_definition_tim_13_reg_1952;
reg   [31:0] pulse_definition_tim_14_reg_1960;
reg   [31:0] pulse_definition_tim_15_reg_1968;
wire   [7:0] pulse_sequence_index_fu_1045_p1;
reg   [7:0] pulse_sequence_index_reg_1976;
wire   [31:0] add_ln187_fu_1049_p2;
reg   [31:0] add_ln187_reg_1984;
wire   [0:0] icmp_ln198_fu_1055_p2;
reg   [0:0] icmp_ln198_reg_1989;
wire   [31:0] add_ln207_fu_1061_p2;
reg   [31:0] add_ln207_reg_1993;
wire   [31:0] add_ln207_1_fu_1067_p2;
reg   [31:0] add_ln207_1_reg_1999;
wire   [31:0] add_ln207_2_fu_1073_p2;
reg   [31:0] add_ln207_2_reg_2005;
wire   [31:0] pulse_rep_fu_1084_p2;
reg   [31:0] pulse_rep_reg_2014;
wire    ap_CS_fsm_state10;
wire   [0:0] pulse_first_pulse_in_fu_1090_p2;
reg   [0:0] pulse_first_pulse_in_reg_2019;
wire   [0:0] icmp_ln180_fu_1079_p2;
wire   [0:0] pulse_last_pulse_in_s_fu_1096_p2;
reg   [0:0] pulse_last_pulse_in_s_reg_2027;
wire   [16:0] seq_idx_fu_1106_p2;
wire   [31:0] tmp_def_block_post_t_fu_1112_p3;
reg   [31:0] tmp_def_block_post_t_reg_2046;
wire    ap_CS_fsm_state11;
wire   [31:0] pulse_definition_prt_q0;
reg   [31:0] pulse_definition_prt_4_reg_2054;
wire   [31:0] pulse_def_polarizati_fu_1126_p1;
wire   [31:0] sub_ln210_fu_1142_p2;
reg   [31:0] sub_ln210_reg_2067;
wire   [31:0] sub_ln210_1_fu_1159_p2;
reg   [31:0] sub_ln210_1_reg_2072;
wire   [31:0] sub_ln210_2_fu_1176_p2;
reg   [31:0] sub_ln210_2_reg_2077;
wire   [0:0] pulse_first_pulse_in_1_fu_1196_p2;
reg   [0:0] pulse_first_pulse_in_1_reg_2082;
wire    ap_CS_fsm_state46;
wire   [31:0] num_pulses_scheduled_5_fu_1202_p2;
reg   [31:0] num_pulses_scheduled_5_reg_2090;
wire   [0:0] icmp_ln226_fu_1208_p2;
reg   [0:0] icmp_ln226_reg_2095;
wire   [31:0] pulse_num_samples_fu_1222_p3;
reg   [31:0] pulse_num_samples_reg_2100;
wire   [31:0] pulse_num_samples_1_fu_1236_p3;
reg   [31:0] pulse_num_samples_1_reg_2105;
wire   [31:0] pulse_num_samples_2_fu_1250_p3;
reg   [31:0] pulse_num_samples_2_reg_2110;
wire   [0:0] and_ln217_fu_1276_p2;
reg   [0:0] and_ln217_reg_2116;
wire   [0:0] pulse_last_pulse_in_1_fu_1282_p2;
reg   [0:0] pulse_last_pulse_in_1_reg_2120;
wire   [31:0] select_ln226_fu_1287_p3;
reg   [31:0] select_ln226_reg_2127;
wire   [1:0] hhvv_index_V_fu_1462_p2;
reg   [1:0] hhvv_index_V_reg_2132;
reg    ap_block_state48;
wire   [7:0] staggered_prt_index_fu_1468_p2;
reg   [7:0] staggered_prt_index_reg_2137;
wire   [7:0] select_ln262_fu_1509_p3;
wire    ap_CS_fsm_state49;
reg   [0:0] pulse_definition_prt_address0;
reg    pulse_definition_prt_ce0;
reg    pulse_definition_prt_we0;
reg   [0:0] pulse_definition_prt_address1;
reg    pulse_definition_prt_ce1;
reg    pulse_definition_prt_we1;
wire   [31:0] pulse_definition_prt_q1;
reg   [3:0] val_assign_reg_784;
reg   [5:0] coef_0_i_reg_796;
reg    ap_block_state6_io;
reg   [16:0] seq_idx_0_i_reg_807;
reg   [1:0] p_Val2_s_reg_817;
reg   [7:0] staggered_prt_index_s_reg_829;
reg   [31:0] pulse_rep_0_i_reg_841;
reg   [31:0] tmp_def_polarization_reg_852;
wire  signed [63:0] sext_ln154_fu_967_p1;
wire   [63:0] zext_ln175_fu_1016_p1;
wire   [63:0] zext_ln195_fu_1101_p1;
wire   [63:0] zext_ln262_fu_1474_p1;
reg   [31:0] num_pulses_scheduled_2_fu_280;
reg   [31:0] num_pulses_scheduled_1_fu_284;
wire   [31:0] num_pulses_scheduled_fu_1456_p2;
reg   [31:0] tmp_num_samples_fu_288;
wire   [852:0] tmp_1_fu_1294_p34;
wire    regslice_both_coef_ch0_V_V_U_apdone_blk;
wire    regslice_both_coef_ch1_V_V_U_apdone_blk;
wire    regslice_both_coef_ch2_V_V_U_apdone_blk;
reg    ap_block_state50;
wire   [852:0] tmp_1_1_fu_1336_p34;
wire   [852:0] tmp_2_1_fu_1376_p34;
wire   [852:0] tmp_3_1_fu_1416_p34;
wire   [7:0] tmp_9_fu_922_p3;
wire   [9:0] tmp_8_fu_914_p3;
wire   [9:0] zext_ln154_fu_930_p1;
wire   [5:0] sub_ln154_fu_952_p2;
wire   [9:0] zext_ln154_1_fu_958_p1;
wire   [9:0] add_ln154_fu_962_p2;
wire   [15:0] start_index_fu_989_p1;
wire   [15:0] stop_index_fu_993_p4;
wire   [0:0] tmp_3_fu_1118_p3;
wire   [0:0] icmp_ln208_fu_1130_p2;
wire   [31:0] select_ln208_fu_1135_p3;
wire   [0:0] icmp_ln208_1_fu_1147_p2;
wire   [31:0] select_ln208_1_fu_1152_p3;
wire   [0:0] icmp_ln208_2_fu_1164_p2;
wire   [31:0] select_ln208_2_fu_1169_p3;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_1181_p2;
wire   [0:0] icmp_ln211_fu_1216_p2;
wire   [31:0] grp_fu_1185_p2;
wire   [0:0] icmp_ln211_1_fu_1230_p2;
wire   [31:0] grp_fu_1189_p2;
wire   [0:0] icmp_ln211_2_fu_1244_p2;
wire   [0:0] icmp_ln217_1_fu_1264_p2;
wire   [0:0] xor_ln217_fu_1270_p2;
wire   [0:0] icmp_ln217_fu_1258_p2;
wire   [0:0] icmp_ln262_fu_1492_p2;
wire   [0:0] icmp_ln262_1_fu_1497_p2;
wire   [0:0] or_ln262_fu_1503_p2;
reg    grp_fu_1181_ap_start;
wire    grp_fu_1181_ap_done;
reg    grp_fu_1181_ce;
reg    grp_fu_1185_ap_start;
wire    grp_fu_1185_ap_done;
reg    grp_fu_1185_ce;
reg    grp_fu_1189_ap_start;
wire    grp_fu_1189_ap_done;
reg    grp_fu_1189_ce;
reg   [49:0] ap_NS_fsm;
reg   [23:0] coef_ch0_V_V_TDATA_int;
reg    coef_ch0_V_V_TVALID_int;
wire    coef_ch0_V_V_TREADY_int;
wire    regslice_both_coef_ch0_V_V_U_vld_out;
reg   [23:0] coef_ch1_V_V_TDATA_int;
reg    coef_ch1_V_V_TVALID_int;
wire    coef_ch1_V_V_TREADY_int;
wire    regslice_both_coef_ch1_V_V_U_vld_out;
reg   [23:0] coef_ch2_V_V_TDATA_int;
reg    coef_ch2_V_V_TVALID_int;
wire    coef_ch2_V_V_TREADY_int;
wire    regslice_both_coef_ch2_V_V_U_vld_out;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 50'd1;
end

scheduler_parser_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
pulse_definition_prt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pulse_definition_prt_address0),
    .ce0(pulse_definition_prt_ce0),
    .we0(pulse_definition_prt_we0),
    .d0(cfg_pulse_sequence_p_q0),
    .q0(pulse_definition_prt_q0),
    .address1(pulse_definition_prt_address1),
    .ce1(pulse_definition_prt_ce1),
    .we1(pulse_definition_prt_we1),
    .d1(cfg_pulse_sequence_p_3_q0),
    .q1(pulse_definition_prt_q1)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1181_ap_start),
    .done(grp_fu_1181_ap_done),
    .din0(sub_ln210_reg_2067),
    .din1(cfg_total_decimation),
    .ce(grp_fu_1181_ce),
    .dout(grp_fu_1181_p2)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1185_ap_start),
    .done(grp_fu_1185_ap_done),
    .din0(sub_ln210_1_reg_2072),
    .din1(cfg_total_decimation),
    .ce(grp_fu_1185_ce),
    .dout(grp_fu_1185_p2)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1189_ap_start),
    .done(grp_fu_1189_ap_done),
    .din0(sub_ln210_2_reg_2077),
    .din1(cfg_total_decimation),
    .ce(grp_fu_1189_ce),
    .dout(grp_fu_1189_p2)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch0_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch0_V_V_TDATA_int),
    .vld_in(coef_ch0_V_V_TVALID_int),
    .ack_in(coef_ch0_V_V_TREADY_int),
    .data_out(coef_ch0_V_V_TDATA),
    .vld_out(regslice_both_coef_ch0_V_V_U_vld_out),
    .ack_out(coef_ch0_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch0_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch1_V_V_TDATA_int),
    .vld_in(coef_ch1_V_V_TVALID_int),
    .ack_in(coef_ch1_V_V_TREADY_int),
    .data_out(coef_ch1_V_V_TDATA),
    .vld_out(regslice_both_coef_ch1_V_V_U_vld_out),
    .ack_out(coef_ch1_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch1_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch2_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch2_V_V_TDATA_int),
    .vld_in(coef_ch2_V_V_TVALID_int),
    .ack_in(coef_ch2_V_V_TREADY_int),
    .data_out(coef_ch2_V_V_TDATA),
    .vld_out(regslice_both_coef_ch2_V_V_U_vld_out),
    .ack_out(coef_ch2_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch2_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
        coef_0_i_reg_796 <= coef_reg_1613;
    end else if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        coef_0_i_reg_796 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (1'd0 == and_ln217_reg_2116) & (1'b1 == ap_CS_fsm_state48))) begin
        num_pulses_scheduled_1_fu_284 <= num_pulses_scheduled_fu_1456_p2;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln147_fu_865_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        num_pulses_scheduled_1_fu_284 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (1'd0 == and_ln217_reg_2116) & (1'b1 == ap_CS_fsm_state48))) begin
        num_pulses_scheduled_2_fu_280 <= select_ln226_reg_2127;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln147_fu_865_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        num_pulses_scheduled_2_fu_280 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        p_Val2_s_reg_817 <= hhvv_index_V_reg_2132;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_s_reg_817 <= 2'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        pulse_rep_0_i_reg_841 <= pulse_rep_reg_2014;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_rep_0_i_reg_841 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_1079_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        seq_idx_0_i_reg_807 <= seq_idx_fu_1106_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        seq_idx_0_i_reg_807 <= zext_ln172_fu_1003_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        staggered_prt_index_s_reg_829 <= select_ln262_fu_1509_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        staggered_prt_index_s_reg_829 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        if ((icmp_ln198_reg_1989 == 1'd0)) begin
            tmp_def_polarization_reg_852 <= pulse_definition_pol_reg_1816;
        end else if ((icmp_ln198_reg_1989 == 1'd1)) begin
            tmp_def_polarization_reg_852 <= pulse_def_polarizati_fu_1126_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln152_fu_940_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        val_assign_reg_784 <= set_reg_1543;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_reg_784 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln187_reg_1984 <= add_ln187_fu_1049_p2;
        add_ln207_1_reg_1999 <= add_ln207_1_fu_1067_p2;
        add_ln207_2_reg_2005 <= add_ln207_2_fu_1073_p2;
        add_ln207_reg_1993 <= add_ln207_fu_1061_p2;
        cfg_pulse_sequence_p_8_reg_1786 <= cfg_pulse_sequence_p_3_q0;
        icmp_ln198_reg_1989 <= icmp_ln198_fu_1055_p2;
        pulse_definition_blo_reg_1803 <= cfg_pulse_sequence_b_q0;
        pulse_definition_con_reg_1808 <= cfg_pulse_sequence_c_q0;
        pulse_definition_fil_1_reg_1829 <= cfg_pulse_sequence_f_3_q0;
        pulse_definition_fil_2_reg_1837 <= cfg_pulse_sequence_f_4_q0;
        pulse_definition_fil_reg_1821 <= cfg_pulse_sequence_f_q0;
        pulse_definition_num_reg_1794 <= cfg_pulse_sequence_n_q0;
        pulse_definition_pol_reg_1816 <= cfg_pulse_sequence_p_4_q0;
        pulse_definition_tim_10_reg_1928 <= cfg_pulse_sequence_t_25_q0;
        pulse_definition_tim_11_reg_1936 <= cfg_pulse_sequence_t_26_q0;
        pulse_definition_tim_12_reg_1944 <= cfg_pulse_sequence_t_27_q0;
        pulse_definition_tim_13_reg_1952 <= cfg_pulse_sequence_t_28_q0;
        pulse_definition_tim_14_reg_1960 <= cfg_pulse_sequence_t_29_q0;
        pulse_definition_tim_15_reg_1968 <= cfg_pulse_sequence_t_30_q0;
        pulse_definition_tim_1_reg_1853 <= cfg_pulse_sequence_t_16_q0;
        pulse_definition_tim_2_reg_1862 <= cfg_pulse_sequence_t_17_q0;
        pulse_definition_tim_3_reg_1871 <= cfg_pulse_sequence_t_18_q0;
        pulse_definition_tim_4_reg_1880 <= cfg_pulse_sequence_t_19_q0;
        pulse_definition_tim_5_reg_1888 <= cfg_pulse_sequence_t_20_q0;
        pulse_definition_tim_6_reg_1896 <= cfg_pulse_sequence_t_21_q0;
        pulse_definition_tim_7_reg_1904 <= cfg_pulse_sequence_t_22_q0;
        pulse_definition_tim_8_reg_1912 <= cfg_pulse_sequence_t_23_q0;
        pulse_definition_tim_9_reg_1920 <= cfg_pulse_sequence_t_24_q0;
        pulse_definition_tim_reg_1845 <= cfg_pulse_sequence_t_q0;
        pulse_sequence_index_reg_1976 <= pulse_sequence_index_fu_1045_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((pulse_queue_s_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
        and_ln217_reg_2116 <= and_ln217_fu_1276_p2;
        pulse_last_pulse_in_1_reg_2120 <= pulse_last_pulse_in_1_fu_1282_p2;
        pulse_num_samples_1_reg_2105 <= pulse_num_samples_1_fu_1236_p3;
        pulse_num_samples_2_reg_2110 <= pulse_num_samples_2_fu_1250_p3;
        pulse_num_samples_reg_2100 <= pulse_num_samples_fu_1222_p3;
        select_ln226_reg_2127 <= select_ln226_fu_1287_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coef_reg_1613 <= coef_fu_946_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (1'b1 == ap_CS_fsm_state48))) begin
        hhvv_index_V_reg_2132 <= hhvv_index_V_fu_1462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        icmp_ln226_reg_2095 <= icmp_ln226_fu_1208_p2;
        num_pulses_scheduled_5_reg_2090 <= num_pulses_scheduled_5_fu_1202_p2;
        pulse_first_pulse_in_1_reg_2082 <= pulse_first_pulse_in_1_fu_1196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (icmp_ln147_fu_865_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Result_s_reg_1601 <= cfg_enabled_channel_vector[32'd2];
        pulse_post_decimatio_reg_1585 <= pulse_post_decimatio_fu_884_p1;
        tmp_reg_1597 <= cfg_enabled_channel_vector[32'd1];
        trunc_ln791_reg_1593 <= trunc_ln791_fu_887_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pulse_definition_prt_4_reg_2054 <= pulse_definition_prt_q0;
        sub_ln210_1_reg_2072 <= sub_ln210_1_fu_1159_p2;
        sub_ln210_2_reg_2077 <= sub_ln210_2_fu_1176_p2;
        sub_ln210_reg_2067 <= sub_ln210_fu_1142_p2;
        tmp_def_block_post_t_reg_2046 <= tmp_def_block_post_t_fu_1112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_1079_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        pulse_first_pulse_in_reg_2019 <= pulse_first_pulse_in_fu_1090_p2;
        pulse_last_pulse_in_s_reg_2027 <= pulse_last_pulse_in_s_fu_1096_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_rep_reg_2014 <= pulse_rep_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        set_reg_1543 <= set_fu_871_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (1'd0 == and_ln217_reg_2116) & (1'b1 == ap_CS_fsm_state48))) begin
        staggered_prt_index_reg_2137 <= staggered_prt_index_fu_1468_p2;
        tmp_num_samples_fu_288 <= pulse_num_samples_2_reg_2110;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln154_1_reg_1605[9 : 4] <= sub_ln154_1_fu_934_p2[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        zext_ln172_1_reg_1653[15 : 0] <= zext_ln172_1_fu_1007_p1[15 : 0];
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cfg_filter_coefs_ch0_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cfg_filter_coefs_ch1_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cfg_filter_coefs_ch2_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_b_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_c_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_3_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_4_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_n_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_n_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_p_3_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_p_4_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_p_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_16_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_17_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_18_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_19_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_20_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_21_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_22_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_23_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_24_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_25_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_26_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_27_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_28_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_29_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_30_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch0_V_V_TDATA_blk_n = coef_ch0_V_V_TREADY_int;
    end else begin
        coef_ch0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        coef_ch0_V_V_TDATA_int = tmp_V_1_fu_974_p1;
    end else if (((icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch0_V_V_TDATA_int = tmp_V_fu_877_p1;
    end else begin
        coef_ch0_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state2_io) & (icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch0_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch0_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch1_V_V_TDATA_blk_n = coef_ch1_V_V_TREADY_int;
    end else begin
        coef_ch1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        coef_ch1_V_V_TDATA_int = tmp_V_2_fu_979_p1;
    end else if (((icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch1_V_V_TDATA_int = tmp_V_fu_877_p1;
    end else begin
        coef_ch1_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state2_io) & (icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch1_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch1_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch2_V_V_TDATA_blk_n = coef_ch2_V_V_TREADY_int;
    end else begin
        coef_ch2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        coef_ch2_V_V_TDATA_int = tmp_V_3_fu_984_p1;
    end else if (((icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch2_V_V_TDATA_int = tmp_V_fu_877_p1;
    end else begin
        coef_ch2_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_state2_io) & (icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch2_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch2_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_1181_ap_start = 1'b1;
    end else begin
        grp_fu_1181_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_1181_ce = 1'b0;
    end else begin
        grp_fu_1181_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_1185_ap_start = 1'b1;
    end else begin
        grp_fu_1185_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_1185_ce = 1'b0;
    end else begin
        grp_fu_1185_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_1189_ap_start = 1'b1;
    end else begin
        grp_fu_1189_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_1189_ce = 1'b0;
    end else begin
        grp_fu_1189_ce = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_definition_prt_address0 = zext_ln195_fu_1101_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_address0 = 64'd0;
    end else begin
        pulse_definition_prt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        pulse_definition_prt_address1 = zext_ln262_fu_1474_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_address1 = 64'd1;
    end else begin
        pulse_definition_prt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        pulse_definition_prt_ce0 = 1'b1;
    end else begin
        pulse_definition_prt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (1'b1 == ap_CS_fsm_state48)))) begin
        pulse_definition_prt_ce1 = 1'b1;
    end else begin
        pulse_definition_prt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_we0 = 1'b1;
    end else begin
        pulse_definition_prt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_we1 = 1'b1;
    end else begin
        pulse_definition_prt_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | ((trunc_ln791_reg_1593 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        pulse_queue_0_V_blk_n = pulse_queue_0_V_full_n;
    end else begin
        pulse_queue_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50))) begin
        pulse_queue_0_V_din = 853'd30030067315218800919884630782037027445247038374198014146711597563050526250476926831789640794321325523394216076738821850476730762665208973047045843626559620640158907690363610309346513399556581649279919071671610504617321356178738468477058455548958390664298496;
    end else if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (trunc_ln791_reg_1593 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        pulse_queue_0_V_din = tmp_1_1_fu_1336_p34;
    end else begin
        pulse_queue_0_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50)) | (~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (trunc_ln791_reg_1593 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        pulse_queue_0_V_write = 1'b1;
    end else begin
        pulse_queue_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | ((tmp_reg_1597 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        pulse_queue_1_V_blk_n = pulse_queue_1_V_full_n;
    end else begin
        pulse_queue_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50))) begin
        pulse_queue_1_V_din = 853'd30030067315218800919884630782037027445247038374198014146711597563050526250476926831789640794321325523394216076738821850476730762665208973047045843626559620640158907690363610309346513399556581649279919071671610504617321356178738468477058455548958390664298496;
    end else if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (tmp_reg_1597 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        pulse_queue_1_V_din = tmp_2_1_fu_1376_p34;
    end else begin
        pulse_queue_1_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50)) | (~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (tmp_reg_1597 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        pulse_queue_1_V_write = 1'b1;
    end else begin
        pulse_queue_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | ((p_Result_s_reg_1601 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        pulse_queue_2_V_blk_n = pulse_queue_2_V_full_n;
    end else begin
        pulse_queue_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50))) begin
        pulse_queue_2_V_din = 853'd30030067315218800919884630782037027445247038374198014146711597563050526250476926831789640794321325523394216076738821850476730762665208973047045843626559620640158907690363610309346513399556581649279919071671610504617321356178738468477058455548958390664298496;
    end else if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (p_Result_s_reg_1601 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        pulse_queue_2_V_din = tmp_3_1_fu_1416_p34;
    end else begin
        pulse_queue_2_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50)) | (~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (p_Result_s_reg_1601 == 1'd1) & (1'b1 == ap_CS_fsm_state48)))) begin
        pulse_queue_2_V_write = 1'b1;
    end else begin
        pulse_queue_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state50))) begin
        pulse_queue_s_V_blk_n = pulse_queue_s_V_full_n;
    end else begin
        pulse_queue_s_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50))) begin
        pulse_queue_s_V_din = 853'd30030067315218800919884630782037027445247038374198014146711597563050526250476926831789640794321325523394216076738821850476730762665208973047045843626559620640158907690363610309346513399556581649279919071671610504617321356178738468477058455548958390664298496;
    end else if (((pulse_queue_s_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
        pulse_queue_s_V_din = tmp_1_fu_1294_p34;
    end else begin
        pulse_queue_s_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((pulse_queue_s_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state47)) | (~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50)))) begin
        pulse_queue_s_V_write = 1'b1;
    end else begin
        pulse_queue_s_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (icmp_ln147_fu_865_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b0 == ap_block_state2_io) & (icmp_ln147_fu_865_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln152_fu_940_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln172_fu_1011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln180_fu_1079_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((pulse_queue_s_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (1'd1 == and_ln217_reg_2116) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else if ((~(((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1))) & (1'd0 == and_ln217_reg_2116) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state50 : begin
            if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln154_fu_962_p2 = (sub_ln154_1_reg_1605 + zext_ln154_1_fu_958_p1);

assign add_ln187_fu_1049_p2 = ($signed(32'd4294967295) + $signed(cfg_pulse_sequence_n_q0));

assign add_ln207_1_fu_1067_p2 = (cfg_pulse_sequence_t_17_q0 + cfg_pulse_sequence_t_25_q0);

assign add_ln207_2_fu_1073_p2 = (cfg_pulse_sequence_t_18_q0 + cfg_pulse_sequence_t_26_q0);

assign add_ln207_fu_1061_p2 = (cfg_pulse_sequence_t_16_q0 + cfg_pulse_sequence_t_24_q0);

assign and_ln217_fu_1276_p2 = (xor_ln217_fu_1270_p2 & icmp_ln217_fu_1258_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = (((coef_ch2_V_V_TREADY_int == 1'b0) & (icmp_ln147_fu_865_p2 == 1'd0)) | ((coef_ch1_V_V_TREADY_int == 1'b0) & (icmp_ln147_fu_865_p2 == 1'd0)) | ((coef_ch0_V_V_TREADY_int == 1'b0) & (icmp_ln147_fu_865_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state3_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state48 = (((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1601 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1597 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1593 == 1'd1)));
end

always @ (*) begin
    ap_block_state50 = ((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state5_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign cfg_filter_coefs_ch0_address0 = sext_ln154_fu_967_p1;

assign cfg_filter_coefs_ch1_address0 = sext_ln154_fu_967_p1;

assign cfg_filter_coefs_ch2_address0 = sext_ln154_fu_967_p1;

assign cfg_pulse_sequence_b_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_c_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_f_3_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_f_4_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_f_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_n_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_p_3_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_p_4_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_p_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_16_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_17_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_18_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_19_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_20_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_21_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_22_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_23_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_24_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_25_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_26_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_27_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_28_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_29_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_30_address0 = zext_ln175_fu_1016_p1;

assign cfg_pulse_sequence_t_address0 = zext_ln175_fu_1016_p1;

assign coef_ch0_V_V_TVALID = regslice_both_coef_ch0_V_V_U_vld_out;

assign coef_ch1_V_V_TVALID = regslice_both_coef_ch1_V_V_U_vld_out;

assign coef_ch2_V_V_TVALID = regslice_both_coef_ch2_V_V_U_vld_out;

assign coef_fu_946_p2 = (coef_0_i_reg_796 + 6'd1);

assign hhvv_index_V_fu_1462_p2 = (p_Val2_s_reg_817 + 2'd1);

assign icmp_ln147_fu_865_p2 = ((val_assign_reg_784 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_940_p2 = ((coef_0_i_reg_796 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_1011_p2 = ((seq_idx_0_i_reg_807 > zext_ln172_1_reg_1653) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_1079_p2 = ((pulse_rep_0_i_reg_841 < pulse_definition_num_reg_1794) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_1055_p2 = ((cfg_pulse_sequence_p_4_q0 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln208_1_fu_1147_p2 = ((pulse_definition_prt_q0 < add_ln207_1_reg_1999) ? 1'b1 : 1'b0);

assign icmp_ln208_2_fu_1164_p2 = ((pulse_definition_prt_q0 < add_ln207_2_reg_2005) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_1130_p2 = ((pulse_definition_prt_q0 < add_ln207_reg_1993) ? 1'b1 : 1'b0);

assign icmp_ln211_1_fu_1230_p2 = ((grp_fu_1185_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln211_2_fu_1244_p2 = ((grp_fu_1189_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln211_fu_1216_p2 = ((grp_fu_1181_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln217_1_fu_1264_p2 = ((num_pulses_scheduled_1_fu_284 < cfg_num_pulses_to_ex) ? 1'b1 : 1'b0);

assign icmp_ln217_fu_1258_p2 = ((cfg_num_pulses_to_ex != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln226_fu_1208_p2 = ((num_pulses_scheduled_5_fu_1202_p2 == cfg_num_pulses_per_x) ? 1'b1 : 1'b0);

assign icmp_ln262_1_fu_1497_p2 = ((pulse_definition_prt_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln262_fu_1492_p2 = ((staggered_prt_index_reg_2137 == 8'd2) ? 1'b1 : 1'b0);

assign num_pulses_scheduled_5_fu_1202_p2 = (num_pulses_scheduled_2_fu_280 + 32'd1);

assign num_pulses_scheduled_fu_1456_p2 = (num_pulses_scheduled_1_fu_284 + 32'd1);

assign or_ln262_fu_1503_p2 = (icmp_ln262_fu_1492_p2 | icmp_ln262_1_fu_1497_p2);

assign pulse_def_polarizati_fu_1126_p1 = tmp_3_fu_1118_p3;

assign pulse_first_pulse_in_1_fu_1196_p2 = ((num_pulses_scheduled_2_fu_280 == 32'd0) ? 1'b1 : 1'b0);

assign pulse_first_pulse_in_fu_1090_p2 = ((pulse_rep_0_i_reg_841 == 32'd0) ? 1'b1 : 1'b0);

assign pulse_last_pulse_in_1_fu_1282_p2 = (icmp_ln226_reg_2095 | and_ln217_fu_1276_p2);

assign pulse_last_pulse_in_s_fu_1096_p2 = ((pulse_rep_0_i_reg_841 == add_ln187_reg_1984) ? 1'b1 : 1'b0);

assign pulse_num_samples_1_fu_1236_p3 = ((icmp_ln211_1_fu_1230_p2[0:0] === 1'b1) ? 32'd1 : grp_fu_1185_p2);

assign pulse_num_samples_2_fu_1250_p3 = ((icmp_ln211_2_fu_1244_p2[0:0] === 1'b1) ? 32'd1 : grp_fu_1189_p2);

assign pulse_num_samples_fu_1222_p3 = ((icmp_ln211_fu_1216_p2[0:0] === 1'b1) ? 32'd1 : grp_fu_1181_p2);

assign pulse_post_decimatio_fu_884_p1 = cfg_post_decimation[7:0];

assign pulse_rep_fu_1084_p2 = (pulse_rep_0_i_reg_841 + 32'd1);

assign pulse_sequence_index_fu_1045_p1 = seq_idx_0_i_reg_807[7:0];

assign select_ln208_1_fu_1152_p3 = ((icmp_ln208_1_fu_1147_p2[0:0] === 1'b1) ? pulse_definition_prt_q0 : add_ln207_1_reg_1999);

assign select_ln208_2_fu_1169_p3 = ((icmp_ln208_2_fu_1164_p2[0:0] === 1'b1) ? pulse_definition_prt_q0 : add_ln207_2_reg_2005);

assign select_ln208_fu_1135_p3 = ((icmp_ln208_fu_1130_p2[0:0] === 1'b1) ? pulse_definition_prt_q0 : add_ln207_reg_1993);

assign select_ln226_fu_1287_p3 = ((pulse_last_pulse_in_1_fu_1282_p2[0:0] === 1'b1) ? 32'd0 : num_pulses_scheduled_5_reg_2090);

assign select_ln262_fu_1509_p3 = ((or_ln262_fu_1503_p2[0:0] === 1'b1) ? 8'd0 : staggered_prt_index_reg_2137);

assign seq_idx_fu_1106_p2 = (seq_idx_0_i_reg_807 + 17'd1);

assign set_fu_871_p2 = (val_assign_reg_784 + 4'd1);

assign sext_ln154_fu_967_p1 = $signed(add_ln154_fu_962_p2);

assign staggered_prt_index_fu_1468_p2 = (staggered_prt_index_s_reg_829 + 8'd1);

assign start_index_fu_989_p1 = cfg_pulse_sequence_s[15:0];

assign start_out = real_start;

assign stop_index_fu_993_p4 = {{cfg_pulse_sequence_s[31:16]}};

assign sub_ln154_1_fu_934_p2 = (tmp_8_fu_914_p3 - zext_ln154_fu_930_p1);

assign sub_ln154_fu_952_p2 = ($signed(6'd47) - $signed(coef_0_i_reg_796));

assign sub_ln210_1_fu_1159_p2 = (select_ln208_1_fu_1152_p3 - pulse_definition_tim_2_reg_1862);

assign sub_ln210_2_fu_1176_p2 = (select_ln208_2_fu_1169_p3 - pulse_definition_tim_3_reg_1871);

assign sub_ln210_fu_1142_p2 = (select_ln208_fu_1135_p3 - pulse_definition_tim_1_reg_1853);

assign tmp_1_1_fu_1336_p34 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_2120}}}, {pulse_first_pulse_in_1_reg_2082}}}, {pulse_last_pulse_in_s_reg_2027}}}, {pulse_first_pulse_in_reg_2019}}}, {pulse_post_decimatio_reg_1585}}}, {pulse_num_samples_reg_2100}}}, {pulse_sequence_index_reg_1976}}}, {pulse_definition_tim_15_reg_1968}}}, {pulse_definition_tim_14_reg_1960}}}, {pulse_definition_tim_13_reg_1952}}}, {pulse_definition_tim_12_reg_1944}}}, {pulse_definition_tim_11_reg_1936}}}, {pulse_definition_tim_10_reg_1928}}}, {pulse_definition_tim_9_reg_1920}}}, {pulse_definition_tim_8_reg_1912}}}, {pulse_definition_tim_7_reg_1904}}}, {pulse_definition_tim_6_reg_1896}}}, {pulse_definition_tim_5_reg_1888}}}, {pulse_definition_tim_4_reg_1880}}}, {pulse_definition_tim_3_reg_1871}}}, {pulse_definition_tim_2_reg_1862}}}, {pulse_definition_tim_1_reg_1853}}}, {pulse_definition_tim_reg_1845}}}, {pulse_definition_fil_2_reg_1837}}}, {pulse_definition_fil_1_reg_1829}}}, {pulse_definition_fil_reg_1821}}}, {tmp_def_polarization_reg_852}}}, {pulse_definition_con_reg_1808}}}, {tmp_def_block_post_t_reg_2046}}}, {pulse_definition_num_reg_1794}}}, {cfg_pulse_sequence_p_8_reg_1786}}}, {pulse_definition_prt_4_reg_2054}};

assign tmp_1_fu_1294_p34 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_fu_1282_p2}}}, {pulse_first_pulse_in_1_reg_2082}}}, {pulse_last_pulse_in_s_reg_2027}}}, {pulse_first_pulse_in_reg_2019}}}, {pulse_post_decimatio_reg_1585}}}, {tmp_num_samples_fu_288}}}, {pulse_sequence_index_reg_1976}}}, {pulse_definition_tim_15_reg_1968}}}, {pulse_definition_tim_14_reg_1960}}}, {pulse_definition_tim_13_reg_1952}}}, {pulse_definition_tim_12_reg_1944}}}, {pulse_definition_tim_11_reg_1936}}}, {pulse_definition_tim_10_reg_1928}}}, {pulse_definition_tim_9_reg_1920}}}, {pulse_definition_tim_8_reg_1912}}}, {pulse_definition_tim_7_reg_1904}}}, {pulse_definition_tim_6_reg_1896}}}, {pulse_definition_tim_5_reg_1888}}}, {pulse_definition_tim_4_reg_1880}}}, {pulse_definition_tim_3_reg_1871}}}, {pulse_definition_tim_2_reg_1862}}}, {pulse_definition_tim_1_reg_1853}}}, {pulse_definition_tim_reg_1845}}}, {pulse_definition_fil_2_reg_1837}}}, {pulse_definition_fil_1_reg_1829}}}, {pulse_definition_fil_reg_1821}}}, {tmp_def_polarization_reg_852}}}, {pulse_definition_con_reg_1808}}}, {tmp_def_block_post_t_reg_2046}}}, {pulse_definition_num_reg_1794}}}, {cfg_pulse_sequence_p_8_reg_1786}}}, {pulse_definition_prt_4_reg_2054}};

assign tmp_2_1_fu_1376_p34 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_2120}}}, {pulse_first_pulse_in_1_reg_2082}}}, {pulse_last_pulse_in_s_reg_2027}}}, {pulse_first_pulse_in_reg_2019}}}, {pulse_post_decimatio_reg_1585}}}, {pulse_num_samples_1_reg_2105}}}, {pulse_sequence_index_reg_1976}}}, {pulse_definition_tim_15_reg_1968}}}, {pulse_definition_tim_14_reg_1960}}}, {pulse_definition_tim_13_reg_1952}}}, {pulse_definition_tim_12_reg_1944}}}, {pulse_definition_tim_11_reg_1936}}}, {pulse_definition_tim_10_reg_1928}}}, {pulse_definition_tim_9_reg_1920}}}, {pulse_definition_tim_8_reg_1912}}}, {pulse_definition_tim_7_reg_1904}}}, {pulse_definition_tim_6_reg_1896}}}, {pulse_definition_tim_5_reg_1888}}}, {pulse_definition_tim_4_reg_1880}}}, {pulse_definition_tim_3_reg_1871}}}, {pulse_definition_tim_2_reg_1862}}}, {pulse_definition_tim_1_reg_1853}}}, {pulse_definition_tim_reg_1845}}}, {pulse_definition_fil_2_reg_1837}}}, {pulse_definition_fil_1_reg_1829}}}, {pulse_definition_fil_reg_1821}}}, {tmp_def_polarization_reg_852}}}, {pulse_definition_con_reg_1808}}}, {tmp_def_block_post_t_reg_2046}}}, {pulse_definition_num_reg_1794}}}, {cfg_pulse_sequence_p_8_reg_1786}}}, {pulse_definition_prt_4_reg_2054}};

assign tmp_3_1_fu_1416_p34 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_2120}}}, {pulse_first_pulse_in_1_reg_2082}}}, {pulse_last_pulse_in_s_reg_2027}}}, {pulse_first_pulse_in_reg_2019}}}, {pulse_post_decimatio_reg_1585}}}, {pulse_num_samples_2_reg_2110}}}, {pulse_sequence_index_reg_1976}}}, {pulse_definition_tim_15_reg_1968}}}, {pulse_definition_tim_14_reg_1960}}}, {pulse_definition_tim_13_reg_1952}}}, {pulse_definition_tim_12_reg_1944}}}, {pulse_definition_tim_11_reg_1936}}}, {pulse_definition_tim_10_reg_1928}}}, {pulse_definition_tim_9_reg_1920}}}, {pulse_definition_tim_8_reg_1912}}}, {pulse_definition_tim_7_reg_1904}}}, {pulse_definition_tim_6_reg_1896}}}, {pulse_definition_tim_5_reg_1888}}}, {pulse_definition_tim_4_reg_1880}}}, {pulse_definition_tim_3_reg_1871}}}, {pulse_definition_tim_2_reg_1862}}}, {pulse_definition_tim_1_reg_1853}}}, {pulse_definition_tim_reg_1845}}}, {pulse_definition_fil_2_reg_1837}}}, {pulse_definition_fil_1_reg_1829}}}, {pulse_definition_fil_reg_1821}}}, {tmp_def_polarization_reg_852}}}, {pulse_definition_con_reg_1808}}}, {tmp_def_block_post_t_reg_2046}}}, {pulse_definition_num_reg_1794}}}, {cfg_pulse_sequence_p_8_reg_1786}}}, {pulse_definition_prt_4_reg_2054}};

assign tmp_3_fu_1118_p3 = p_Val2_s_reg_817[32'd1];

assign tmp_8_fu_914_p3 = {{val_assign_reg_784}, {6'd0}};

assign tmp_9_fu_922_p3 = {{val_assign_reg_784}, {4'd0}};

assign tmp_V_1_fu_974_p1 = cfg_filter_coefs_ch0_q0[23:0];

assign tmp_V_2_fu_979_p1 = cfg_filter_coefs_ch1_q0[23:0];

assign tmp_V_3_fu_984_p1 = cfg_filter_coefs_ch2_q0[23:0];

assign tmp_V_fu_877_p1 = val_assign_reg_784;

assign tmp_def_block_post_t_fu_1112_p3 = ((pulse_last_pulse_in_s_reg_2027[0:0] === 1'b1) ? pulse_definition_blo_reg_1803 : 32'd0);

assign trunc_ln791_fu_887_p1 = cfg_enabled_channel_vector[0:0];

assign xor_ln217_fu_1270_p2 = (icmp_ln217_1_fu_1264_p2 ^ 1'd1);

assign zext_ln154_1_fu_958_p1 = sub_ln154_fu_952_p2;

assign zext_ln154_fu_930_p1 = tmp_9_fu_922_p3;

assign zext_ln172_1_fu_1007_p1 = stop_index_fu_993_p4;

assign zext_ln172_fu_1003_p1 = start_index_fu_989_p1;

assign zext_ln175_fu_1016_p1 = seq_idx_0_i_reg_807;

assign zext_ln195_fu_1101_p1 = staggered_prt_index_s_reg_829;

assign zext_ln262_fu_1474_p1 = staggered_prt_index_fu_1468_p2;

always @ (posedge ap_clk) begin
    sub_ln154_1_reg_1605[3:0] <= 4'b0000;
    zext_ln172_1_reg_1653[16] <= 1'b0;
end

endmodule //scheduler_parser
