// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scheduler_parser (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cfg_pulse_sequence_s,
        cfg_num_pulses_to_ex,
        cfg_total_decimation,
        cfg_post_decimation,
        cfg_num_pulses_per_x,
        cfg_enabled_channel_vector,
        cfg_watchdog,
        cfg_phase_samples_address0,
        cfg_phase_samples_ce0,
        cfg_phase_samples_q0,
        cfg_pulse_sequence_p_address0,
        cfg_pulse_sequence_p_ce0,
        cfg_pulse_sequence_p_q0,
        cfg_pulse_sequence_p_5_address0,
        cfg_pulse_sequence_p_5_ce0,
        cfg_pulse_sequence_p_5_q0,
        cfg_pulse_sequence_n_address0,
        cfg_pulse_sequence_n_ce0,
        cfg_pulse_sequence_n_q0,
        cfg_pulse_sequence_b_address0,
        cfg_pulse_sequence_b_ce0,
        cfg_pulse_sequence_b_q0,
        cfg_pulse_sequence_c_address0,
        cfg_pulse_sequence_c_ce0,
        cfg_pulse_sequence_c_q0,
        cfg_pulse_sequence_p_6_address0,
        cfg_pulse_sequence_p_6_ce0,
        cfg_pulse_sequence_p_6_q0,
        cfg_pulse_sequence_f_address0,
        cfg_pulse_sequence_f_ce0,
        cfg_pulse_sequence_f_q0,
        cfg_pulse_sequence_f_3_address0,
        cfg_pulse_sequence_f_3_ce0,
        cfg_pulse_sequence_f_3_q0,
        cfg_pulse_sequence_f_4_address0,
        cfg_pulse_sequence_f_4_ce0,
        cfg_pulse_sequence_f_4_q0,
        cfg_pulse_sequence_p_7_address0,
        cfg_pulse_sequence_p_7_ce0,
        cfg_pulse_sequence_p_7_q0,
        cfg_pulse_sequence_p_8_address0,
        cfg_pulse_sequence_p_8_ce0,
        cfg_pulse_sequence_p_8_q0,
        cfg_pulse_sequence_t_address0,
        cfg_pulse_sequence_t_ce0,
        cfg_pulse_sequence_t_q0,
        cfg_pulse_sequence_t_16_address0,
        cfg_pulse_sequence_t_16_ce0,
        cfg_pulse_sequence_t_16_q0,
        cfg_pulse_sequence_t_17_address0,
        cfg_pulse_sequence_t_17_ce0,
        cfg_pulse_sequence_t_17_q0,
        cfg_pulse_sequence_t_18_address0,
        cfg_pulse_sequence_t_18_ce0,
        cfg_pulse_sequence_t_18_q0,
        cfg_pulse_sequence_t_19_address0,
        cfg_pulse_sequence_t_19_ce0,
        cfg_pulse_sequence_t_19_q0,
        cfg_pulse_sequence_t_20_address0,
        cfg_pulse_sequence_t_20_ce0,
        cfg_pulse_sequence_t_20_q0,
        cfg_pulse_sequence_t_21_address0,
        cfg_pulse_sequence_t_21_ce0,
        cfg_pulse_sequence_t_21_q0,
        cfg_pulse_sequence_t_22_address0,
        cfg_pulse_sequence_t_22_ce0,
        cfg_pulse_sequence_t_22_q0,
        cfg_pulse_sequence_t_23_address0,
        cfg_pulse_sequence_t_23_ce0,
        cfg_pulse_sequence_t_23_q0,
        cfg_pulse_sequence_t_24_address0,
        cfg_pulse_sequence_t_24_ce0,
        cfg_pulse_sequence_t_24_q0,
        cfg_pulse_sequence_t_25_address0,
        cfg_pulse_sequence_t_25_ce0,
        cfg_pulse_sequence_t_25_q0,
        cfg_pulse_sequence_t_26_address0,
        cfg_pulse_sequence_t_26_ce0,
        cfg_pulse_sequence_t_26_q0,
        cfg_pulse_sequence_t_27_address0,
        cfg_pulse_sequence_t_27_ce0,
        cfg_pulse_sequence_t_27_q0,
        cfg_pulse_sequence_t_28_address0,
        cfg_pulse_sequence_t_28_ce0,
        cfg_pulse_sequence_t_28_q0,
        cfg_pulse_sequence_t_29_address0,
        cfg_pulse_sequence_t_29_ce0,
        cfg_pulse_sequence_t_29_q0,
        cfg_pulse_sequence_t_30_address0,
        cfg_pulse_sequence_t_30_ce0,
        cfg_pulse_sequence_t_30_q0,
        cfg_filter_coefs_ch0_address0,
        cfg_filter_coefs_ch0_ce0,
        cfg_filter_coefs_ch0_q0,
        cfg_filter_coefs_ch1_address0,
        cfg_filter_coefs_ch1_ce0,
        cfg_filter_coefs_ch1_q0,
        cfg_filter_coefs_ch2_address0,
        cfg_filter_coefs_ch2_ce0,
        cfg_filter_coefs_ch2_q0,
        coef_ch0_V_V_TDATA,
        coef_ch0_V_V_TVALID,
        coef_ch0_V_V_TREADY,
        coef_ch1_V_V_TDATA,
        coef_ch1_V_V_TVALID,
        coef_ch1_V_V_TREADY,
        coef_ch2_V_V_TDATA,
        coef_ch2_V_V_TVALID,
        coef_ch2_V_V_TREADY,
        pulse_queue_0_V_din,
        pulse_queue_0_V_full_n,
        pulse_queue_0_V_write,
        pulse_queue_1_V_din,
        pulse_queue_1_V_full_n,
        pulse_queue_1_V_write,
        pulse_queue_2_V_din,
        pulse_queue_2_V_full_n,
        pulse_queue_2_V_write,
        pulse_queue_s_V_din,
        pulse_queue_s_V_full_n,
        pulse_queue_s_V_write
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_state52 = 53'd2251799813685248;
parameter    ap_ST_fsm_state53 = 53'd4503599627370496;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] cfg_pulse_sequence_s;
input  [31:0] cfg_num_pulses_to_ex;
input  [31:0] cfg_total_decimation;
input  [31:0] cfg_post_decimation;
input  [31:0] cfg_num_pulses_per_x;
input  [31:0] cfg_enabled_channel_vector;
input  [31:0] cfg_watchdog;
output  [15:0] cfg_phase_samples_address0;
output   cfg_phase_samples_ce0;
input  [31:0] cfg_phase_samples_q0;
output  [4:0] cfg_pulse_sequence_p_address0;
output   cfg_pulse_sequence_p_ce0;
input  [31:0] cfg_pulse_sequence_p_q0;
output  [4:0] cfg_pulse_sequence_p_5_address0;
output   cfg_pulse_sequence_p_5_ce0;
input  [31:0] cfg_pulse_sequence_p_5_q0;
output  [4:0] cfg_pulse_sequence_n_address0;
output   cfg_pulse_sequence_n_ce0;
input  [31:0] cfg_pulse_sequence_n_q0;
output  [4:0] cfg_pulse_sequence_b_address0;
output   cfg_pulse_sequence_b_ce0;
input  [31:0] cfg_pulse_sequence_b_q0;
output  [4:0] cfg_pulse_sequence_c_address0;
output   cfg_pulse_sequence_c_ce0;
input  [31:0] cfg_pulse_sequence_c_q0;
output  [4:0] cfg_pulse_sequence_p_6_address0;
output   cfg_pulse_sequence_p_6_ce0;
input  [31:0] cfg_pulse_sequence_p_6_q0;
output  [4:0] cfg_pulse_sequence_f_address0;
output   cfg_pulse_sequence_f_ce0;
input  [31:0] cfg_pulse_sequence_f_q0;
output  [4:0] cfg_pulse_sequence_f_3_address0;
output   cfg_pulse_sequence_f_3_ce0;
input  [31:0] cfg_pulse_sequence_f_3_q0;
output  [4:0] cfg_pulse_sequence_f_4_address0;
output   cfg_pulse_sequence_f_4_ce0;
input  [31:0] cfg_pulse_sequence_f_4_q0;
output  [4:0] cfg_pulse_sequence_p_7_address0;
output   cfg_pulse_sequence_p_7_ce0;
input  [31:0] cfg_pulse_sequence_p_7_q0;
output  [4:0] cfg_pulse_sequence_p_8_address0;
output   cfg_pulse_sequence_p_8_ce0;
input  [31:0] cfg_pulse_sequence_p_8_q0;
output  [4:0] cfg_pulse_sequence_t_address0;
output   cfg_pulse_sequence_t_ce0;
input  [31:0] cfg_pulse_sequence_t_q0;
output  [4:0] cfg_pulse_sequence_t_16_address0;
output   cfg_pulse_sequence_t_16_ce0;
input  [31:0] cfg_pulse_sequence_t_16_q0;
output  [4:0] cfg_pulse_sequence_t_17_address0;
output   cfg_pulse_sequence_t_17_ce0;
input  [31:0] cfg_pulse_sequence_t_17_q0;
output  [4:0] cfg_pulse_sequence_t_18_address0;
output   cfg_pulse_sequence_t_18_ce0;
input  [31:0] cfg_pulse_sequence_t_18_q0;
output  [4:0] cfg_pulse_sequence_t_19_address0;
output   cfg_pulse_sequence_t_19_ce0;
input  [31:0] cfg_pulse_sequence_t_19_q0;
output  [4:0] cfg_pulse_sequence_t_20_address0;
output   cfg_pulse_sequence_t_20_ce0;
input  [31:0] cfg_pulse_sequence_t_20_q0;
output  [4:0] cfg_pulse_sequence_t_21_address0;
output   cfg_pulse_sequence_t_21_ce0;
input  [31:0] cfg_pulse_sequence_t_21_q0;
output  [4:0] cfg_pulse_sequence_t_22_address0;
output   cfg_pulse_sequence_t_22_ce0;
input  [31:0] cfg_pulse_sequence_t_22_q0;
output  [4:0] cfg_pulse_sequence_t_23_address0;
output   cfg_pulse_sequence_t_23_ce0;
input  [31:0] cfg_pulse_sequence_t_23_q0;
output  [4:0] cfg_pulse_sequence_t_24_address0;
output   cfg_pulse_sequence_t_24_ce0;
input  [31:0] cfg_pulse_sequence_t_24_q0;
output  [4:0] cfg_pulse_sequence_t_25_address0;
output   cfg_pulse_sequence_t_25_ce0;
input  [31:0] cfg_pulse_sequence_t_25_q0;
output  [4:0] cfg_pulse_sequence_t_26_address0;
output   cfg_pulse_sequence_t_26_ce0;
input  [31:0] cfg_pulse_sequence_t_26_q0;
output  [4:0] cfg_pulse_sequence_t_27_address0;
output   cfg_pulse_sequence_t_27_ce0;
input  [31:0] cfg_pulse_sequence_t_27_q0;
output  [4:0] cfg_pulse_sequence_t_28_address0;
output   cfg_pulse_sequence_t_28_ce0;
input  [31:0] cfg_pulse_sequence_t_28_q0;
output  [4:0] cfg_pulse_sequence_t_29_address0;
output   cfg_pulse_sequence_t_29_ce0;
input  [31:0] cfg_pulse_sequence_t_29_q0;
output  [4:0] cfg_pulse_sequence_t_30_address0;
output   cfg_pulse_sequence_t_30_ce0;
input  [31:0] cfg_pulse_sequence_t_30_q0;
output  [8:0] cfg_filter_coefs_ch0_address0;
output   cfg_filter_coefs_ch0_ce0;
input  [31:0] cfg_filter_coefs_ch0_q0;
output  [8:0] cfg_filter_coefs_ch1_address0;
output   cfg_filter_coefs_ch1_ce0;
input  [31:0] cfg_filter_coefs_ch1_q0;
output  [8:0] cfg_filter_coefs_ch2_address0;
output   cfg_filter_coefs_ch2_ce0;
input  [31:0] cfg_filter_coefs_ch2_q0;
output  [23:0] coef_ch0_V_V_TDATA;
output   coef_ch0_V_V_TVALID;
input   coef_ch0_V_V_TREADY;
output  [23:0] coef_ch1_V_V_TDATA;
output   coef_ch1_V_V_TVALID;
input   coef_ch1_V_V_TREADY;
output  [23:0] coef_ch2_V_V_TDATA;
output   coef_ch2_V_V_TVALID;
input   coef_ch2_V_V_TREADY;
output  [948:0] pulse_queue_0_V_din;
input   pulse_queue_0_V_full_n;
output   pulse_queue_0_V_write;
output  [948:0] pulse_queue_1_V_din;
input   pulse_queue_1_V_full_n;
output   pulse_queue_1_V_write;
output  [948:0] pulse_queue_2_V_din;
input   pulse_queue_2_V_full_n;
output   pulse_queue_2_V_write;
output  [948:0] pulse_queue_s_V_din;
input   pulse_queue_s_V_full_n;
output   pulse_queue_s_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cfg_phase_samples_ce0;
reg cfg_pulse_sequence_p_ce0;
reg cfg_pulse_sequence_p_5_ce0;
reg cfg_pulse_sequence_n_ce0;
reg cfg_pulse_sequence_b_ce0;
reg cfg_pulse_sequence_c_ce0;
reg cfg_pulse_sequence_p_6_ce0;
reg cfg_pulse_sequence_f_ce0;
reg cfg_pulse_sequence_f_3_ce0;
reg cfg_pulse_sequence_f_4_ce0;
reg cfg_pulse_sequence_p_7_ce0;
reg cfg_pulse_sequence_p_8_ce0;
reg cfg_pulse_sequence_t_ce0;
reg cfg_pulse_sequence_t_16_ce0;
reg cfg_pulse_sequence_t_17_ce0;
reg cfg_pulse_sequence_t_18_ce0;
reg cfg_pulse_sequence_t_19_ce0;
reg cfg_pulse_sequence_t_20_ce0;
reg cfg_pulse_sequence_t_21_ce0;
reg cfg_pulse_sequence_t_22_ce0;
reg cfg_pulse_sequence_t_23_ce0;
reg cfg_pulse_sequence_t_24_ce0;
reg cfg_pulse_sequence_t_25_ce0;
reg cfg_pulse_sequence_t_26_ce0;
reg cfg_pulse_sequence_t_27_ce0;
reg cfg_pulse_sequence_t_28_ce0;
reg cfg_pulse_sequence_t_29_ce0;
reg cfg_pulse_sequence_t_30_ce0;
reg cfg_filter_coefs_ch0_ce0;
reg cfg_filter_coefs_ch1_ce0;
reg cfg_filter_coefs_ch2_ce0;
reg[948:0] pulse_queue_0_V_din;
reg pulse_queue_0_V_write;
reg[948:0] pulse_queue_1_V_din;
reg pulse_queue_1_V_write;
reg[948:0] pulse_queue_2_V_din;
reg pulse_queue_2_V_write;
reg[948:0] pulse_queue_s_V_din;
reg pulse_queue_s_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    coef_ch0_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln157_fu_954_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    coef_ch1_V_V_TDATA_blk_n;
reg    coef_ch2_V_V_TDATA_blk_n;
reg    pulse_queue_0_V_blk_n;
wire    ap_CS_fsm_state51;
reg   [0:0] trunc_ln791_reg_1839;
wire    ap_CS_fsm_state53;
reg    pulse_queue_1_V_blk_n;
reg   [0:0] tmp_reg_1843;
reg    pulse_queue_2_V_blk_n;
reg   [0:0] p_Result_s_reg_1847;
reg    pulse_queue_s_V_blk_n;
wire    ap_CS_fsm_state50;
reg    ap_block_state1;
wire   [3:0] set_fu_960_p2;
reg   [3:0] set_reg_1775;
reg    ap_block_state2_io;
wire   [23:0] tmp_V_fu_966_p1;
wire   [7:0] pulse_post_decimatio_fu_973_p1;
reg   [7:0] pulse_post_decimatio_reg_1831;
wire   [0:0] trunc_ln791_fu_976_p1;
wire   [9:0] sub_ln164_1_fu_1033_p2;
reg   [9:0] sub_ln164_1_reg_1851;
reg    ap_block_state3_io;
wire   [5:0] coef_fu_1045_p2;
reg   [5:0] coef_reg_1859;
wire    ap_CS_fsm_state4;
wire   [9:0] add_ln164_fu_1061_p2;
reg   [9:0] add_ln164_reg_1864;
wire   [0:0] icmp_ln162_fu_1039_p2;
wire    ap_CS_fsm_state5;
wire   [23:0] tmp_V_1_fu_1072_p1;
reg    ap_block_state6_io;
wire   [23:0] tmp_V_2_fu_1077_p1;
wire   [23:0] tmp_V_3_fu_1082_p1;
wire   [16:0] zext_ln184_fu_1101_p1;
wire    ap_CS_fsm_state8;
wire   [16:0] zext_ln184_1_fu_1105_p1;
reg   [16:0] zext_ln184_1_reg_1904;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln184_fu_1109_p2;
reg   [31:0] cfg_pulse_sequence_p_12_reg_2047;
wire    ap_CS_fsm_state10;
reg   [31:0] pulse_definition_num_reg_2055;
reg   [31:0] pulse_definition_blo_reg_2064;
reg   [31:0] pulse_definition_con_reg_2069;
reg   [31:0] pulse_definition_pol_reg_2077;
reg   [31:0] pulse_definition_fil_reg_2082;
reg   [31:0] pulse_definition_fil_1_reg_2090;
reg   [31:0] pulse_definition_fil_2_reg_2098;
reg   [31:0] pulse_definition_pha_reg_2106;
reg   [31:0] pulse_definition_pha_1_reg_2114;
reg   [31:0] pulse_definition_tim_reg_2123;
reg   [31:0] pulse_definition_tim_1_reg_2131;
reg   [31:0] pulse_definition_tim_2_reg_2140;
reg   [31:0] pulse_definition_tim_3_reg_2149;
reg   [31:0] pulse_definition_tim_4_reg_2158;
reg   [31:0] pulse_definition_tim_5_reg_2166;
reg   [31:0] pulse_definition_tim_6_reg_2174;
reg   [31:0] pulse_definition_tim_7_reg_2182;
reg   [31:0] pulse_definition_tim_8_reg_2190;
reg   [31:0] pulse_definition_tim_9_reg_2198;
reg   [31:0] pulse_definition_tim_10_reg_2206;
reg   [31:0] pulse_definition_tim_11_reg_2214;
reg   [31:0] pulse_definition_tim_12_reg_2222;
reg   [31:0] pulse_definition_tim_13_reg_2230;
reg   [31:0] pulse_definition_tim_14_reg_2238;
reg   [31:0] pulse_definition_tim_15_reg_2246;
wire   [15:0] phase_table_index_fu_1145_p1;
reg   [15:0] phase_table_index_reg_2254;
wire   [7:0] pulse_sequence_index_fu_1149_p1;
reg   [7:0] pulse_sequence_index_reg_2260;
wire   [31:0] add_ln200_fu_1153_p2;
reg   [31:0] add_ln200_reg_2268;
wire   [0:0] icmp_ln212_fu_1159_p2;
reg   [0:0] icmp_ln212_reg_2273;
wire   [31:0] add_ln221_fu_1165_p2;
reg   [31:0] add_ln221_reg_2277;
wire   [31:0] add_ln221_1_fu_1171_p2;
reg   [31:0] add_ln221_1_reg_2283;
wire   [31:0] add_ln221_2_fu_1177_p2;
reg   [31:0] add_ln221_2_reg_2289;
wire   [31:0] pulse_rep_fu_1188_p2;
reg   [31:0] pulse_rep_reg_2298;
wire    ap_CS_fsm_state11;
wire   [0:0] pulse_first_pulse_in_fu_1194_p2;
reg   [0:0] pulse_first_pulse_in_reg_2303;
wire   [0:0] icmp_ln193_fu_1183_p2;
wire   [0:0] pulse_last_pulse_in_s_fu_1200_p2;
reg   [0:0] pulse_last_pulse_in_s_reg_2311;
wire   [16:0] seq_idx_fu_1215_p2;
reg   [31:0] pulse_phase_sample_reg_2335;
wire    ap_CS_fsm_state12;
wire   [31:0] tmp_def_block_post_t_fu_1221_p3;
reg   [31:0] tmp_def_block_post_t_reg_2343;
wire   [31:0] pulse_definition_prt_q0;
reg   [31:0] pulse_definition_prt_4_reg_2351;
wire   [31:0] pulse_def_polarizati_fu_1235_p1;
wire   [0:0] icmp_ln222_fu_1239_p2;
reg   [0:0] icmp_ln222_reg_2367;
wire   [0:0] icmp_ln222_1_fu_1244_p2;
reg   [0:0] icmp_ln222_1_reg_2372;
wire   [0:0] icmp_ln222_2_fu_1249_p2;
reg   [0:0] icmp_ln222_2_reg_2377;
wire   [31:0] sub_ln224_fu_1259_p2;
reg   [31:0] sub_ln224_reg_2382;
wire    ap_CS_fsm_state13;
wire   [31:0] sub_ln224_1_fu_1269_p2;
reg   [31:0] sub_ln224_1_reg_2387;
wire   [31:0] sub_ln224_2_fu_1279_p2;
reg   [31:0] sub_ln224_2_reg_2392;
wire   [0:0] pulse_first_pulse_in_1_fu_1299_p2;
reg   [0:0] pulse_first_pulse_in_1_reg_2397;
wire    ap_CS_fsm_state48;
wire   [31:0] num_pulses_scheduled_5_fu_1305_p2;
reg   [31:0] num_pulses_scheduled_5_reg_2405;
reg   [30:0] tmp_s_reg_2411;
wire    ap_CS_fsm_state49;
reg   [30:0] tmp_4_reg_2416;
reg   [30:0] tmp_5_reg_2421;
wire   [0:0] and_ln232_fu_1359_p2;
reg   [0:0] and_ln232_reg_2426;
wire   [0:0] icmp_ln241_fu_1365_p2;
reg   [0:0] icmp_ln241_reg_2432;
wire   [31:0] pulse_num_samples_fu_1385_p3;
reg   [31:0] pulse_num_samples_reg_2437;
wire   [31:0] pulse_num_samples_1_fu_1406_p3;
reg   [31:0] pulse_num_samples_1_reg_2442;
wire   [31:0] pulse_num_samples_2_fu_1427_p3;
reg   [31:0] pulse_num_samples_2_reg_2447;
wire   [0:0] pulse_last_pulse_in_1_fu_1435_p2;
reg   [0:0] pulse_last_pulse_in_1_reg_2453;
wire   [31:0] select_ln241_fu_1439_p3;
reg   [31:0] select_ln241_reg_2460;
wire   [1:0] hhvv_index_V_fu_1629_p2;
reg   [1:0] hhvv_index_V_reg_2465;
reg    ap_block_state51;
wire   [7:0] staggered_prt_index_fu_1646_p2;
reg   [7:0] staggered_prt_index_reg_2473;
wire   [0:0] or_ln262_fu_1641_p2;
wire   [15:0] phase_table_index_2_fu_1672_p3;
reg   [15:0] phase_table_index_2_reg_2484;
wire   [15:0] watchdog_count_fu_1679_p2;
reg   [15:0] watchdog_count_reg_2489;
wire   [7:0] select_ln277_fu_1718_p3;
wire    ap_CS_fsm_state52;
reg   [0:0] pulse_definition_prt_address0;
reg    pulse_definition_prt_ce0;
reg    pulse_definition_prt_we0;
reg   [0:0] pulse_definition_prt_address1;
reg    pulse_definition_prt_ce1;
reg    pulse_definition_prt_we1;
wire   [31:0] pulse_definition_prt_q1;
reg   [3:0] val_assign_reg_863;
reg   [5:0] coef_0_i_reg_875;
reg    ap_block_state7_io;
reg   [16:0] seq_idx_0_i_reg_886;
reg   [1:0] p_Val2_s_reg_896;
reg   [7:0] staggered_prt_index_s_reg_908;
reg   [15:0] phase_table_index_0_s_reg_920;
reg   [31:0] pulse_rep_0_i_reg_930;
reg   [31:0] tmp_def_polarization_reg_941;
wire  signed [63:0] sext_ln164_fu_1066_p1;
wire   [63:0] zext_ln187_fu_1114_p1;
wire   [63:0] zext_ln202_fu_1205_p1;
wire   [63:0] zext_ln209_fu_1210_p1;
wire   [63:0] zext_ln277_fu_1652_p1;
reg   [15:0] watchdog_count_2_fu_306;
wire   [15:0] watchdog_count_3_fu_1731_p3;
reg   [31:0] watchdog_prev_fu_310;
reg   [31:0] num_pulses_scheduled_2_fu_314;
reg   [31:0] num_pulses_scheduled_1_fu_318;
wire   [31:0] num_pulses_scheduled_fu_1623_p2;
reg   [31:0] tmp_num_samples_fu_322;
wire   [948:0] tmp_1_fu_1446_p37;
wire    regslice_both_coef_ch0_V_V_U_apdone_blk;
wire    regslice_both_coef_ch1_V_V_U_apdone_blk;
wire    regslice_both_coef_ch2_V_V_U_apdone_blk;
reg    ap_block_state53;
wire   [948:0] tmp_1_1_fu_1491_p37;
wire   [948:0] tmp_2_1_fu_1534_p37;
wire   [948:0] tmp_3_1_fu_1577_p37;
wire   [7:0] tmp_9_fu_1021_p3;
wire   [9:0] tmp_8_fu_1013_p3;
wire   [9:0] zext_ln164_fu_1029_p1;
wire   [5:0] sub_ln164_fu_1051_p2;
wire   [9:0] zext_ln164_1_fu_1057_p1;
wire   [15:0] start_index_fu_1087_p1;
wire   [15:0] stop_index_fu_1091_p4;
wire   [0:0] tmp_3_fu_1227_p3;
wire   [31:0] select_ln222_fu_1254_p3;
wire   [31:0] select_ln222_1_fu_1264_p3;
wire   [31:0] select_ln222_2_fu_1274_p3;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_1284_p2;
wire   [31:0] grp_fu_1288_p2;
wire   [31:0] grp_fu_1292_p2;
wire   [0:0] icmp_ln232_1_fu_1347_p2;
wire   [0:0] xor_ln232_fu_1353_p2;
wire   [0:0] icmp_ln232_fu_1341_p2;
wire   [31:0] and_ln_fu_1372_p3;
wire   [0:0] icmp_ln226_fu_1379_p2;
wire   [31:0] and_ln225_1_fu_1393_p3;
wire   [0:0] icmp_ln226_1_fu_1400_p2;
wire   [31:0] and_ln225_2_fu_1414_p3;
wire   [0:0] icmp_ln226_2_fu_1421_p2;
wire   [0:0] icmp_ln262_fu_1635_p2;
wire   [31:0] zext_ln283_fu_1657_p1;
wire   [0:0] icmp_ln283_fu_1661_p2;
wire   [15:0] phase_table_index_1_fu_1666_p2;
wire   [0:0] icmp_ln277_fu_1701_p2;
wire   [0:0] icmp_ln277_1_fu_1706_p2;
wire   [0:0] or_ln277_fu_1712_p2;
wire   [0:0] icmp_ln294_fu_1725_p2;
reg    grp_fu_1284_ap_start;
wire    grp_fu_1284_ap_done;
reg    grp_fu_1288_ap_start;
wire    grp_fu_1288_ap_done;
reg    grp_fu_1292_ap_start;
wire    grp_fu_1292_ap_done;
reg   [52:0] ap_NS_fsm;
reg   [23:0] coef_ch0_V_V_TDATA_int;
reg    coef_ch0_V_V_TVALID_int;
wire    coef_ch0_V_V_TREADY_int;
wire    regslice_both_coef_ch0_V_V_U_vld_out;
reg   [23:0] coef_ch1_V_V_TDATA_int;
reg    coef_ch1_V_V_TVALID_int;
wire    coef_ch1_V_V_TREADY_int;
wire    regslice_both_coef_ch1_V_V_U_vld_out;
reg   [23:0] coef_ch2_V_V_TDATA_int;
reg    coef_ch2_V_V_TVALID_int;
wire    coef_ch2_V_V_TREADY_int;
wire    regslice_both_coef_ch2_V_V_U_vld_out;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 53'd1;
end

scheduler_parser_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
pulse_definition_prt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pulse_definition_prt_address0),
    .ce0(pulse_definition_prt_ce0),
    .we0(pulse_definition_prt_we0),
    .d0(cfg_pulse_sequence_p_q0),
    .q0(pulse_definition_prt_q0),
    .address1(pulse_definition_prt_address1),
    .ce1(pulse_definition_prt_ce1),
    .we1(pulse_definition_prt_we1),
    .d1(cfg_pulse_sequence_p_5_q0),
    .q1(pulse_definition_prt_q1)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1284_ap_start),
    .done(grp_fu_1284_ap_done),
    .din0(sub_ln224_reg_2382),
    .din1(cfg_total_decimation),
    .ce(1'b1),
    .dout(grp_fu_1284_p2)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1288_ap_start),
    .done(grp_fu_1288_ap_done),
    .din0(sub_ln224_1_reg_2387),
    .din1(cfg_total_decimation),
    .ce(1'b1),
    .dout(grp_fu_1288_p2)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1292_ap_start),
    .done(grp_fu_1292_ap_done),
    .din0(sub_ln224_2_reg_2392),
    .din1(cfg_total_decimation),
    .ce(1'b1),
    .dout(grp_fu_1292_p2)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch0_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch0_V_V_TDATA_int),
    .vld_in(coef_ch0_V_V_TVALID_int),
    .ack_in(coef_ch0_V_V_TREADY_int),
    .data_out(coef_ch0_V_V_TDATA),
    .vld_out(regslice_both_coef_ch0_V_V_U_vld_out),
    .ack_out(coef_ch0_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch0_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch1_V_V_TDATA_int),
    .vld_in(coef_ch1_V_V_TVALID_int),
    .ack_in(coef_ch1_V_V_TREADY_int),
    .data_out(coef_ch1_V_V_TDATA),
    .vld_out(regslice_both_coef_ch1_V_V_U_vld_out),
    .ack_out(coef_ch1_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch1_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch2_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch2_V_V_TDATA_int),
    .vld_in(coef_ch2_V_V_TVALID_int),
    .ack_in(coef_ch2_V_V_TREADY_int),
    .data_out(coef_ch2_V_V_TDATA),
    .vld_out(regslice_both_coef_ch2_V_V_U_vld_out),
    .ack_out(coef_ch2_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch2_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        coef_0_i_reg_875 <= coef_reg_1859;
    end else if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        coef_0_i_reg_875 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (or_ln262_fu_1641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        num_pulses_scheduled_1_fu_318 <= num_pulses_scheduled_fu_1623_p2;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        num_pulses_scheduled_1_fu_318 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (or_ln262_fu_1641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        num_pulses_scheduled_2_fu_314 <= select_ln241_reg_2460;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        num_pulses_scheduled_2_fu_314 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        p_Val2_s_reg_896 <= hhvv_index_V_reg_2465;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_s_reg_896 <= 2'd3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        phase_table_index_0_s_reg_920 <= phase_table_index_2_reg_2484;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        phase_table_index_0_s_reg_920 <= phase_table_index_fu_1145_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        pulse_rep_0_i_reg_930 <= pulse_rep_reg_2298;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_rep_0_i_reg_930 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_1183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        seq_idx_0_i_reg_886 <= seq_idx_fu_1215_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        seq_idx_0_i_reg_886 <= zext_ln184_fu_1101_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        staggered_prt_index_s_reg_908 <= select_ln277_fu_1718_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        staggered_prt_index_s_reg_908 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        if ((icmp_ln212_reg_2273 == 1'd0)) begin
            tmp_def_polarization_reg_941 <= pulse_definition_pol_reg_2077;
        end else if ((icmp_ln212_reg_2273 == 1'd1)) begin
            tmp_def_polarization_reg_941 <= pulse_def_polarizati_fu_1235_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln162_fu_1039_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        val_assign_reg_863 <= set_reg_1775;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_reg_863 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        watchdog_count_2_fu_306 <= watchdog_count_3_fu_1731_p3;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        watchdog_count_2_fu_306 <= 16'd5000;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        watchdog_prev_fu_310 <= cfg_watchdog;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        watchdog_prev_fu_310 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln162_fu_1039_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln164_reg_1864 <= add_ln164_fu_1061_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln200_reg_2268 <= add_ln200_fu_1153_p2;
        add_ln221_1_reg_2283 <= add_ln221_1_fu_1171_p2;
        add_ln221_2_reg_2289 <= add_ln221_2_fu_1177_p2;
        add_ln221_reg_2277 <= add_ln221_fu_1165_p2;
        cfg_pulse_sequence_p_12_reg_2047 <= cfg_pulse_sequence_p_5_q0;
        icmp_ln212_reg_2273 <= icmp_ln212_fu_1159_p2;
        phase_table_index_reg_2254 <= phase_table_index_fu_1145_p1;
        pulse_definition_blo_reg_2064 <= cfg_pulse_sequence_b_q0;
        pulse_definition_con_reg_2069 <= cfg_pulse_sequence_c_q0;
        pulse_definition_fil_1_reg_2090 <= cfg_pulse_sequence_f_3_q0;
        pulse_definition_fil_2_reg_2098 <= cfg_pulse_sequence_f_4_q0;
        pulse_definition_fil_reg_2082 <= cfg_pulse_sequence_f_q0;
        pulse_definition_num_reg_2055 <= cfg_pulse_sequence_n_q0;
        pulse_definition_pha_1_reg_2114 <= cfg_pulse_sequence_p_8_q0;
        pulse_definition_pha_reg_2106 <= cfg_pulse_sequence_p_7_q0;
        pulse_definition_pol_reg_2077 <= cfg_pulse_sequence_p_6_q0;
        pulse_definition_tim_10_reg_2206 <= cfg_pulse_sequence_t_25_q0;
        pulse_definition_tim_11_reg_2214 <= cfg_pulse_sequence_t_26_q0;
        pulse_definition_tim_12_reg_2222 <= cfg_pulse_sequence_t_27_q0;
        pulse_definition_tim_13_reg_2230 <= cfg_pulse_sequence_t_28_q0;
        pulse_definition_tim_14_reg_2238 <= cfg_pulse_sequence_t_29_q0;
        pulse_definition_tim_15_reg_2246 <= cfg_pulse_sequence_t_30_q0;
        pulse_definition_tim_1_reg_2131 <= cfg_pulse_sequence_t_16_q0;
        pulse_definition_tim_2_reg_2140 <= cfg_pulse_sequence_t_17_q0;
        pulse_definition_tim_3_reg_2149 <= cfg_pulse_sequence_t_18_q0;
        pulse_definition_tim_4_reg_2158 <= cfg_pulse_sequence_t_19_q0;
        pulse_definition_tim_5_reg_2166 <= cfg_pulse_sequence_t_20_q0;
        pulse_definition_tim_6_reg_2174 <= cfg_pulse_sequence_t_21_q0;
        pulse_definition_tim_7_reg_2182 <= cfg_pulse_sequence_t_22_q0;
        pulse_definition_tim_8_reg_2190 <= cfg_pulse_sequence_t_23_q0;
        pulse_definition_tim_9_reg_2198 <= cfg_pulse_sequence_t_24_q0;
        pulse_definition_tim_reg_2123 <= cfg_pulse_sequence_t_q0;
        pulse_sequence_index_reg_2260 <= pulse_sequence_index_fu_1149_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        and_ln232_reg_2426 <= and_ln232_fu_1359_p2;
        icmp_ln241_reg_2432 <= icmp_ln241_fu_1365_p2;
        tmp_4_reg_2416 <= {{grp_fu_1288_p2[31:1]}};
        tmp_5_reg_2421 <= {{grp_fu_1292_p2[31:1]}};
        tmp_s_reg_2411 <= {{grp_fu_1284_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coef_reg_1859 <= coef_fu_1045_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state51))) begin
        hhvv_index_V_reg_2465 <= hhvv_index_V_fu_1629_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln222_1_reg_2372 <= icmp_ln222_1_fu_1244_p2;
        icmp_ln222_2_reg_2377 <= icmp_ln222_2_fu_1249_p2;
        icmp_ln222_reg_2367 <= icmp_ln222_fu_1239_p2;
        pulse_definition_prt_4_reg_2351 <= pulse_definition_prt_q0;
        pulse_phase_sample_reg_2335 <= cfg_phase_samples_q0;
        tmp_def_block_post_t_reg_2343 <= tmp_def_block_post_t_fu_1221_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        num_pulses_scheduled_5_reg_2405 <= num_pulses_scheduled_5_fu_1305_p2;
        pulse_first_pulse_in_1_reg_2397 <= pulse_first_pulse_in_1_fu_1299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Result_s_reg_1847 <= cfg_enabled_channel_vector[32'd2];
        pulse_post_decimatio_reg_1831 <= pulse_post_decimatio_fu_973_p1;
        tmp_reg_1843 <= cfg_enabled_channel_vector[32'd1];
        trunc_ln791_reg_1839 <= trunc_ln791_fu_976_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (or_ln262_fu_1641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        phase_table_index_2_reg_2484 <= phase_table_index_2_fu_1672_p3;
        staggered_prt_index_reg_2473 <= staggered_prt_index_fu_1646_p2;
        tmp_num_samples_fu_322[31 : 1] <= pulse_num_samples_2_reg_2447[31 : 1];
        watchdog_count_reg_2489 <= watchdog_count_fu_1679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_1183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        pulse_first_pulse_in_reg_2303 <= pulse_first_pulse_in_fu_1194_p2;
        pulse_last_pulse_in_s_reg_2311 <= pulse_last_pulse_in_s_fu_1200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((pulse_queue_s_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        pulse_last_pulse_in_1_reg_2453 <= pulse_last_pulse_in_1_fu_1435_p2;
        pulse_num_samples_1_reg_2442[31 : 1] <= pulse_num_samples_1_fu_1406_p3[31 : 1];
        pulse_num_samples_2_reg_2447[31 : 1] <= pulse_num_samples_2_fu_1427_p3[31 : 1];
        pulse_num_samples_reg_2437[31 : 1] <= pulse_num_samples_fu_1385_p3[31 : 1];
        select_ln241_reg_2460 <= select_ln241_fu_1439_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pulse_rep_reg_2298 <= pulse_rep_fu_1188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        set_reg_1775 <= set_fu_960_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln164_1_reg_1851[9 : 4] <= sub_ln164_1_fu_1033_p2[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sub_ln224_1_reg_2387 <= sub_ln224_1_fu_1269_p2;
        sub_ln224_2_reg_2392 <= sub_ln224_2_fu_1279_p2;
        sub_ln224_reg_2382 <= sub_ln224_fu_1259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        zext_ln184_1_reg_1904[15 : 0] <= zext_ln184_1_fu_1105_p1[15 : 0];
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch0_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch1_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch2_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        cfg_phase_samples_ce0 = 1'b1;
    end else begin
        cfg_phase_samples_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_b_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_c_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_f_3_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_f_4_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_f_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_n_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_n_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_p_5_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_p_6_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_p_7_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_p_8_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_p_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_16_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_17_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_18_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_19_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_20_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_21_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_22_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_23_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_24_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_25_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_26_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_27_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_28_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_29_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_30_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_t_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch0_V_V_TDATA_blk_n = coef_ch0_V_V_TREADY_int;
    end else begin
        coef_ch0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch0_V_V_TDATA_int = tmp_V_1_fu_1072_p1;
    end else if (((icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch0_V_V_TDATA_int = tmp_V_fu_966_p1;
    end else begin
        coef_ch0_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch0_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch0_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch1_V_V_TDATA_blk_n = coef_ch1_V_V_TREADY_int;
    end else begin
        coef_ch1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch1_V_V_TDATA_int = tmp_V_2_fu_1077_p1;
    end else if (((icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch1_V_V_TDATA_int = tmp_V_fu_966_p1;
    end else begin
        coef_ch1_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch1_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch1_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch2_V_V_TDATA_blk_n = coef_ch2_V_V_TREADY_int;
    end else begin
        coef_ch2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch2_V_V_TDATA_int = tmp_V_3_fu_1082_p1;
    end else if (((icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch2_V_V_TDATA_int = tmp_V_fu_966_p1;
    end else begin
        coef_ch2_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch2_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch2_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_1284_ap_start = 1'b1;
    end else begin
        grp_fu_1284_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_1288_ap_start = 1'b1;
    end else begin
        grp_fu_1288_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_1292_ap_start = 1'b1;
    end else begin
        grp_fu_1292_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pulse_definition_prt_address0 = zext_ln209_fu_1210_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_definition_prt_address0 = 64'd0;
    end else begin
        pulse_definition_prt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        pulse_definition_prt_address1 = zext_ln277_fu_1652_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_definition_prt_address1 = 64'd1;
    end else begin
        pulse_definition_prt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        pulse_definition_prt_ce0 = 1'b1;
    end else begin
        pulse_definition_prt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state51)))) begin
        pulse_definition_prt_ce1 = 1'b1;
    end else begin
        pulse_definition_prt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_definition_prt_we0 = 1'b1;
    end else begin
        pulse_definition_prt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_definition_prt_we1 = 1'b1;
    end else begin
        pulse_definition_prt_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | ((trunc_ln791_reg_1839 == 1'd1) & (1'b1 == ap_CS_fsm_state51)))) begin
        pulse_queue_0_V_blk_n = pulse_queue_0_V_full_n;
    end else begin
        pulse_queue_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53))) begin
        pulse_queue_0_V_din = 949'd2379227053564452900476899997039840896210016322655031134489234974905505051456646997672269303193850160943677958064308756880727336392871849132465328929763831401252753344715935798308298255734876378992382713251762299529708397931004608141051358304557852932819272168726630260518024558103494656;
    end else if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (trunc_ln791_reg_1839 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        pulse_queue_0_V_din = tmp_1_1_fu_1491_p37;
    end else begin
        pulse_queue_0_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53)) | (~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (trunc_ln791_reg_1839 == 1'd1) & (1'b1 == ap_CS_fsm_state51)))) begin
        pulse_queue_0_V_write = 1'b1;
    end else begin
        pulse_queue_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | ((tmp_reg_1843 == 1'd1) & (1'b1 == ap_CS_fsm_state51)))) begin
        pulse_queue_1_V_blk_n = pulse_queue_1_V_full_n;
    end else begin
        pulse_queue_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53))) begin
        pulse_queue_1_V_din = 949'd2379227053564452900476899997039840896210016322655031134489234974905505051456646997672269303193850160943677958064308756880727336392871849132465328929763831401252753344715935798308298255734876378992382713251762299529708397931004608141051358304557852932819272168726630260518024558103494656;
    end else if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (tmp_reg_1843 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        pulse_queue_1_V_din = tmp_2_1_fu_1534_p37;
    end else begin
        pulse_queue_1_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53)) | (~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (tmp_reg_1843 == 1'd1) & (1'b1 == ap_CS_fsm_state51)))) begin
        pulse_queue_1_V_write = 1'b1;
    end else begin
        pulse_queue_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | ((p_Result_s_reg_1847 == 1'd1) & (1'b1 == ap_CS_fsm_state51)))) begin
        pulse_queue_2_V_blk_n = pulse_queue_2_V_full_n;
    end else begin
        pulse_queue_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53))) begin
        pulse_queue_2_V_din = 949'd2379227053564452900476899997039840896210016322655031134489234974905505051456646997672269303193850160943677958064308756880727336392871849132465328929763831401252753344715935798308298255734876378992382713251762299529708397931004608141051358304557852932819272168726630260518024558103494656;
    end else if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (p_Result_s_reg_1847 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        pulse_queue_2_V_din = tmp_3_1_fu_1577_p37;
    end else begin
        pulse_queue_2_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53)) | (~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (p_Result_s_reg_1847 == 1'd1) & (1'b1 == ap_CS_fsm_state51)))) begin
        pulse_queue_2_V_write = 1'b1;
    end else begin
        pulse_queue_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state53))) begin
        pulse_queue_s_V_blk_n = pulse_queue_s_V_full_n;
    end else begin
        pulse_queue_s_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53))) begin
        pulse_queue_s_V_din = 949'd2379227053564452900476899997039840896210016322655031134489234974905505051456646997672269303193850160943677958064308756880727336392871849132465328929763831401252753344715935798308298255734876378992382713251762299529708397931004608141051358304557852932819272168726630260518024558103494656;
    end else if (((pulse_queue_s_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        pulse_queue_s_V_din = tmp_1_fu_1446_p37;
    end else begin
        pulse_queue_s_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((pulse_queue_s_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state50)) | (~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53)))) begin
        pulse_queue_s_V_write = 1'b1;
    end else begin
        pulse_queue_s_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b0 == ap_block_state2_io) & (icmp_ln157_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln162_fu_1039_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln184_fu_1109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln193_fu_1183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((pulse_queue_s_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (or_ln262_fu_1641_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else if ((~(((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0))) & (or_ln262_fu_1641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state53 : begin
            if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln164_fu_1061_p2 = (sub_ln164_1_reg_1851 + zext_ln164_1_fu_1057_p1);

assign add_ln200_fu_1153_p2 = ($signed(32'd4294967295) + $signed(cfg_pulse_sequence_n_q0));

assign add_ln221_1_fu_1171_p2 = (cfg_pulse_sequence_t_17_q0 + cfg_pulse_sequence_t_25_q0);

assign add_ln221_2_fu_1177_p2 = (cfg_pulse_sequence_t_18_q0 + cfg_pulse_sequence_t_26_q0);

assign add_ln221_fu_1165_p2 = (cfg_pulse_sequence_t_16_q0 + cfg_pulse_sequence_t_24_q0);

assign and_ln225_1_fu_1393_p3 = {{tmp_4_reg_2416}, {1'd0}};

assign and_ln225_2_fu_1414_p3 = {{tmp_5_reg_2421}, {1'd0}};

assign and_ln232_fu_1359_p2 = (xor_ln232_fu_1353_p2 & icmp_ln232_fu_1341_p2);

assign and_ln_fu_1372_p3 = {{tmp_s_reg_2411}, {1'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = (((coef_ch2_V_V_TREADY_int == 1'b0) & (icmp_ln157_fu_954_p2 == 1'd0)) | ((coef_ch1_V_V_TREADY_int == 1'b0) & (icmp_ln157_fu_954_p2 == 1'd0)) | ((coef_ch0_V_V_TREADY_int == 1'b0) & (icmp_ln157_fu_954_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state3_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state51 = (((p_Result_s_reg_1847 == 1'd1) & (pulse_queue_2_V_full_n == 1'b0)) | ((tmp_reg_1843 == 1'd1) & (pulse_queue_1_V_full_n == 1'b0)) | ((trunc_ln791_reg_1839 == 1'd1) & (pulse_queue_0_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state53 = ((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state6_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign cfg_filter_coefs_ch0_address0 = sext_ln164_fu_1066_p1;

assign cfg_filter_coefs_ch1_address0 = sext_ln164_fu_1066_p1;

assign cfg_filter_coefs_ch2_address0 = sext_ln164_fu_1066_p1;

assign cfg_phase_samples_address0 = zext_ln202_fu_1205_p1;

assign cfg_pulse_sequence_b_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_c_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_f_3_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_f_4_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_f_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_n_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_p_5_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_p_6_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_p_7_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_p_8_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_p_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_16_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_17_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_18_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_19_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_20_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_21_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_22_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_23_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_24_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_25_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_26_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_27_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_28_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_29_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_30_address0 = zext_ln187_fu_1114_p1;

assign cfg_pulse_sequence_t_address0 = zext_ln187_fu_1114_p1;

assign coef_ch0_V_V_TVALID = regslice_both_coef_ch0_V_V_U_vld_out;

assign coef_ch1_V_V_TVALID = regslice_both_coef_ch1_V_V_U_vld_out;

assign coef_ch2_V_V_TVALID = regslice_both_coef_ch2_V_V_U_vld_out;

assign coef_fu_1045_p2 = (coef_0_i_reg_875 + 6'd1);

assign hhvv_index_V_fu_1629_p2 = (p_Val2_s_reg_896 + 2'd1);

assign icmp_ln157_fu_954_p2 = ((val_assign_reg_863 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln162_fu_1039_p2 = ((coef_0_i_reg_875 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_1109_p2 = ((seq_idx_0_i_reg_886 > zext_ln184_1_reg_1904) ? 1'b1 : 1'b0);

assign icmp_ln193_fu_1183_p2 = ((pulse_rep_0_i_reg_930 < pulse_definition_num_reg_2055) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_1159_p2 = ((cfg_pulse_sequence_p_6_q0 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln222_1_fu_1244_p2 = ((pulse_definition_prt_q0 < add_ln221_1_reg_2283) ? 1'b1 : 1'b0);

assign icmp_ln222_2_fu_1249_p2 = ((pulse_definition_prt_q0 < add_ln221_2_reg_2289) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_1239_p2 = ((pulse_definition_prt_q0 < add_ln221_reg_2277) ? 1'b1 : 1'b0);

assign icmp_ln226_1_fu_1400_p2 = ((and_ln225_1_fu_1393_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln226_2_fu_1421_p2 = ((and_ln225_2_fu_1414_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln226_fu_1379_p2 = ((and_ln_fu_1372_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln232_1_fu_1347_p2 = ((num_pulses_scheduled_1_fu_318 < cfg_num_pulses_to_ex) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_1341_p2 = ((cfg_num_pulses_to_ex != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_1365_p2 = ((num_pulses_scheduled_5_reg_2405 == cfg_num_pulses_per_x) ? 1'b1 : 1'b0);

assign icmp_ln262_fu_1635_p2 = ((watchdog_count_2_fu_306 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln277_1_fu_1706_p2 = ((pulse_definition_prt_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln277_fu_1701_p2 = ((staggered_prt_index_reg_2473 == 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln283_fu_1661_p2 = ((zext_ln283_fu_1657_p1 == pulse_definition_pha_1_reg_2114) ? 1'b1 : 1'b0);

assign icmp_ln294_fu_1725_p2 = ((cfg_watchdog == watchdog_prev_fu_310) ? 1'b1 : 1'b0);

assign num_pulses_scheduled_5_fu_1305_p2 = (num_pulses_scheduled_2_fu_314 + 32'd1);

assign num_pulses_scheduled_fu_1623_p2 = (num_pulses_scheduled_1_fu_318 + 32'd1);

assign or_ln262_fu_1641_p2 = (icmp_ln262_fu_1635_p2 | and_ln232_reg_2426);

assign or_ln277_fu_1712_p2 = (icmp_ln277_fu_1701_p2 | icmp_ln277_1_fu_1706_p2);

assign phase_table_index_1_fu_1666_p2 = (phase_table_index_0_s_reg_920 + 16'd1);

assign phase_table_index_2_fu_1672_p3 = ((icmp_ln283_fu_1661_p2[0:0] === 1'b1) ? phase_table_index_reg_2254 : phase_table_index_1_fu_1666_p2);

assign phase_table_index_fu_1145_p1 = cfg_pulse_sequence_p_7_q0[15:0];

assign pulse_def_polarizati_fu_1235_p1 = tmp_3_fu_1227_p3;

assign pulse_first_pulse_in_1_fu_1299_p2 = ((num_pulses_scheduled_2_fu_314 == 32'd0) ? 1'b1 : 1'b0);

assign pulse_first_pulse_in_fu_1194_p2 = ((pulse_rep_0_i_reg_930 == 32'd0) ? 1'b1 : 1'b0);

assign pulse_last_pulse_in_1_fu_1435_p2 = (icmp_ln241_reg_2432 | and_ln232_reg_2426);

assign pulse_last_pulse_in_s_fu_1200_p2 = ((pulse_rep_0_i_reg_930 == add_ln200_reg_2268) ? 1'b1 : 1'b0);

assign pulse_num_samples_1_fu_1406_p3 = ((icmp_ln226_1_fu_1400_p2[0:0] === 1'b1) ? 32'd2 : and_ln225_1_fu_1393_p3);

assign pulse_num_samples_2_fu_1427_p3 = ((icmp_ln226_2_fu_1421_p2[0:0] === 1'b1) ? 32'd2 : and_ln225_2_fu_1414_p3);

assign pulse_num_samples_fu_1385_p3 = ((icmp_ln226_fu_1379_p2[0:0] === 1'b1) ? 32'd2 : and_ln_fu_1372_p3);

assign pulse_post_decimatio_fu_973_p1 = cfg_post_decimation[7:0];

assign pulse_rep_fu_1188_p2 = (pulse_rep_0_i_reg_930 + 32'd1);

assign pulse_sequence_index_fu_1149_p1 = seq_idx_0_i_reg_886[7:0];

assign select_ln222_1_fu_1264_p3 = ((icmp_ln222_1_reg_2372[0:0] === 1'b1) ? pulse_definition_prt_4_reg_2351 : add_ln221_1_reg_2283);

assign select_ln222_2_fu_1274_p3 = ((icmp_ln222_2_reg_2377[0:0] === 1'b1) ? pulse_definition_prt_4_reg_2351 : add_ln221_2_reg_2289);

assign select_ln222_fu_1254_p3 = ((icmp_ln222_reg_2367[0:0] === 1'b1) ? pulse_definition_prt_4_reg_2351 : add_ln221_reg_2277);

assign select_ln241_fu_1439_p3 = ((pulse_last_pulse_in_1_fu_1435_p2[0:0] === 1'b1) ? 32'd0 : num_pulses_scheduled_5_reg_2405);

assign select_ln277_fu_1718_p3 = ((or_ln277_fu_1712_p2[0:0] === 1'b1) ? 8'd0 : staggered_prt_index_reg_2473);

assign seq_idx_fu_1215_p2 = (seq_idx_0_i_reg_886 + 17'd1);

assign set_fu_960_p2 = (val_assign_reg_863 + 4'd1);

assign sext_ln164_fu_1066_p1 = $signed(add_ln164_reg_1864);

assign staggered_prt_index_fu_1646_p2 = (staggered_prt_index_s_reg_908 + 8'd1);

assign start_index_fu_1087_p1 = cfg_pulse_sequence_s[15:0];

assign start_out = real_start;

assign stop_index_fu_1091_p4 = {{cfg_pulse_sequence_s[31:16]}};

assign sub_ln164_1_fu_1033_p2 = (tmp_8_fu_1013_p3 - zext_ln164_fu_1029_p1);

assign sub_ln164_fu_1051_p2 = ($signed(6'd47) - $signed(coef_0_i_reg_875));

assign sub_ln224_1_fu_1269_p2 = (select_ln222_1_fu_1264_p3 - pulse_definition_tim_2_reg_2140);

assign sub_ln224_2_fu_1279_p2 = (select_ln222_2_fu_1274_p3 - pulse_definition_tim_3_reg_2149);

assign sub_ln224_fu_1259_p2 = (select_ln222_fu_1254_p3 - pulse_definition_tim_1_reg_2131);

assign tmp_1_1_fu_1491_p37 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_2453}}}, {pulse_first_pulse_in_1_reg_2397}}}, {pulse_last_pulse_in_s_reg_2311}}}, {pulse_first_pulse_in_reg_2303}}}, {pulse_phase_sample_reg_2335}}}, {pulse_post_decimatio_reg_1831}}}, {pulse_num_samples_reg_2437}}}, {pulse_sequence_index_reg_2260}}}, {pulse_definition_tim_15_reg_2246}}}, {pulse_definition_tim_14_reg_2238}}}, {pulse_definition_tim_13_reg_2230}}}, {pulse_definition_tim_12_reg_2222}}}, {pulse_definition_tim_11_reg_2214}}}, {pulse_definition_tim_10_reg_2206}}}, {pulse_definition_tim_9_reg_2198}}}, {pulse_definition_tim_8_reg_2190}}}, {pulse_definition_tim_7_reg_2182}}}, {pulse_definition_tim_6_reg_2174}}}, {pulse_definition_tim_5_reg_2166}}}, {pulse_definition_tim_4_reg_2158}}}, {pulse_definition_tim_3_reg_2149}}}, {pulse_definition_tim_2_reg_2140}}}, {pulse_definition_tim_1_reg_2131}}}, {pulse_definition_tim_reg_2123}}}, {pulse_definition_pha_1_reg_2114}}}, {pulse_definition_pha_reg_2106}}}, {pulse_definition_fil_2_reg_2098}}}, {pulse_definition_fil_1_reg_2090}}}, {pulse_definition_fil_reg_2082}}}, {tmp_def_polarization_reg_941}}}, {pulse_definition_con_reg_2069}}}, {tmp_def_block_post_t_reg_2343}}}, {pulse_definition_num_reg_2055}}}, {cfg_pulse_sequence_p_12_reg_2047}}}, {pulse_definition_prt_4_reg_2351}};

assign tmp_1_fu_1446_p37 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_fu_1435_p2}}}, {pulse_first_pulse_in_1_reg_2397}}}, {pulse_last_pulse_in_s_reg_2311}}}, {pulse_first_pulse_in_reg_2303}}}, {pulse_phase_sample_reg_2335}}}, {pulse_post_decimatio_reg_1831}}}, {tmp_num_samples_fu_322}}}, {pulse_sequence_index_reg_2260}}}, {pulse_definition_tim_15_reg_2246}}}, {pulse_definition_tim_14_reg_2238}}}, {pulse_definition_tim_13_reg_2230}}}, {pulse_definition_tim_12_reg_2222}}}, {pulse_definition_tim_11_reg_2214}}}, {pulse_definition_tim_10_reg_2206}}}, {pulse_definition_tim_9_reg_2198}}}, {pulse_definition_tim_8_reg_2190}}}, {pulse_definition_tim_7_reg_2182}}}, {pulse_definition_tim_6_reg_2174}}}, {pulse_definition_tim_5_reg_2166}}}, {pulse_definition_tim_4_reg_2158}}}, {pulse_definition_tim_3_reg_2149}}}, {pulse_definition_tim_2_reg_2140}}}, {pulse_definition_tim_1_reg_2131}}}, {pulse_definition_tim_reg_2123}}}, {pulse_definition_pha_1_reg_2114}}}, {pulse_definition_pha_reg_2106}}}, {pulse_definition_fil_2_reg_2098}}}, {pulse_definition_fil_1_reg_2090}}}, {pulse_definition_fil_reg_2082}}}, {tmp_def_polarization_reg_941}}}, {pulse_definition_con_reg_2069}}}, {tmp_def_block_post_t_reg_2343}}}, {pulse_definition_num_reg_2055}}}, {cfg_pulse_sequence_p_12_reg_2047}}}, {pulse_definition_prt_4_reg_2351}};

assign tmp_2_1_fu_1534_p37 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_2453}}}, {pulse_first_pulse_in_1_reg_2397}}}, {pulse_last_pulse_in_s_reg_2311}}}, {pulse_first_pulse_in_reg_2303}}}, {pulse_phase_sample_reg_2335}}}, {pulse_post_decimatio_reg_1831}}}, {pulse_num_samples_1_reg_2442}}}, {pulse_sequence_index_reg_2260}}}, {pulse_definition_tim_15_reg_2246}}}, {pulse_definition_tim_14_reg_2238}}}, {pulse_definition_tim_13_reg_2230}}}, {pulse_definition_tim_12_reg_2222}}}, {pulse_definition_tim_11_reg_2214}}}, {pulse_definition_tim_10_reg_2206}}}, {pulse_definition_tim_9_reg_2198}}}, {pulse_definition_tim_8_reg_2190}}}, {pulse_definition_tim_7_reg_2182}}}, {pulse_definition_tim_6_reg_2174}}}, {pulse_definition_tim_5_reg_2166}}}, {pulse_definition_tim_4_reg_2158}}}, {pulse_definition_tim_3_reg_2149}}}, {pulse_definition_tim_2_reg_2140}}}, {pulse_definition_tim_1_reg_2131}}}, {pulse_definition_tim_reg_2123}}}, {pulse_definition_pha_1_reg_2114}}}, {pulse_definition_pha_reg_2106}}}, {pulse_definition_fil_2_reg_2098}}}, {pulse_definition_fil_1_reg_2090}}}, {pulse_definition_fil_reg_2082}}}, {tmp_def_polarization_reg_941}}}, {pulse_definition_con_reg_2069}}}, {tmp_def_block_post_t_reg_2343}}}, {pulse_definition_num_reg_2055}}}, {cfg_pulse_sequence_p_12_reg_2047}}}, {pulse_definition_prt_4_reg_2351}};

assign tmp_3_1_fu_1577_p37 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_2453}}}, {pulse_first_pulse_in_1_reg_2397}}}, {pulse_last_pulse_in_s_reg_2311}}}, {pulse_first_pulse_in_reg_2303}}}, {pulse_phase_sample_reg_2335}}}, {pulse_post_decimatio_reg_1831}}}, {pulse_num_samples_2_reg_2447}}}, {pulse_sequence_index_reg_2260}}}, {pulse_definition_tim_15_reg_2246}}}, {pulse_definition_tim_14_reg_2238}}}, {pulse_definition_tim_13_reg_2230}}}, {pulse_definition_tim_12_reg_2222}}}, {pulse_definition_tim_11_reg_2214}}}, {pulse_definition_tim_10_reg_2206}}}, {pulse_definition_tim_9_reg_2198}}}, {pulse_definition_tim_8_reg_2190}}}, {pulse_definition_tim_7_reg_2182}}}, {pulse_definition_tim_6_reg_2174}}}, {pulse_definition_tim_5_reg_2166}}}, {pulse_definition_tim_4_reg_2158}}}, {pulse_definition_tim_3_reg_2149}}}, {pulse_definition_tim_2_reg_2140}}}, {pulse_definition_tim_1_reg_2131}}}, {pulse_definition_tim_reg_2123}}}, {pulse_definition_pha_1_reg_2114}}}, {pulse_definition_pha_reg_2106}}}, {pulse_definition_fil_2_reg_2098}}}, {pulse_definition_fil_1_reg_2090}}}, {pulse_definition_fil_reg_2082}}}, {tmp_def_polarization_reg_941}}}, {pulse_definition_con_reg_2069}}}, {tmp_def_block_post_t_reg_2343}}}, {pulse_definition_num_reg_2055}}}, {cfg_pulse_sequence_p_12_reg_2047}}}, {pulse_definition_prt_4_reg_2351}};

assign tmp_3_fu_1227_p3 = p_Val2_s_reg_896[32'd1];

assign tmp_8_fu_1013_p3 = {{val_assign_reg_863}, {6'd0}};

assign tmp_9_fu_1021_p3 = {{val_assign_reg_863}, {4'd0}};

assign tmp_V_1_fu_1072_p1 = cfg_filter_coefs_ch0_q0[23:0];

assign tmp_V_2_fu_1077_p1 = cfg_filter_coefs_ch1_q0[23:0];

assign tmp_V_3_fu_1082_p1 = cfg_filter_coefs_ch2_q0[23:0];

assign tmp_V_fu_966_p1 = val_assign_reg_863;

assign tmp_def_block_post_t_fu_1221_p3 = ((pulse_last_pulse_in_s_reg_2311[0:0] === 1'b1) ? pulse_definition_blo_reg_2064 : 32'd0);

assign trunc_ln791_fu_976_p1 = cfg_enabled_channel_vector[0:0];

assign watchdog_count_3_fu_1731_p3 = ((icmp_ln294_fu_1725_p2[0:0] === 1'b1) ? watchdog_count_reg_2489 : 16'd5000);

assign watchdog_count_fu_1679_p2 = ($signed(watchdog_count_2_fu_306) + $signed(16'd65535));

assign xor_ln232_fu_1353_p2 = (icmp_ln232_1_fu_1347_p2 ^ 1'd1);

assign zext_ln164_1_fu_1057_p1 = sub_ln164_fu_1051_p2;

assign zext_ln164_fu_1029_p1 = tmp_9_fu_1021_p3;

assign zext_ln184_1_fu_1105_p1 = stop_index_fu_1091_p4;

assign zext_ln184_fu_1101_p1 = start_index_fu_1087_p1;

assign zext_ln187_fu_1114_p1 = seq_idx_0_i_reg_886;

assign zext_ln202_fu_1205_p1 = phase_table_index_0_s_reg_920;

assign zext_ln209_fu_1210_p1 = staggered_prt_index_s_reg_908;

assign zext_ln277_fu_1652_p1 = staggered_prt_index_fu_1646_p2;

assign zext_ln283_fu_1657_p1 = phase_table_index_0_s_reg_920;

always @ (posedge ap_clk) begin
    sub_ln164_1_reg_1851[3:0] <= 4'b0000;
    zext_ln184_1_reg_1904[16] <= 1'b0;
    pulse_num_samples_reg_2437[0] <= 1'b0;
    pulse_num_samples_1_reg_2442[0] <= 1'b0;
    pulse_num_samples_2_reg_2447[0] <= 1'b0;
    tmp_num_samples_fu_322[0] <= 1'b0;
end

endmodule //scheduler_parser
