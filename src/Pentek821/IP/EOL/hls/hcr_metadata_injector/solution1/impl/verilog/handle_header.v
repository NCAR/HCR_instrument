// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module handle_header (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pulse_metadata_V_TDATA,
        pulse_metadata_V_TVALID,
        pulse_metadata_V_TREADY,
        data_word_data_V,
        data_word_keep_V,
        data_word_strb_V,
        data_word_user_V,
        data_word_last_V,
        data_word_id_V,
        data_word_dest_V,
        in_a_pulse_read,
        in_a_pulse_group_rea,
        last_pulse_read,
        num_samples_read,
        sample_counter_read,
        o_data_TDATA,
        o_data_TVALID,
        o_data_TREADY,
        o_data_TKEEP,
        o_data_TSTRB,
        o_data_TUSER,
        o_data_TLAST,
        o_data_TID,
        o_data_TDEST,
        pos_enc_0,
        pos_enc_1,
        flags,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [847:0] pulse_metadata_V_TDATA;
input   pulse_metadata_V_TVALID;
output   pulse_metadata_V_TREADY;
input  [31:0] data_word_data_V;
input  [3:0] data_word_keep_V;
input  [3:0] data_word_strb_V;
input  [127:0] data_word_user_V;
input  [0:0] data_word_last_V;
input  [0:0] data_word_id_V;
input  [0:0] data_word_dest_V;
input   in_a_pulse_read;
input   in_a_pulse_group_rea;
input   last_pulse_read;
input  [31:0] num_samples_read;
input  [31:0] sample_counter_read;
output  [31:0] o_data_TDATA;
output   o_data_TVALID;
input   o_data_TREADY;
output  [3:0] o_data_TKEEP;
output  [3:0] o_data_TSTRB;
output  [127:0] o_data_TUSER;
output  [0:0] o_data_TLAST;
output  [0:0] o_data_TID;
output  [0:0] o_data_TDEST;
input  [31:0] pos_enc_0;
input  [31:0] pos_enc_1;
input  [31:0] flags;
output  [0:0] ap_return_0;
output  [0:0] ap_return_1;
output  [0:0] ap_return_2;
output  [0:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pulse_metadata_V_TREADY;
reg[31:0] o_data_TDATA;
reg o_data_TVALID;
reg[127:0] o_data_TUSER;
reg[0:0] ap_return_0;
reg[0:0] ap_return_1;
reg[0:0] ap_return_2;
reg[0:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    pulse_metadata_V_TDATA_blk_n;
reg    o_data_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] tmp_6_reg_599;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0_flag00000000;
reg   [0:0] tmp_2_reg_629;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_reg_595;
reg   [31:0] x1_reg_254;
reg   [3:0] x2_reg_263;
reg    ap_block_state1;
reg   [847:0] pulse_metadata_V_rea_reg_586;
wire   [0:0] tmp_fu_346_p3;
wire   [0:0] tmp_6_fu_354_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_sig_ioackin_o_data_TREADY;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_flag00011001;
wire   [31:0] x_fu_359_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] last_pulse_fu_389_p2;
reg   [0:0] last_pulse_reg_608;
wire    ap_CS_fsm_state4;
reg   [31:0] header_5_reg_613;
wire   [31:0] header_4_fu_413_p1;
reg   [31:0] header_4_reg_619;
wire   [31:0] header_6_fu_417_p1;
reg   [31:0] header_6_reg_624;
wire   [0:0] tmp_2_fu_420_p2;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp1_stage0_flag00011001;
wire   [3:0] x_1_fu_426_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] tmp_data_V_1_fu_436_p10;
reg   [31:0] tmp_data_V_1_reg_638;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [0:0] last_pulse_write_ass_phi_fu_277_p4;
reg   [0:0] last_pulse_write_ass_reg_274;
reg    ap_block_state7_io;
reg   [31:0] num_samples_write_as_phi_fu_286_p4;
reg   [31:0] num_samples_write_as_reg_283;
reg   [0:0] write_flag3_phi_fu_296_p4;
reg   [0:0] write_flag3_reg_292;
reg   [31:0] sample_counter_write_phi_fu_307_p4;
reg   [31:0] sample_counter_write_reg_304;
reg   [0:0] p_s_phi_fu_318_p4;
reg   [0:0] p_s_reg_314;
wire    ap_block_pp0_stage0_flag00001001;
wire    ap_block_pp1_stage0_flag00001001;
reg   [127:0] grp_fu_335_p4;
reg   [127:0] p_Result_4_fu_452_p4;
reg    ap_reg_ioackin_o_data_TREADY;
reg   [127:0] grp_fu_326_p4;
wire   [31:0] tmp_pulse_rep_load_n_fu_365_p4;
wire   [31:0] tmp_9_fu_374_p2;
wire   [31:0] tmp_def_num_pulses_l_fu_380_p4;
wire   [7:0] tmp_sequence_index_l_fu_404_p4;
wire   [2:0] tmp_data_V_1_fu_436_p9;
wire   [0:0] in_a_pulse_write_ass_fu_463_p1;
wire   [0:0] in_a_pulse_group_wri_fu_468_p1;
wire   [0:0] in_a_pulse_write_ass_fu_463_p2;
wire   [0:0] in_a_pulse_group_wri_fu_468_p2;
reg   [0:0] ap_return_0_preg;
reg   [0:0] ap_return_1_preg;
reg   [0:0] ap_return_2_preg;
reg   [0:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_reg_ioackin_o_data_TREADY = 1'b0;
#0 ap_return_0_preg = 1'd0;
#0 ap_return_1_preg = 1'd0;
#0 ap_return_2_preg = 1'd0;
#0 ap_return_3_preg = 1'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
end

hcr_metadata_injebkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
hcr_metadata_injebkb_U1(
    .din1(32'd3126770193),
    .din2(flags),
    .din3(pos_enc_0),
    .din4(pos_enc_1),
    .din5(header_4_reg_619),
    .din6(header_5_reg_613),
    .din7(header_6_reg_624),
    .din8(32'd0),
    .din9(tmp_data_V_1_fu_436_p9),
    .dout(tmp_data_V_1_fu_436_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd0 == tmp_fu_346_p3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd0 == tmp_fu_346_p3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state5 ^ 1'b1);
        end else if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_o_data_TREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595) & (ap_block_state7_io == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_6_reg_599 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (tmp_2_reg_629 == 1'd0) & (ap_block_pp1_stage0_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_o_data_TREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_6_reg_599 == 1'd1) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == o_data_TREADY)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (tmp_2_reg_629 == 1'd0) & (ap_block_pp1_stage0_flag00001001 == 1'b0) & (1'b1 == o_data_TREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595) & (1'b1 == o_data_TREADY)))) begin
            ap_reg_ioackin_o_data_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
            ap_return_0_preg <= p_s_phi_fu_318_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
            ap_return_1_preg <= in_a_pulse_write_ass_fu_463_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
            ap_return_2_preg <= in_a_pulse_group_wri_fu_468_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
            ap_return_3_preg <= last_pulse_write_ass_phi_fu_277_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
            ap_return_4_preg <= num_samples_write_as_phi_fu_286_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
            ap_return_5_preg <= sample_counter_write_phi_fu_307_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595) & (ap_block_state7_io == 1'b0))) begin
        last_pulse_write_ass_reg_274 <= last_pulse_reg_608;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd1 == tmp_fu_346_p3))) begin
        last_pulse_write_ass_reg_274 <= last_pulse_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595) & (ap_block_state7_io == 1'b0))) begin
        num_samples_write_as_reg_283 <= header_5_reg_613;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd1 == tmp_fu_346_p3))) begin
        num_samples_write_as_reg_283 <= num_samples_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595) & (ap_block_state7_io == 1'b0))) begin
        p_s_reg_314 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd1 == tmp_fu_346_p3))) begin
        p_s_reg_314 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595) & (ap_block_state7_io == 1'b0))) begin
        sample_counter_write_reg_304 <= 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd1 == tmp_fu_346_p3))) begin
        sample_counter_write_reg_304 <= sample_counter_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595) & (ap_block_state7_io == 1'b0))) begin
        write_flag3_reg_292 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd1 == tmp_fu_346_p3))) begin
        write_flag3_reg_292 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd0 == tmp_fu_346_p3))) begin
        x1_reg_254 <= sample_counter_read;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_6_fu_354_p2))) begin
        x1_reg_254 <= x_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == tmp_2_fu_420_p2))) begin
        x2_reg_263 <= x_1_fu_426_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        x2_reg_263 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        header_4_reg_619[7 : 0] <= header_4_fu_413_p1[7 : 0];
        header_5_reg_613 <= {{pulse_metadata_V_rea_reg_586[839:808]}};
        header_6_reg_624 <= header_6_fu_417_p1;
        last_pulse_reg_608 <= last_pulse_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)))) begin
        pulse_metadata_V_rea_reg_586 <= pulse_metadata_V_TDATA;
        tmp_reg_595 <= pulse_metadata_V_TDATA[32'd840];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        tmp_2_reg_629 <= tmp_2_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp_6_reg_599 <= tmp_6_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_2_fu_420_p2))) begin
        tmp_data_V_1_reg_638 <= tmp_data_V_1_fu_436_p10;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_6_fu_354_p2)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == tmp_2_fu_420_p2)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
        ap_return_0 = p_s_phi_fu_318_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
        ap_return_1 = in_a_pulse_write_ass_fu_463_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
        ap_return_2 = in_a_pulse_group_wri_fu_468_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
        ap_return_3 = last_pulse_write_ass_phi_fu_277_p4;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
        ap_return_4 = num_samples_write_as_phi_fu_286_p4;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
        ap_return_5 = sample_counter_write_phi_fu_307_p4;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_o_data_TREADY)) begin
        ap_sig_ioackin_o_data_TREADY = o_data_TREADY;
    end else begin
        ap_sig_ioackin_o_data_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595))) begin
        last_pulse_write_ass_phi_fu_277_p4 = last_pulse_reg_608;
    end else begin
        last_pulse_write_ass_phi_fu_277_p4 = last_pulse_write_ass_reg_274;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595))) begin
        num_samples_write_as_phi_fu_286_p4 = header_5_reg_613;
    end else begin
        num_samples_write_as_phi_fu_286_p4 = num_samples_write_as_reg_283;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595))) begin
        o_data_TDATA = data_word_data_V;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (tmp_2_reg_629 == 1'd0) & (ap_block_pp1_stage0_flag00001001 == 1'b0))) begin
        o_data_TDATA = tmp_data_V_1_reg_638;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_6_reg_599 == 1'd1) & (ap_block_pp0_stage0_flag00001001 == 1'b0))) begin
        o_data_TDATA = 32'd1970632053;
    end else begin
        o_data_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (tmp_6_reg_599 == 1'd1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00000000 == 1'b0) & (tmp_2_reg_629 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595)))) begin
        o_data_TDATA_blk_n = o_data_TREADY;
    end else begin
        o_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (tmp_2_reg_629 == 1'd0) & (ap_block_pp1_stage0_flag00001001 == 1'b0))) begin
        o_data_TUSER = p_Result_4_fu_452_p4;
    end else if ((((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_6_reg_599 == 1'd1) & (ap_block_pp0_stage0_flag00001001 == 1'b0)))) begin
        o_data_TUSER = grp_fu_335_p4;
    end else begin
        o_data_TUSER = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_6_reg_599 == 1'd1) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_o_data_TREADY)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (tmp_2_reg_629 == 1'd0) & (ap_block_pp1_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_o_data_TREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595) & (1'b0 == ap_reg_ioackin_o_data_TREADY)))) begin
        o_data_TVALID = 1'b1;
    end else begin
        o_data_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595))) begin
        p_s_phi_fu_318_p4 = 1'd0;
    end else begin
        p_s_phi_fu_318_p4 = p_s_reg_314;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pulse_metadata_V_TDATA_blk_n = pulse_metadata_V_TVALID;
    end else begin
        pulse_metadata_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)))) begin
        pulse_metadata_V_TREADY = 1'b1;
    end else begin
        pulse_metadata_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595))) begin
        sample_counter_write_phi_fu_307_p4 = 32'd1;
    end else begin
        sample_counter_write_phi_fu_307_p4 = sample_counter_write_reg_304;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_reg_595))) begin
        write_flag3_phi_fu_296_p4 = 1'd1;
    end else begin
        write_flag3_phi_fu_296_p4 = write_flag3_reg_292;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd0 == tmp_fu_346_p3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID)) & (1'd1 == tmp_fu_346_p3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd0 == tmp_6_fu_354_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd0 == tmp_6_fu_354_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'd1 == tmp_2_fu_420_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'd1 == tmp_2_fu_420_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3_io));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3_io));
end

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_pp1_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (1'b0 == pulse_metadata_V_TVALID));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((tmp_6_reg_599 == 1'd1) & (1'b0 == ap_sig_ioackin_o_data_TREADY));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((tmp_2_reg_629 == 1'd0) & (1'b0 == ap_sig_ioackin_o_data_TREADY));
end

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((1'd0 == tmp_reg_595) & (1'b0 == ap_sig_ioackin_o_data_TREADY));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    grp_fu_326_p4 = data_word_user_V;
    grp_fu_326_p4[32'd64] = |(1'd1);
end

always @ (*) begin
    grp_fu_335_p4 = grp_fu_326_p4;
    grp_fu_335_p4[32'd72] = |(1'd0);
end

assign header_4_fu_413_p1 = tmp_sequence_index_l_fu_404_p4;

assign header_6_fu_417_p1 = pulse_metadata_V_rea_reg_586[31:0];

assign in_a_pulse_group_wri_fu_468_p1 = in_a_pulse_group_rea;

assign in_a_pulse_group_wri_fu_468_p2 = (write_flag3_phi_fu_296_p4 | in_a_pulse_group_wri_fu_468_p1);

assign in_a_pulse_write_ass_fu_463_p1 = in_a_pulse_read;

assign in_a_pulse_write_ass_fu_463_p2 = (write_flag3_phi_fu_296_p4 | in_a_pulse_write_ass_fu_463_p1);

assign last_pulse_fu_389_p2 = ((tmp_9_fu_374_p2 == tmp_def_num_pulses_l_fu_380_p4) ? 1'b1 : 1'b0);

assign o_data_TDEST = data_word_dest_V;

assign o_data_TID = data_word_id_V;

assign o_data_TKEEP = data_word_keep_V;

assign o_data_TLAST = data_word_last_V;

assign o_data_TSTRB = data_word_strb_V;

always @ (*) begin
    p_Result_4_fu_452_p4 = grp_fu_326_p4;
    p_Result_4_fu_452_p4[32'd72] = |(1'd1);
end

assign tmp_2_fu_420_p2 = ((x2_reg_263 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_6_fu_354_p2 = ((x1_reg_254 < num_samples_read) ? 1'b1 : 1'b0);

assign tmp_9_fu_374_p2 = (32'd1 + tmp_pulse_rep_load_n_fu_365_p4);

assign tmp_data_V_1_fu_436_p9 = x2_reg_263[2:0];

assign tmp_def_num_pulses_l_fu_380_p4 = {{pulse_metadata_V_rea_reg_586[95:64]}};

assign tmp_fu_346_p3 = pulse_metadata_V_TDATA[32'd840];

assign tmp_pulse_rep_load_n_fu_365_p4 = {{pulse_metadata_V_rea_reg_586[807:776]}};

assign tmp_sequence_index_l_fu_404_p4 = {{pulse_metadata_V_rea_reg_586[775:768]}};

assign x_1_fu_426_p2 = (x2_reg_263 + 4'd1);

assign x_fu_359_p2 = (x1_reg_254 + 32'd1);

always @ (posedge ap_clk) begin
    header_4_reg_619[31:8] <= 24'b000000000000000000000000;
end

endmodule //handle_header
