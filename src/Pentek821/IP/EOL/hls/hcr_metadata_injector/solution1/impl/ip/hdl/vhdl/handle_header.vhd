-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity handle_header is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pulse_metadata_V_TDATA : IN STD_LOGIC_VECTOR (823 downto 0);
    pulse_metadata_V_TVALID : IN STD_LOGIC;
    pulse_metadata_V_TREADY : OUT STD_LOGIC;
    data_word_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    data_word_keep_V : IN STD_LOGIC_VECTOR (3 downto 0);
    data_word_strb_V : IN STD_LOGIC_VECTOR (3 downto 0);
    data_word_user_V : IN STD_LOGIC_VECTOR (127 downto 0);
    data_word_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
    data_word_id_V : IN STD_LOGIC_VECTOR (0 downto 0);
    data_word_dest_V : IN STD_LOGIC_VECTOR (0 downto 0);
    in_a_pulse_read : IN STD_LOGIC;
    in_a_xfer_bundle_rea : IN STD_LOGIC;
    break_after_pulse_re : IN STD_LOGIC;
    num_samples_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sample_counter_read : IN STD_LOGIC_VECTOR (31 downto 0);
    decimation_value_rea : IN STD_LOGIC_VECTOR (7 downto 0);
    decimation_counter_r : IN STD_LOGIC_VECTOR (7 downto 0);
    o_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    o_data_TVALID : OUT STD_LOGIC;
    o_data_TREADY : IN STD_LOGIC;
    o_data_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    o_data_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    o_data_TUSER : OUT STD_LOGIC_VECTOR (127 downto 0);
    o_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    o_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    o_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    pos_enc_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pos_enc_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    flags : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of handle_header is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_75757575 : STD_LOGIC_VECTOR (31 downto 0) := "01110101011101010111010101110101";
    constant ap_const_lv32_98989898 : STD_LOGIC_VECTOR (31 downto 0) := "10011000100110001001100010011000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_334 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110100";
    constant ap_const_lv32_332 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110010";
    constant ap_const_lv32_333 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110011";
    constant ap_const_lv32_308 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001000";
    constant ap_const_lv32_327 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100111";
    constant ap_const_lv32_328 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101000";
    constant ap_const_lv32_32F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101111";
    constant ap_const_lv32_330 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110000";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_307 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_BA5EBA11 : STD_LOGIC_VECTOR (31 downto 0) := "10111010010111101011101000010001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pulse_metadata_V_TDATA_blk_n : STD_LOGIC;
    signal o_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln126_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Repl2_s_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln175_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_0_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_0_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal pulse_metadata_V_rea_reg_808 : STD_LOGIC_VECTOR (823 downto 0);
    signal tmp_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Repl2_2_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal header_5_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal decimation_value_0_n_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_492_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_reg_851 : STD_LOGIC_VECTOR (19 downto 0);
    signal header_4_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal header_4_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal header_6_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal header_6_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln175_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal x_1_fu_521_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_data_V_1_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_phi_mux_phi_ln193_phi_fu_324_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln193_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal ap_phi_mux_phi_ln193_1_phi_fu_333_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln193_1_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_phi_ln193_2_phi_fu_343_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln193_2_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_phi_ln193_3_phi_fu_352_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln193_3_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_write_flag3_0_phi_fu_362_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag3_0_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_phi_ln193_4_phi_fu_373_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln193_4_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_0161_phi_fu_384_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0161_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_401_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_4_fu_447_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_6_fu_651_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_392_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_3_fu_438_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_2_fu_483_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_sequence_index_l_fu_499_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln179_fu_527_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln17_6_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_5_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_4_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_3_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_2_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_1_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_3_fu_610_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_ln17_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_fu_573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln17_1_fu_586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln17_1_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_2_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_2_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln17_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln17_3_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_4_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln17_5_fu_635_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln193_fu_662_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln193_1_fu_667_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln193_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln193_1_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_412_p3 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_412_p3 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_0_preg <= ap_phi_mux_p_0161_phi_fu_384_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_1_preg <= or_ln193_fu_662_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_2_preg <= or_ln193_1_fu_667_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_3_preg <= ap_phi_mux_phi_ln193_2_phi_fu_343_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_4_preg <= ap_phi_mux_phi_ln193_phi_fu_324_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_5_preg <= ap_phi_mux_phi_ln193_1_phi_fu_333_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_6_preg <= ap_phi_mux_phi_ln193_3_phi_fu_352_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_return_7_preg <= ap_phi_mux_phi_ln193_4_phi_fu_373_p4;
                end if; 
            end if;
        end if;
    end process;


    p_0161_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
                p_0161_reg_380 <= ap_const_lv1_0;
            elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (tmp_fu_412_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0161_reg_380 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    phi_ln193_1_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
                phi_ln193_1_reg_330 <= ap_const_lv8_1;
            elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (tmp_fu_412_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln193_1_reg_330 <= decimation_counter_r;
            end if; 
        end if;
    end process;

    phi_ln193_2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
                phi_ln193_2_reg_340 <= p_Repl2_2_reg_835;
            elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (tmp_fu_412_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln193_2_reg_340 <= (0=>break_after_pulse_re, others=>'-');
            end if; 
        end if;
    end process;

    phi_ln193_3_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
                phi_ln193_3_reg_349 <= header_5_reg_840;
            elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (tmp_fu_412_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln193_3_reg_349 <= num_samples_read;
            end if; 
        end if;
    end process;

    phi_ln193_4_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
                phi_ln193_4_reg_370 <= ap_const_lv32_1;
            elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (tmp_fu_412_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln193_4_reg_370 <= sample_counter_read;
            end if; 
        end if;
    end process;

    phi_ln193_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
                phi_ln193_reg_321 <= decimation_value_0_n_reg_846;
            elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (tmp_fu_412_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln193_reg_321 <= decimation_value_rea;
            end if; 
        end if;
    end process;

    write_flag3_0_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
                write_flag3_0_reg_358 <= ap_const_lv1_1;
            elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (tmp_fu_412_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag3_0_reg_358 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    x1_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln175_fu_515_p2 = ap_const_lv1_0))) then 
                x1_0_reg_310 <= x_1_fu_521_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then 
                x1_0_reg_310 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    x_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_412_p3 = ap_const_lv1_0))) then 
                x_0_reg_301 <= sample_counter_read;
            elsif (((icmp_ln126_fu_420_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_0_reg_301 <= x_fu_425_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then
                decimation_value_0_n_reg_846 <= pulse_metadata_V_rea_reg_808(815 downto 808);
                    header_4_reg_856(7 downto 0) <= header_4_fu_508_p1(7 downto 0);
                header_5_reg_840 <= pulse_metadata_V_rea_reg_808(807 downto 776);
                header_6_reg_861 <= header_6_fu_512_p1;
                p_Repl2_2_reg_835 <= pulse_metadata_V_rea_reg_808(819 downto 819);
                tmp_3_reg_851 <= tmp_3_fu_492_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln126_reg_823 <= icmp_ln126_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln175_reg_866 <= icmp_ln175_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                pulse_metadata_V_rea_reg_808 <= pulse_metadata_V_TDATA;
                tmp_reg_819 <= pulse_metadata_V_TDATA(820 downto 820);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln175_fu_515_p2 = ap_const_lv1_0))) then
                tmp_data_V_1_reg_875 <= tmp_data_V_1_fu_643_p3;
            end if;
        end if;
    end process;
    header_4_reg_856(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, pulse_metadata_V_TVALID, ap_CS_fsm_state4, ap_CS_fsm_state7, tmp_fu_412_p3, icmp_ln126_fu_420_p2, ap_enable_reg_pp0_iter0, ap_block_state4_io, icmp_ln175_fu_515_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_state7_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_412_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (tmp_fu_412_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln126_fu_420_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln126_fu_420_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln175_fu_515_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln175_fu_515_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state6_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state6_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;


    ap_block_state1_assign_proc : process(ap_start, pulse_metadata_V_TVALID)
    begin
                ap_block_state1 <= ((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(o_data_TREADY, icmp_ln126_reg_823)
    begin
                ap_block_state3_io <= ((icmp_ln126_reg_823 = ap_const_lv1_1) and (o_data_TREADY = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(o_data_TREADY, p_Repl2_s_fu_431_p3)
    begin
                ap_block_state4_io <= ((p_Repl2_s_fu_431_p3 = ap_const_lv1_1) and (o_data_TREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(o_data_TREADY, icmp_ln175_reg_866)
    begin
                ap_block_state6_io <= ((o_data_TREADY = ap_const_logic_0) and (icmp_ln175_reg_866 = ap_const_lv1_0));
    end process;

        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(o_data_TREADY, tmp_reg_819)
    begin
                ap_block_state7_io <= ((o_data_TREADY = ap_const_logic_0) and (tmp_reg_819 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln126_fu_420_p2)
    begin
        if ((icmp_ln126_fu_420_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln175_fu_515_p2)
    begin
        if ((icmp_ln175_fu_515_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_block_state7_io)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0161_phi_fu_384_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_819, p_0161_reg_380)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0161_phi_fu_384_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_p_0161_phi_fu_384_p4 <= p_0161_reg_380;
        end if; 
    end process;


    ap_phi_mux_phi_ln193_1_phi_fu_333_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_819, phi_ln193_1_reg_330)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln193_1_phi_fu_333_p4 <= ap_const_lv8_1;
        else 
            ap_phi_mux_phi_ln193_1_phi_fu_333_p4 <= phi_ln193_1_reg_330;
        end if; 
    end process;


    ap_phi_mux_phi_ln193_2_phi_fu_343_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_819, p_Repl2_2_reg_835, phi_ln193_2_reg_340)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln193_2_phi_fu_343_p4 <= p_Repl2_2_reg_835;
        else 
            ap_phi_mux_phi_ln193_2_phi_fu_343_p4 <= phi_ln193_2_reg_340;
        end if; 
    end process;


    ap_phi_mux_phi_ln193_3_phi_fu_352_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_819, header_5_reg_840, phi_ln193_3_reg_349)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln193_3_phi_fu_352_p4 <= header_5_reg_840;
        else 
            ap_phi_mux_phi_ln193_3_phi_fu_352_p4 <= phi_ln193_3_reg_349;
        end if; 
    end process;


    ap_phi_mux_phi_ln193_4_phi_fu_373_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_819, phi_ln193_4_reg_370)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln193_4_phi_fu_373_p4 <= ap_const_lv32_1;
        else 
            ap_phi_mux_phi_ln193_4_phi_fu_373_p4 <= phi_ln193_4_reg_370;
        end if; 
    end process;


    ap_phi_mux_phi_ln193_phi_fu_324_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_819, decimation_value_0_n_reg_846, phi_ln193_reg_321)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln193_phi_fu_324_p4 <= decimation_value_0_n_reg_846;
        else 
            ap_phi_mux_phi_ln193_phi_fu_324_p4 <= phi_ln193_reg_321;
        end if; 
    end process;


    ap_phi_mux_write_flag3_0_phi_fu_362_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_819, write_flag3_0_reg_358)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
            ap_phi_mux_write_flag3_0_phi_fu_362_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_write_flag3_0_phi_fu_362_p4 <= write_flag3_0_reg_358;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, ap_phi_mux_p_0161_phi_fu_384_p4, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_0 <= ap_phi_mux_p_0161_phi_fu_384_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, or_ln193_fu_662_p2, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_1 <= or_ln193_fu_662_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, or_ln193_1_fu_667_p2, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_2 <= or_ln193_1_fu_667_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, ap_phi_mux_phi_ln193_2_phi_fu_343_p4, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_3 <= ap_phi_mux_phi_ln193_2_phi_fu_343_p4;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state7, ap_phi_mux_phi_ln193_phi_fu_324_p4, ap_block_state7_io, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_4 <= ap_phi_mux_phi_ln193_phi_fu_324_p4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, ap_phi_mux_phi_ln193_1_phi_fu_333_p4, ap_return_5_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_5 <= ap_phi_mux_phi_ln193_1_phi_fu_333_p4;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, ap_phi_mux_phi_ln193_3_phi_fu_352_p4, ap_return_6_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_6 <= ap_phi_mux_phi_ln193_3_phi_fu_352_p4;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, ap_phi_mux_phi_ln193_4_phi_fu_373_p4, ap_return_7_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_return_7 <= ap_phi_mux_phi_ln193_4_phi_fu_373_p4;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;

    
    grp_fu_392_p4_proc : process(data_word_user_V)
    begin
        grp_fu_392_p4 <= data_word_user_V;
        grp_fu_392_p4(64) <= ap_const_lv1_1(0);
    end process;

    
    grp_fu_401_p4_proc : process(grp_fu_392_p4)
    begin
        grp_fu_401_p4 <= grp_fu_392_p4;
        grp_fu_401_p4(72) <= ap_const_lv1_0(0);
    end process;

    header_4_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_sequence_index_l_fu_499_p4),32));
    header_6_fu_512_p1 <= pulse_metadata_V_rea_reg_808(32 - 1 downto 0);
    icmp_ln126_fu_420_p2 <= "1" when (unsigned(x_0_reg_301) < unsigned(num_samples_read)) else "0";
    icmp_ln175_fu_515_p2 <= "1" when (x1_0_reg_310 = ap_const_lv4_8) else "0";
    icmp_ln17_1_fu_537_p2 <= "1" when (trunc_ln179_fu_527_p1 = ap_const_lv3_2) else "0";
    icmp_ln17_2_fu_543_p2 <= "1" when (trunc_ln179_fu_527_p1 = ap_const_lv3_3) else "0";
    icmp_ln17_3_fu_549_p2 <= "1" when (trunc_ln179_fu_527_p1 = ap_const_lv3_4) else "0";
    icmp_ln17_4_fu_555_p2 <= "1" when (trunc_ln179_fu_527_p1 = ap_const_lv3_5) else "0";
    icmp_ln17_5_fu_561_p2 <= "1" when (trunc_ln179_fu_527_p1 = ap_const_lv3_6) else "0";
    icmp_ln17_6_fu_567_p2 <= "1" when (trunc_ln179_fu_527_p1 = ap_const_lv3_0) else "0";
    icmp_ln17_fu_531_p2 <= "1" when (trunc_ln179_fu_527_p1 = ap_const_lv3_1) else "0";

    o_data_TDATA_assign_proc : process(data_word_data_V, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln126_reg_823, ap_CS_fsm_state4, p_Repl2_s_fu_431_p3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln175_reg_866, ap_CS_fsm_state7, tmp_reg_819, tmp_data_V_1_reg_875, ap_block_pp0_stage0_01001, ap_block_pp1_stage0_01001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0))) then 
            o_data_TDATA <= data_word_data_V;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln175_reg_866 = ap_const_lv1_0))) then 
            o_data_TDATA <= tmp_data_V_1_reg_875;
        elsif (((p_Repl2_s_fu_431_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            o_data_TDATA <= ap_const_lv32_98989898;
        elsif (((icmp_ln126_reg_823 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o_data_TDATA <= ap_const_lv32_75757575;
        else 
            o_data_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    o_data_TDATA_blk_n_assign_proc : process(o_data_TREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln126_reg_823, ap_CS_fsm_state4, p_Repl2_s_fu_431_p3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln175_reg_866, ap_CS_fsm_state7, tmp_reg_819)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln175_reg_866 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((p_Repl2_s_fu_431_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln126_reg_823 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0)))) then 
            o_data_TDATA_blk_n <= o_data_TREADY;
        else 
            o_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_data_TDEST <= data_word_dest_V;
    o_data_TID <= data_word_id_V;
    o_data_TKEEP <= data_word_keep_V;
    o_data_TLAST <= data_word_last_V;
    o_data_TSTRB <= data_word_strb_V;

    o_data_TUSER_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln126_reg_823, ap_CS_fsm_state4, p_Repl2_s_fu_431_p3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln175_reg_866, ap_CS_fsm_state7, tmp_reg_819, ap_block_pp0_stage0_01001, ap_block_pp1_stage0_01001, grp_fu_401_p4, p_Result_4_fu_447_p4, p_Result_6_fu_651_p4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln175_reg_866 = ap_const_lv1_0))) then 
            o_data_TUSER <= p_Result_6_fu_651_p4;
        elsif (((p_Repl2_s_fu_431_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            o_data_TUSER <= p_Result_4_fu_447_p4;
        elsif ((((icmp_ln126_reg_823 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0)))) then 
            o_data_TUSER <= grp_fu_401_p4;
        else 
            o_data_TUSER <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    o_data_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln126_reg_823, ap_CS_fsm_state4, p_Repl2_s_fu_431_p3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln175_reg_866, ap_CS_fsm_state7, tmp_reg_819, ap_block_pp0_stage0_11001, ap_block_state4_io, ap_block_pp1_stage0_11001, ap_block_state7_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln175_reg_866 = ap_const_lv1_0)) or ((p_Repl2_s_fu_431_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io)) or ((icmp_ln126_reg_823 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_state7_io) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_819 = ap_const_lv1_0)))) then 
            o_data_TVALID <= ap_const_logic_1;
        else 
            o_data_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln17_1_fu_592_p2 <= (icmp_ln17_4_fu_555_p2 or icmp_ln17_3_fu_549_p2);
    or_ln17_2_fu_604_p2 <= (icmp_ln17_2_fu_543_p2 or icmp_ln17_1_fu_537_p2);
    or_ln17_3_fu_629_p2 <= (or_ln17_fu_580_p2 or or_ln17_1_fu_592_p2);
    or_ln17_fu_580_p2 <= (icmp_ln17_6_fu_567_p2 or icmp_ln17_5_fu_561_p2);
    or_ln193_1_fu_667_p1 <= (0=>in_a_xfer_bundle_rea, others=>'-');
    or_ln193_1_fu_667_p2 <= (or_ln193_1_fu_667_p1 or ap_phi_mux_write_flag3_0_phi_fu_362_p4);
    or_ln193_fu_662_p1 <= (0=>in_a_pulse_read, others=>'-');
    or_ln193_fu_662_p2 <= (or_ln193_fu_662_p1 or ap_phi_mux_write_flag3_0_phi_fu_362_p4);
    p_Repl2_s_fu_431_p3 <= pulse_metadata_V_rea_reg_808(818 downto 818);
    
    p_Result_3_fu_438_p4_proc : process(data_word_user_V)
    begin
        p_Result_3_fu_438_p4 <= data_word_user_V;
        p_Result_3_fu_438_p4(64) <= ap_const_lv1_0(0);
    end process;

    
    p_Result_4_fu_447_p4_proc : process(p_Result_3_fu_438_p4)
    begin
        p_Result_4_fu_447_p4 <= p_Result_3_fu_438_p4;
        p_Result_4_fu_447_p4(72) <= ap_const_lv1_0(0);
    end process;

    
    p_Result_6_fu_651_p4_proc : process(grp_fu_392_p4)
    begin
        p_Result_6_fu_651_p4 <= grp_fu_392_p4;
        p_Result_6_fu_651_p4(72) <= ap_const_lv1_1(0);
    end process;


    pulse_metadata_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, pulse_metadata_V_TVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            pulse_metadata_V_TDATA_blk_n <= pulse_metadata_V_TVALID;
        else 
            pulse_metadata_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_metadata_V_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, pulse_metadata_V_TVALID)
    begin
        if ((not(((pulse_metadata_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pulse_metadata_V_TREADY <= ap_const_logic_1;
        else 
            pulse_metadata_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    select_ln17_1_fu_586_p3 <= 
        header_5_reg_840 when (icmp_ln17_4_fu_555_p2(0) = '1') else 
        header_4_reg_856;
    select_ln17_2_fu_598_p3 <= 
        pos_enc_1 when (icmp_ln17_2_fu_543_p2(0) = '1') else 
        pos_enc_0;
    select_ln17_3_fu_610_p3 <= 
        tmp_3_reg_851 when (icmp_ln17_fu_531_p2(0) = '1') else 
        ap_const_lv20_0;
    select_ln17_4_fu_621_p3 <= 
        select_ln17_fu_573_p3 when (or_ln17_fu_580_p2(0) = '1') else 
        select_ln17_1_fu_586_p3;
    select_ln17_5_fu_635_p3 <= 
        select_ln17_2_fu_598_p3 when (or_ln17_2_fu_604_p2(0) = '1') else 
        zext_ln17_fu_617_p1;
    select_ln17_fu_573_p3 <= 
        ap_const_lv32_BA5EBA11 when (icmp_ln17_6_fu_567_p2(0) = '1') else 
        header_6_reg_861;
    tmp_2_fu_483_p4 <= pulse_metadata_V_rea_reg_808(819 downto 816);
    tmp_3_fu_492_p3 <= (tmp_2_fu_483_p4 & flags);
    tmp_data_V_1_fu_643_p3 <= 
        select_ln17_4_fu_621_p3 when (or_ln17_3_fu_629_p2(0) = '1') else 
        select_ln17_5_fu_635_p3;
    tmp_fu_412_p3 <= pulse_metadata_V_TDATA(820 downto 820);
    tmp_sequence_index_l_fu_499_p4 <= pulse_metadata_V_rea_reg_808(775 downto 768);
    trunc_ln179_fu_527_p1 <= x1_0_reg_310(3 - 1 downto 0);
    x_1_fu_521_p2 <= std_logic_vector(unsigned(x1_0_reg_310) + unsigned(ap_const_lv4_1));
    x_fu_425_p2 <= std_logic_vector(unsigned(x_0_reg_301) + unsigned(ap_const_lv32_1));
    zext_ln17_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln17_3_fu_610_p3),32));
end behav;
