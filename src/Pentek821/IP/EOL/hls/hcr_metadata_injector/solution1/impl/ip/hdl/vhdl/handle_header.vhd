-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity handle_header is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pulse_metadata_V_TDATA : IN STD_LOGIC_VECTOR (815 downto 0);
    pulse_metadata_V_TVALID : IN STD_LOGIC;
    pulse_metadata_V_TREADY : OUT STD_LOGIC;
    data_word_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    data_word_keep_V : IN STD_LOGIC_VECTOR (3 downto 0);
    data_word_strb_V : IN STD_LOGIC_VECTOR (3 downto 0);
    data_word_user_V : IN STD_LOGIC_VECTOR (127 downto 0);
    data_word_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
    data_word_id_V : IN STD_LOGIC_VECTOR (0 downto 0);
    data_word_dest_V : IN STD_LOGIC_VECTOR (0 downto 0);
    in_a_pulse_read : IN STD_LOGIC;
    in_a_xfer_bundle_rea : IN STD_LOGIC;
    break_after_pulse_re : IN STD_LOGIC;
    num_samples_read : IN STD_LOGIC_VECTOR (31 downto 0);
    sample_counter_read : IN STD_LOGIC_VECTOR (31 downto 0);
    o_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    o_data_TVALID : OUT STD_LOGIC;
    o_data_TREADY : IN STD_LOGIC;
    o_data_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    o_data_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    o_data_TUSER : OUT STD_LOGIC_VECTOR (127 downto 0);
    o_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    o_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    o_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    pos_enc_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pos_enc_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    flags : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of handle_header is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_75757575 : STD_LOGIC_VECTOR (31 downto 0) := "01110101011101010111010101110101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_32C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101100";
    constant ap_const_lv32_32B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101011";
    constant ap_const_lv32_308 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001000";
    constant ap_const_lv32_327 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100111";
    constant ap_const_lv32_328 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101000";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_307 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_BA5EBA11 : STD_LOGIC_VECTOR (31 downto 0) := "10111010010111101011101000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pulse_metadata_V_TDATA_blk_n : STD_LOGIC;
    signal o_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_6_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal tmp_s_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal x2_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal pulse_metadata_V_rea_reg_587 : STD_LOGIC_VECTOR (815 downto 0);
    signal tmp_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_o_data_TREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal x_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_9_reg_609 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal header_5_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal header_4_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal header_4_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal header_6_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal header_6_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal x_1_fu_427_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_data_V_1_fu_437_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_1_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal break_after_pulse_wr_phi_fu_281_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal break_after_pulse_wr_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal num_samples_write_as_phi_fu_290_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_samples_write_as_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_flag3_phi_fu_300_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag3_reg_296 : STD_LOGIC_VECTOR (0 downto 0);
    signal sample_counter_write_phi_fu_311_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_counter_write_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_phi_fu_322_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00001001 : BOOLEAN;
    signal grp_fu_339_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_5_fu_453_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_reg_ioackin_o_data_TREADY : STD_LOGIC := '0';
    signal grp_fu_330_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_2_fu_385_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_394_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_sequence_index_l_fu_405_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_V_1_fu_437_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_a_pulse_write_ass_fu_464_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_a_xfer_bundle_wri_fu_469_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_a_pulse_write_ass_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_a_xfer_bundle_wri_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component hcr_metadata_injebkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hcr_metadata_injebkb_U1 : component hcr_metadata_injebkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din1 => ap_const_lv32_BA5EBA11,
        din2 => p_Result_3_reg_620,
        din3 => pos_enc_0,
        din4 => pos_enc_1,
        din5 => header_4_reg_625,
        din6 => header_5_reg_614,
        din7 => header_6_reg_630,
        din8 => ap_const_lv32_0,
        din9 => tmp_data_V_1_fu_437_p9,
        dout => tmp_data_V_1_fu_437_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_0 = tmp_fu_350_p3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_0 = tmp_fu_350_p3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state5 xor ap_const_logic_1);
                elsif ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_o_data_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_o_data_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596) and (ap_block_state7_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_6_reg_600 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (tmp_s_reg_635 = ap_const_lv1_0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_o_data_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_6_reg_600 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = o_data_TREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (tmp_s_reg_635 = ap_const_lv1_0) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = o_data_TREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596) and (ap_const_logic_1 = o_data_TREADY)))) then 
                    ap_reg_ioackin_o_data_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
                    ap_return_0_preg <= p_s_phi_fu_322_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
                    ap_return_1_preg <= in_a_pulse_write_ass_fu_464_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
                    ap_return_2_preg <= in_a_xfer_bundle_wri_fu_469_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
                    ap_return_3_preg <= break_after_pulse_wr_phi_fu_281_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
                    ap_return_4_preg <= num_samples_write_as_phi_fu_290_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
                    ap_return_5_preg <= sample_counter_write_phi_fu_311_p4;
                end if; 
            end if;
        end if;
    end process;


    break_after_pulse_wr_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596) and (ap_block_state7_io = ap_const_boolean_0))) then 
                break_after_pulse_wr_reg_278 <= tmp_9_reg_609;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_1 = tmp_fu_350_p3))) then 
                break_after_pulse_wr_reg_278 <= (0=>break_after_pulse_re, others=>'-');
            end if; 
        end if;
    end process;

    num_samples_write_as_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596) and (ap_block_state7_io = ap_const_boolean_0))) then 
                num_samples_write_as_reg_287 <= header_5_reg_614;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_1 = tmp_fu_350_p3))) then 
                num_samples_write_as_reg_287 <= num_samples_read;
            end if; 
        end if;
    end process;

    p_s_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596) and (ap_block_state7_io = ap_const_boolean_0))) then 
                p_s_reg_318 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_1 = tmp_fu_350_p3))) then 
                p_s_reg_318 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    sample_counter_write_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596) and (ap_block_state7_io = ap_const_boolean_0))) then 
                sample_counter_write_reg_308 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_1 = tmp_fu_350_p3))) then 
                sample_counter_write_reg_308 <= sample_counter_read;
            end if; 
        end if;
    end process;

    write_flag3_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596) and (ap_block_state7_io = ap_const_boolean_0))) then 
                write_flag3_reg_296 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_1 = tmp_fu_350_p3))) then 
                write_flag3_reg_296 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    x1_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_0 = tmp_fu_350_p3))) then 
                x1_reg_258 <= sample_counter_read;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_6_fu_358_p2))) then 
                x1_reg_258 <= x_fu_363_p2;
            end if; 
        end if;
    end process;

    x2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = tmp_s_fu_421_p2))) then 
                x2_reg_267 <= x_1_fu_427_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                x2_reg_267 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    header_4_reg_625(7 downto 0) <= header_4_fu_414_p1(7 downto 0);
                header_5_reg_614 <= pulse_metadata_V_rea_reg_587(807 downto 776);
                header_6_reg_630 <= header_6_fu_418_p1;
                    p_Result_3_reg_620(19 downto 0) <= p_Result_3_fu_401_p1(19 downto 0);
                tmp_9_reg_609 <= pulse_metadata_V_rea_reg_587(811 downto 811);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))))) then
                pulse_metadata_V_rea_reg_587 <= pulse_metadata_V_TDATA;
                tmp_reg_596 <= pulse_metadata_V_TDATA(812 downto 812);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                tmp_6_reg_600 <= tmp_6_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_s_fu_421_p2))) then
                tmp_data_V_1_reg_644 <= tmp_data_V_1_fu_437_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                tmp_s_reg_635 <= tmp_s_fu_421_p2;
            end if;
        end if;
    end process;
    p_Result_3_reg_620(31 downto 20) <= "000000000000";
    header_4_reg_625(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, pulse_metadata_V_TVALID, ap_CS_fsm_state7, tmp_fu_350_p3, tmp_6_fu_358_p2, ap_enable_reg_pp0_iter0, tmp_s_fu_421_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_flag00011011, ap_block_pp1_stage0_flag00011011, ap_block_state7_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_0 = tmp_fu_350_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))) and (ap_const_lv1_1 = tmp_fu_350_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_6_fu_358_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_6_fu_358_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_s_fu_421_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_s_fu_421_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;

        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state6_io)
    begin
                ap_block_pp1_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;


    ap_block_pp1_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state6_io)
    begin
                ap_block_pp1_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;


    ap_block_state1_assign_proc : process(ap_start, pulse_metadata_V_TVALID)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(tmp_6_reg_600, ap_sig_ioackin_o_data_TREADY)
    begin
                ap_block_state3_io <= ((tmp_6_reg_600 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_o_data_TREADY));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(tmp_s_reg_635, ap_sig_ioackin_o_data_TREADY)
    begin
                ap_block_state6_io <= ((tmp_s_reg_635 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_o_data_TREADY));
    end process;

        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(tmp_reg_596, ap_sig_ioackin_o_data_TREADY)
    begin
                ap_block_state7_io <= ((ap_const_lv1_0 = tmp_reg_596) and (ap_const_logic_0 = ap_sig_ioackin_o_data_TREADY));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_6_fu_358_p2)
    begin
        if ((ap_const_lv1_0 = tmp_6_fu_358_p2)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(tmp_s_fu_421_p2)
    begin
        if ((ap_const_lv1_1 = tmp_s_fu_421_p2)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_block_state7_io)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, p_s_phi_fu_322_p4, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
            ap_return_0 <= p_s_phi_fu_322_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, in_a_pulse_write_ass_fu_464_p2, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
            ap_return_1 <= in_a_pulse_write_ass_fu_464_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, in_a_xfer_bundle_wri_fu_469_p2, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
            ap_return_2 <= in_a_xfer_bundle_wri_fu_469_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state7, break_after_pulse_wr_phi_fu_281_p4, ap_block_state7_io, ap_return_3_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
            ap_return_3 <= break_after_pulse_wr_phi_fu_281_p4;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, num_samples_write_as_phi_fu_290_p4, ap_return_4_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
            ap_return_4 <= num_samples_write_as_phi_fu_290_p4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state7, ap_block_state7_io, sample_counter_write_phi_fu_311_p4, ap_return_5_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
            ap_return_5 <= sample_counter_write_phi_fu_311_p4;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_sig_ioackin_o_data_TREADY_assign_proc : process(o_data_TREADY, ap_reg_ioackin_o_data_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_o_data_TREADY)) then 
            ap_sig_ioackin_o_data_TREADY <= o_data_TREADY;
        else 
            ap_sig_ioackin_o_data_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    break_after_pulse_wr_phi_fu_281_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_596, tmp_9_reg_609, break_after_pulse_wr_reg_278)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596))) then 
            break_after_pulse_wr_phi_fu_281_p4 <= tmp_9_reg_609;
        else 
            break_after_pulse_wr_phi_fu_281_p4 <= break_after_pulse_wr_reg_278;
        end if; 
    end process;

    
    grp_fu_330_p4_proc : process(data_word_user_V)
    begin
        grp_fu_330_p4 <= data_word_user_V;
        grp_fu_330_p4(64) <= ap_const_lv1_1(0);
    end process;

    
    grp_fu_339_p4_proc : process(grp_fu_330_p4)
    begin
        grp_fu_339_p4 <= grp_fu_330_p4;
        grp_fu_339_p4(72) <= ap_const_lv1_0(0);
    end process;

    header_4_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_sequence_index_l_fu_405_p4),32));
    header_6_fu_418_p1 <= pulse_metadata_V_rea_reg_587(32 - 1 downto 0);
    in_a_pulse_write_ass_fu_464_p1 <= (0=>in_a_pulse_read, others=>'-');
    in_a_pulse_write_ass_fu_464_p2 <= (write_flag3_phi_fu_300_p4 or in_a_pulse_write_ass_fu_464_p1);
    in_a_xfer_bundle_wri_fu_469_p1 <= (0=>in_a_xfer_bundle_rea, others=>'-');
    in_a_xfer_bundle_wri_fu_469_p2 <= (write_flag3_phi_fu_300_p4 or in_a_xfer_bundle_wri_fu_469_p1);

    num_samples_write_as_phi_fu_290_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_596, header_5_reg_614, num_samples_write_as_reg_287)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596))) then 
            num_samples_write_as_phi_fu_290_p4 <= header_5_reg_614;
        else 
            num_samples_write_as_phi_fu_290_p4 <= num_samples_write_as_reg_287;
        end if; 
    end process;


    o_data_TDATA_assign_proc : process(data_word_data_V, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_6_reg_600, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_s_reg_635, ap_CS_fsm_state7, tmp_reg_596, tmp_data_V_1_reg_644, ap_block_pp0_stage0_flag00001001, ap_block_pp1_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596))) then 
            o_data_TDATA <= data_word_data_V;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (tmp_s_reg_635 = ap_const_lv1_0) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0))) then 
            o_data_TDATA <= tmp_data_V_1_reg_644;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_6_reg_600 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0))) then 
            o_data_TDATA <= ap_const_lv32_75757575;
        else 
            o_data_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    o_data_TDATA_blk_n_assign_proc : process(o_data_TREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_6_reg_600, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000, tmp_s_reg_635, ap_CS_fsm_state7, tmp_reg_596)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (tmp_6_reg_600 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (tmp_s_reg_635 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596)))) then 
            o_data_TDATA_blk_n <= o_data_TREADY;
        else 
            o_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_data_TDEST <= data_word_dest_V;
    o_data_TID <= data_word_id_V;
    o_data_TKEEP <= data_word_keep_V;
    o_data_TLAST <= data_word_last_V;
    o_data_TSTRB <= data_word_strb_V;

    o_data_TUSER_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_6_reg_600, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_s_reg_635, ap_CS_fsm_state7, tmp_reg_596, ap_block_pp0_stage0_flag00001001, ap_block_pp1_stage0_flag00001001, grp_fu_339_p4, p_Result_5_fu_453_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (tmp_s_reg_635 = ap_const_lv1_0) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0))) then 
            o_data_TUSER <= p_Result_5_fu_453_p4;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_6_reg_600 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0)))) then 
            o_data_TUSER <= grp_fu_339_p4;
        else 
            o_data_TUSER <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    o_data_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_6_reg_600, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_s_reg_635, ap_CS_fsm_state7, tmp_reg_596, ap_block_pp0_stage0_flag00001001, ap_block_pp1_stage0_flag00001001, ap_reg_ioackin_o_data_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_6_reg_600 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_o_data_TREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (tmp_s_reg_635 = ap_const_lv1_0) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_o_data_TREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596) and (ap_const_logic_0 = ap_reg_ioackin_o_data_TREADY)))) then 
            o_data_TVALID <= ap_const_logic_1;
        else 
            o_data_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_3_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_394_p3),32));
    
    p_Result_5_fu_453_p4_proc : process(grp_fu_330_p4)
    begin
        p_Result_5_fu_453_p4 <= grp_fu_330_p4;
        p_Result_5_fu_453_p4(72) <= ap_const_lv1_1(0);
    end process;


    p_s_phi_fu_322_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_596, p_s_reg_318)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596))) then 
            p_s_phi_fu_322_p4 <= ap_const_lv1_0;
        else 
            p_s_phi_fu_322_p4 <= p_s_reg_318;
        end if; 
    end process;


    pulse_metadata_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, pulse_metadata_V_TVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            pulse_metadata_V_TDATA_blk_n <= pulse_metadata_V_TVALID;
        else 
            pulse_metadata_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_metadata_V_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, pulse_metadata_V_TVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = pulse_metadata_V_TVALID))))) then 
            pulse_metadata_V_TREADY <= ap_const_logic_1;
        else 
            pulse_metadata_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    sample_counter_write_phi_fu_311_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_596, sample_counter_write_reg_308)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596))) then 
            sample_counter_write_phi_fu_311_p4 <= ap_const_lv32_1;
        else 
            sample_counter_write_phi_fu_311_p4 <= sample_counter_write_reg_308;
        end if; 
    end process;

    tmp_2_fu_385_p4 <= pulse_metadata_V_rea_reg_587(811 downto 808);
    tmp_3_fu_394_p3 <= (tmp_2_fu_385_p4 & flags);
    tmp_6_fu_358_p2 <= "1" when (unsigned(x1_reg_258) < unsigned(num_samples_read)) else "0";
    tmp_data_V_1_fu_437_p9 <= x2_reg_267(3 - 1 downto 0);
    tmp_fu_350_p3 <= pulse_metadata_V_TDATA(812 downto 812);
    tmp_s_fu_421_p2 <= "1" when (x2_reg_267 = ap_const_lv4_8) else "0";
    tmp_sequence_index_l_fu_405_p4 <= pulse_metadata_V_rea_reg_587(775 downto 768);

    write_flag3_phi_fu_300_p4_assign_proc : process(ap_CS_fsm_state7, tmp_reg_596, write_flag3_reg_296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_reg_596))) then 
            write_flag3_phi_fu_300_p4 <= ap_const_lv1_1;
        else 
            write_flag3_phi_fu_300_p4 <= write_flag3_reg_296;
        end if; 
    end process;

    x_1_fu_427_p2 <= std_logic_vector(unsigned(x2_reg_267) + unsigned(ap_const_lv4_1));
    x_fu_363_p2 <= std_logic_vector(unsigned(x1_reg_258) + unsigned(ap_const_lv32_1));
end behav;
