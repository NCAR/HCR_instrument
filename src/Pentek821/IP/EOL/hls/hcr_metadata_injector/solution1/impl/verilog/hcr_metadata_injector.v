// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hcr_metadata_injector,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku060-ffva1156-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.448667,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4457,HLS_SYN_LUT=1214}" *)

module hcr_metadata_injector (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_data_TDATA,
        i_data_TVALID,
        i_data_TREADY,
        i_data_TKEEP,
        i_data_TSTRB,
        i_data_TUSER,
        i_data_TLAST,
        i_data_TID,
        i_data_TDEST,
        o_data_TDATA,
        o_data_TVALID,
        o_data_TREADY,
        o_data_TKEEP,
        o_data_TSTRB,
        o_data_TUSER,
        o_data_TLAST,
        o_data_TID,
        o_data_TDEST,
        pulse_metadata_V_TDATA,
        pulse_metadata_V_TVALID,
        pulse_metadata_V_TREADY,
        pos_enc_0,
        pos_enc_1,
        flags
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i_data_TDATA;
input   i_data_TVALID;
output   i_data_TREADY;
input  [3:0] i_data_TKEEP;
input  [3:0] i_data_TSTRB;
input  [127:0] i_data_TUSER;
input  [0:0] i_data_TLAST;
input  [0:0] i_data_TID;
input  [0:0] i_data_TDEST;
output  [31:0] o_data_TDATA;
output   o_data_TVALID;
input   o_data_TREADY;
output  [3:0] o_data_TKEEP;
output  [3:0] o_data_TSTRB;
output  [127:0] o_data_TUSER;
output  [0:0] o_data_TLAST;
output  [0:0] o_data_TID;
output  [0:0] o_data_TDEST;
input  [847:0] pulse_metadata_V_TDATA;
input   pulse_metadata_V_TVALID;
output   pulse_metadata_V_TREADY;
input  [31:0] pos_enc_0;
input  [31:0] pos_enc_1;
input  [31:0] flags;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] i_data_V_data_V_0_data_out;
wire    i_data_V_data_V_0_vld_in;
wire    i_data_V_data_V_0_vld_out;
wire    i_data_V_data_V_0_ack_in;
reg    i_data_V_data_V_0_ack_out;
reg   [31:0] i_data_V_data_V_0_payload_A;
reg   [31:0] i_data_V_data_V_0_payload_B;
reg    i_data_V_data_V_0_sel_rd;
reg    i_data_V_data_V_0_sel_wr;
wire    i_data_V_data_V_0_sel;
wire    i_data_V_data_V_0_load_A;
wire    i_data_V_data_V_0_load_B;
reg   [1:0] i_data_V_data_V_0_state;
wire    i_data_V_data_V_0_state_cmp_full;
reg   [3:0] i_data_V_keep_V_0_data_out;
wire    i_data_V_keep_V_0_vld_in;
wire    i_data_V_keep_V_0_vld_out;
wire    i_data_V_keep_V_0_ack_in;
reg    i_data_V_keep_V_0_ack_out;
reg   [3:0] i_data_V_keep_V_0_payload_A;
reg   [3:0] i_data_V_keep_V_0_payload_B;
reg    i_data_V_keep_V_0_sel_rd;
reg    i_data_V_keep_V_0_sel_wr;
wire    i_data_V_keep_V_0_sel;
wire    i_data_V_keep_V_0_load_A;
wire    i_data_V_keep_V_0_load_B;
reg   [1:0] i_data_V_keep_V_0_state;
wire    i_data_V_keep_V_0_state_cmp_full;
reg   [3:0] i_data_V_strb_V_0_data_out;
wire    i_data_V_strb_V_0_vld_in;
wire    i_data_V_strb_V_0_vld_out;
wire    i_data_V_strb_V_0_ack_in;
reg    i_data_V_strb_V_0_ack_out;
reg   [3:0] i_data_V_strb_V_0_payload_A;
reg   [3:0] i_data_V_strb_V_0_payload_B;
reg    i_data_V_strb_V_0_sel_rd;
reg    i_data_V_strb_V_0_sel_wr;
wire    i_data_V_strb_V_0_sel;
wire    i_data_V_strb_V_0_load_A;
wire    i_data_V_strb_V_0_load_B;
reg   [1:0] i_data_V_strb_V_0_state;
wire    i_data_V_strb_V_0_state_cmp_full;
reg   [127:0] i_data_V_user_V_0_data_out;
wire    i_data_V_user_V_0_vld_in;
wire    i_data_V_user_V_0_vld_out;
wire    i_data_V_user_V_0_ack_in;
reg    i_data_V_user_V_0_ack_out;
reg   [127:0] i_data_V_user_V_0_payload_A;
reg   [127:0] i_data_V_user_V_0_payload_B;
reg    i_data_V_user_V_0_sel_rd;
reg    i_data_V_user_V_0_sel_wr;
wire    i_data_V_user_V_0_sel;
wire    i_data_V_user_V_0_load_A;
wire    i_data_V_user_V_0_load_B;
reg   [1:0] i_data_V_user_V_0_state;
wire    i_data_V_user_V_0_state_cmp_full;
reg   [0:0] i_data_V_last_V_0_data_out;
wire    i_data_V_last_V_0_vld_in;
wire    i_data_V_last_V_0_vld_out;
wire    i_data_V_last_V_0_ack_in;
reg    i_data_V_last_V_0_ack_out;
reg   [0:0] i_data_V_last_V_0_payload_A;
reg   [0:0] i_data_V_last_V_0_payload_B;
reg    i_data_V_last_V_0_sel_rd;
reg    i_data_V_last_V_0_sel_wr;
wire    i_data_V_last_V_0_sel;
wire    i_data_V_last_V_0_load_A;
wire    i_data_V_last_V_0_load_B;
reg   [1:0] i_data_V_last_V_0_state;
wire    i_data_V_last_V_0_state_cmp_full;
reg   [0:0] i_data_V_id_V_0_data_out;
wire    i_data_V_id_V_0_vld_in;
wire    i_data_V_id_V_0_vld_out;
wire    i_data_V_id_V_0_ack_in;
reg    i_data_V_id_V_0_ack_out;
reg   [0:0] i_data_V_id_V_0_payload_A;
reg   [0:0] i_data_V_id_V_0_payload_B;
reg    i_data_V_id_V_0_sel_rd;
reg    i_data_V_id_V_0_sel_wr;
wire    i_data_V_id_V_0_sel;
wire    i_data_V_id_V_0_load_A;
wire    i_data_V_id_V_0_load_B;
reg   [1:0] i_data_V_id_V_0_state;
wire    i_data_V_id_V_0_state_cmp_full;
reg   [0:0] i_data_V_dest_V_0_data_out;
wire    i_data_V_dest_V_0_vld_in;
wire    i_data_V_dest_V_0_vld_out;
wire    i_data_V_dest_V_0_ack_in;
reg    i_data_V_dest_V_0_ack_out;
reg   [0:0] i_data_V_dest_V_0_payload_A;
reg   [0:0] i_data_V_dest_V_0_payload_B;
reg    i_data_V_dest_V_0_sel_rd;
reg    i_data_V_dest_V_0_sel_wr;
wire    i_data_V_dest_V_0_sel;
wire    i_data_V_dest_V_0_load_A;
wire    i_data_V_dest_V_0_load_B;
reg   [1:0] i_data_V_dest_V_0_state;
wire    i_data_V_dest_V_0_state_cmp_full;
reg   [31:0] o_data_V_data_V_1_data_in;
reg   [31:0] o_data_V_data_V_1_data_out;
reg    o_data_V_data_V_1_vld_in;
wire    o_data_V_data_V_1_vld_out;
wire    o_data_V_data_V_1_ack_in;
wire    o_data_V_data_V_1_ack_out;
reg   [31:0] o_data_V_data_V_1_payload_A;
reg   [31:0] o_data_V_data_V_1_payload_B;
reg    o_data_V_data_V_1_sel_rd;
reg    o_data_V_data_V_1_sel_wr;
wire    o_data_V_data_V_1_sel;
wire    o_data_V_data_V_1_load_A;
wire    o_data_V_data_V_1_load_B;
reg   [1:0] o_data_V_data_V_1_state;
wire    o_data_V_data_V_1_state_cmp_full;
reg   [3:0] o_data_V_keep_V_1_data_in;
reg   [3:0] o_data_V_keep_V_1_data_out;
reg    o_data_V_keep_V_1_vld_in;
wire    o_data_V_keep_V_1_vld_out;
wire    o_data_V_keep_V_1_ack_in;
wire    o_data_V_keep_V_1_ack_out;
reg   [3:0] o_data_V_keep_V_1_payload_A;
reg   [3:0] o_data_V_keep_V_1_payload_B;
reg    o_data_V_keep_V_1_sel_rd;
reg    o_data_V_keep_V_1_sel_wr;
wire    o_data_V_keep_V_1_sel;
wire    o_data_V_keep_V_1_load_A;
wire    o_data_V_keep_V_1_load_B;
reg   [1:0] o_data_V_keep_V_1_state;
wire    o_data_V_keep_V_1_state_cmp_full;
reg   [3:0] o_data_V_strb_V_1_data_in;
reg   [3:0] o_data_V_strb_V_1_data_out;
reg    o_data_V_strb_V_1_vld_in;
wire    o_data_V_strb_V_1_vld_out;
wire    o_data_V_strb_V_1_ack_in;
wire    o_data_V_strb_V_1_ack_out;
reg   [3:0] o_data_V_strb_V_1_payload_A;
reg   [3:0] o_data_V_strb_V_1_payload_B;
reg    o_data_V_strb_V_1_sel_rd;
reg    o_data_V_strb_V_1_sel_wr;
wire    o_data_V_strb_V_1_sel;
wire    o_data_V_strb_V_1_load_A;
wire    o_data_V_strb_V_1_load_B;
reg   [1:0] o_data_V_strb_V_1_state;
wire    o_data_V_strb_V_1_state_cmp_full;
reg   [127:0] o_data_V_user_V_1_data_in;
reg   [127:0] o_data_V_user_V_1_data_out;
reg    o_data_V_user_V_1_vld_in;
wire    o_data_V_user_V_1_vld_out;
wire    o_data_V_user_V_1_ack_in;
wire    o_data_V_user_V_1_ack_out;
reg   [127:0] o_data_V_user_V_1_payload_A;
reg   [127:0] o_data_V_user_V_1_payload_B;
reg    o_data_V_user_V_1_sel_rd;
reg    o_data_V_user_V_1_sel_wr;
wire    o_data_V_user_V_1_sel;
wire    o_data_V_user_V_1_load_A;
wire    o_data_V_user_V_1_load_B;
reg   [1:0] o_data_V_user_V_1_state;
wire    o_data_V_user_V_1_state_cmp_full;
reg   [0:0] o_data_V_last_V_1_data_in;
reg   [0:0] o_data_V_last_V_1_data_out;
reg    o_data_V_last_V_1_vld_in;
wire    o_data_V_last_V_1_vld_out;
wire    o_data_V_last_V_1_ack_in;
wire    o_data_V_last_V_1_ack_out;
reg   [0:0] o_data_V_last_V_1_payload_A;
reg   [0:0] o_data_V_last_V_1_payload_B;
reg    o_data_V_last_V_1_sel_rd;
reg    o_data_V_last_V_1_sel_wr;
wire    o_data_V_last_V_1_sel;
wire    o_data_V_last_V_1_load_A;
wire    o_data_V_last_V_1_load_B;
reg   [1:0] o_data_V_last_V_1_state;
wire    o_data_V_last_V_1_state_cmp_full;
reg   [0:0] o_data_V_id_V_1_data_in;
reg   [0:0] o_data_V_id_V_1_data_out;
reg    o_data_V_id_V_1_vld_in;
wire    o_data_V_id_V_1_vld_out;
wire    o_data_V_id_V_1_ack_in;
wire    o_data_V_id_V_1_ack_out;
reg   [0:0] o_data_V_id_V_1_payload_A;
reg   [0:0] o_data_V_id_V_1_payload_B;
reg    o_data_V_id_V_1_sel_rd;
reg    o_data_V_id_V_1_sel_wr;
wire    o_data_V_id_V_1_sel;
wire    o_data_V_id_V_1_load_A;
wire    o_data_V_id_V_1_load_B;
reg   [1:0] o_data_V_id_V_1_state;
wire    o_data_V_id_V_1_state_cmp_full;
reg   [0:0] o_data_V_dest_V_1_data_in;
reg   [0:0] o_data_V_dest_V_1_data_out;
reg    o_data_V_dest_V_1_vld_in;
wire    o_data_V_dest_V_1_vld_out;
wire    o_data_V_dest_V_1_ack_in;
wire    o_data_V_dest_V_1_ack_out;
reg   [0:0] o_data_V_dest_V_1_payload_A;
reg   [0:0] o_data_V_dest_V_1_payload_B;
reg    o_data_V_dest_V_1_sel_rd;
reg    o_data_V_dest_V_1_sel_wr;
wire    o_data_V_dest_V_1_sel;
wire    o_data_V_dest_V_1_load_A;
wire    o_data_V_dest_V_1_load_B;
reg   [1:0] o_data_V_dest_V_1_state;
wire    o_data_V_dest_V_1_state_cmp_full;
reg   [847:0] pulse_metadata_V_0_data_out;
wire    pulse_metadata_V_0_vld_in;
wire    pulse_metadata_V_0_vld_out;
wire    pulse_metadata_V_0_ack_in;
wire    pulse_metadata_V_0_ack_out;
reg   [847:0] pulse_metadata_V_0_payload_A;
reg   [847:0] pulse_metadata_V_0_payload_B;
reg    pulse_metadata_V_0_sel_rd;
reg    pulse_metadata_V_0_sel_wr;
wire    pulse_metadata_V_0_sel;
wire    pulse_metadata_V_0_load_A;
wire    pulse_metadata_V_0_load_B;
reg   [1:0] pulse_metadata_V_0_state;
wire    pulse_metadata_V_0_state_cmp_full;
reg    i_data_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    o_data_TDATA_blk_n;
wire   [0:0] tmp_2_fu_269_p3;
wire   [0:0] brmerge_fu_341_p2;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_2_reg_515;
reg   [0:0] brmerge_reg_554;
reg   [31:0] tmp_data_V_reg_474;
reg    ap_predicate_op71_write_state3;
reg    ap_block_state3_io;
reg   [3:0] tmp_keep_V_reg_480;
reg   [3:0] tmp_strb_V_reg_486;
reg   [127:0] tmp_user_V_1_reg_492;
reg   [0:0] tmp_last_V_reg_497;
reg   [0:0] tmp_id_V_reg_503;
reg   [0:0] tmp_dest_V_reg_509;
reg   [0:0] in_a_pulse_load_reg_519;
reg   [0:0] in_a_pulse_group_loa_reg_524;
reg   [31:0] sample_counter_load_1_reg_529;
reg   [0:0] last_pulse_load_reg_534;
reg   [31:0] num_samples_load_reg_539;
wire   [0:0] in_a_pulse_group_3_fu_311_p2;
reg   [0:0] in_a_pulse_group_3_reg_544;
wire   [0:0] in_a_pulse_2_fu_323_p2;
reg   [0:0] in_a_pulse_2_reg_549;
reg   [127:0] p_Result_1_fu_357_p4;
reg   [31:0] pos_enc_0_read_reg_563;
reg   [31:0] pos_enc_1_read_reg_568;
reg   [31:0] flags_read_reg_573;
wire    grp_handle_header_fu_161_ap_start;
wire    grp_handle_header_fu_161_ap_done;
wire    grp_handle_header_fu_161_ap_idle;
wire    grp_handle_header_fu_161_ap_ready;
wire    grp_handle_header_fu_161_pulse_metadata_V_TVALID;
wire    grp_handle_header_fu_161_pulse_metadata_V_TREADY;
wire    grp_handle_header_fu_161_in_a_pulse_read;
wire    grp_handle_header_fu_161_in_a_pulse_group_rea;
wire    grp_handle_header_fu_161_last_pulse_read;
wire   [31:0] grp_handle_header_fu_161_o_data_TDATA;
wire    grp_handle_header_fu_161_o_data_TVALID;
wire    grp_handle_header_fu_161_o_data_TREADY;
wire   [3:0] grp_handle_header_fu_161_o_data_TKEEP;
wire   [3:0] grp_handle_header_fu_161_o_data_TSTRB;
wire   [127:0] grp_handle_header_fu_161_o_data_TUSER;
wire   [0:0] grp_handle_header_fu_161_o_data_TLAST;
wire   [0:0] grp_handle_header_fu_161_o_data_TID;
wire   [0:0] grp_handle_header_fu_161_o_data_TDEST;
wire   [0:0] grp_handle_header_fu_161_ap_return_0;
wire   [0:0] grp_handle_header_fu_161_ap_return_1;
wire   [0:0] grp_handle_header_fu_161_ap_return_2;
wire   [0:0] grp_handle_header_fu_161_ap_return_3;
wire   [31:0] grp_handle_header_fu_161_ap_return_4;
wire   [31:0] grp_handle_header_fu_161_ap_return_5;
reg    ap_reg_grp_handle_header_fu_161_ap_start;
reg   [0:0] in_a_pulse_fu_80;
reg    ap_predicate_op76_write_state4;
reg    ap_block_state4_io;
reg    ap_block_state4_on_subcall_done;
wire   [0:0] terminate_fu_399_p1;
reg   [0:0] in_a_pulse_group_fu_84;
reg   [31:0] sample_counter_fu_88;
wire   [31:0] sample_counter_1_fu_368_p2;
reg   [0:0] last_pulse_fu_92;
reg   [31:0] num_samples_fu_96;
wire   [0:0] tmp_1_fu_293_p2;
wire   [0:0] p_in_a_pulse_group_de_fu_299_p2;
wire   [0:0] p_in_a_pulse_group_fu_305_p2;
wire   [0:0] not_tmp_1_fu_317_p2;
wire   [0:0] in_a_pulse_group_not_fu_329_p2;
wire   [0:0] tmp_fu_335_p2;
reg   [127:0] p_Result_s_fu_347_p4;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 i_data_V_data_V_0_sel_rd = 1'b0;
#0 i_data_V_data_V_0_sel_wr = 1'b0;
#0 i_data_V_data_V_0_state = 2'd0;
#0 i_data_V_keep_V_0_sel_rd = 1'b0;
#0 i_data_V_keep_V_0_sel_wr = 1'b0;
#0 i_data_V_keep_V_0_state = 2'd0;
#0 i_data_V_strb_V_0_sel_rd = 1'b0;
#0 i_data_V_strb_V_0_sel_wr = 1'b0;
#0 i_data_V_strb_V_0_state = 2'd0;
#0 i_data_V_user_V_0_sel_rd = 1'b0;
#0 i_data_V_user_V_0_sel_wr = 1'b0;
#0 i_data_V_user_V_0_state = 2'd0;
#0 i_data_V_last_V_0_sel_rd = 1'b0;
#0 i_data_V_last_V_0_sel_wr = 1'b0;
#0 i_data_V_last_V_0_state = 2'd0;
#0 i_data_V_id_V_0_sel_rd = 1'b0;
#0 i_data_V_id_V_0_sel_wr = 1'b0;
#0 i_data_V_id_V_0_state = 2'd0;
#0 i_data_V_dest_V_0_sel_rd = 1'b0;
#0 i_data_V_dest_V_0_sel_wr = 1'b0;
#0 i_data_V_dest_V_0_state = 2'd0;
#0 o_data_V_data_V_1_sel_rd = 1'b0;
#0 o_data_V_data_V_1_sel_wr = 1'b0;
#0 o_data_V_data_V_1_state = 2'd0;
#0 o_data_V_keep_V_1_sel_rd = 1'b0;
#0 o_data_V_keep_V_1_sel_wr = 1'b0;
#0 o_data_V_keep_V_1_state = 2'd0;
#0 o_data_V_strb_V_1_sel_rd = 1'b0;
#0 o_data_V_strb_V_1_sel_wr = 1'b0;
#0 o_data_V_strb_V_1_state = 2'd0;
#0 o_data_V_user_V_1_sel_rd = 1'b0;
#0 o_data_V_user_V_1_sel_wr = 1'b0;
#0 o_data_V_user_V_1_state = 2'd0;
#0 o_data_V_last_V_1_sel_rd = 1'b0;
#0 o_data_V_last_V_1_sel_wr = 1'b0;
#0 o_data_V_last_V_1_state = 2'd0;
#0 o_data_V_id_V_1_sel_rd = 1'b0;
#0 o_data_V_id_V_1_sel_wr = 1'b0;
#0 o_data_V_id_V_1_state = 2'd0;
#0 o_data_V_dest_V_1_sel_rd = 1'b0;
#0 o_data_V_dest_V_1_sel_wr = 1'b0;
#0 o_data_V_dest_V_1_state = 2'd0;
#0 pulse_metadata_V_0_sel_rd = 1'b0;
#0 pulse_metadata_V_0_sel_wr = 1'b0;
#0 pulse_metadata_V_0_state = 2'd0;
#0 ap_reg_grp_handle_header_fu_161_ap_start = 1'b0;
end

handle_header grp_handle_header_fu_161(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_handle_header_fu_161_ap_start),
    .ap_done(grp_handle_header_fu_161_ap_done),
    .ap_idle(grp_handle_header_fu_161_ap_idle),
    .ap_ready(grp_handle_header_fu_161_ap_ready),
    .pulse_metadata_V_TDATA(pulse_metadata_V_0_data_out),
    .pulse_metadata_V_TVALID(grp_handle_header_fu_161_pulse_metadata_V_TVALID),
    .pulse_metadata_V_TREADY(grp_handle_header_fu_161_pulse_metadata_V_TREADY),
    .data_word_data_V(tmp_data_V_reg_474),
    .data_word_keep_V(tmp_keep_V_reg_480),
    .data_word_strb_V(tmp_strb_V_reg_486),
    .data_word_user_V(tmp_user_V_1_reg_492),
    .data_word_last_V(tmp_last_V_reg_497),
    .data_word_id_V(tmp_id_V_reg_503),
    .data_word_dest_V(tmp_dest_V_reg_509),
    .in_a_pulse_read(grp_handle_header_fu_161_in_a_pulse_read),
    .in_a_pulse_group_rea(grp_handle_header_fu_161_in_a_pulse_group_rea),
    .last_pulse_read(grp_handle_header_fu_161_last_pulse_read),
    .num_samples_read(num_samples_load_reg_539),
    .sample_counter_read(sample_counter_load_1_reg_529),
    .o_data_TDATA(grp_handle_header_fu_161_o_data_TDATA),
    .o_data_TVALID(grp_handle_header_fu_161_o_data_TVALID),
    .o_data_TREADY(grp_handle_header_fu_161_o_data_TREADY),
    .o_data_TKEEP(grp_handle_header_fu_161_o_data_TKEEP),
    .o_data_TSTRB(grp_handle_header_fu_161_o_data_TSTRB),
    .o_data_TUSER(grp_handle_header_fu_161_o_data_TUSER),
    .o_data_TLAST(grp_handle_header_fu_161_o_data_TLAST),
    .o_data_TID(grp_handle_header_fu_161_o_data_TID),
    .o_data_TDEST(grp_handle_header_fu_161_o_data_TDEST),
    .pos_enc_0(pos_enc_0_read_reg_563),
    .pos_enc_1(pos_enc_1_read_reg_568),
    .flags(flags_read_reg_573),
    .ap_return_0(grp_handle_header_fu_161_ap_return_0),
    .ap_return_1(grp_handle_header_fu_161_ap_return_1),
    .ap_return_2(grp_handle_header_fu_161_ap_return_2),
    .ap_return_3(grp_handle_header_fu_161_ap_return_3),
    .ap_return_4(grp_handle_header_fu_161_ap_return_4),
    .ap_return_5(grp_handle_header_fu_161_ap_return_5)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_handle_header_fu_161_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)) & (1'd1 == tmp_2_fu_269_p3))) begin
            ap_reg_grp_handle_header_fu_161_ap_start <= 1'b1;
        end else if ((1'b1 == grp_handle_header_fu_161_ap_ready)) begin
            ap_reg_grp_handle_header_fu_161_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_data_V_0_ack_out) & (1'b1 == i_data_V_data_V_0_vld_out))) begin
            i_data_V_data_V_0_sel_rd <= ~i_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_data_V_0_vld_in) & (1'b1 == i_data_V_data_V_0_ack_in))) begin
            i_data_V_data_V_0_sel_wr <= ~i_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_data_V_0_vld_in) & (1'b1 == i_data_V_data_V_0_ack_out) & (i_data_V_data_V_0_state == 2'd3)) | ((1'b0 == i_data_V_data_V_0_vld_in) & (i_data_V_data_V_0_state == 2'd2)))) begin
            i_data_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_data_V_0_vld_in) & (1'b0 == i_data_V_data_V_0_ack_out) & (i_data_V_data_V_0_state == 2'd3)) | ((1'b0 == i_data_V_data_V_0_ack_out) & (i_data_V_data_V_0_state == 2'd1)))) begin
            i_data_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_data_V_0_vld_in) & (i_data_V_data_V_0_state == 2'd2)) | ((1'b1 == i_data_V_data_V_0_ack_out) & (i_data_V_data_V_0_state == 2'd1)) | ((i_data_V_data_V_0_state == 2'd3) & ~((1'b1 == i_data_V_data_V_0_vld_in) & (1'b0 == i_data_V_data_V_0_ack_out)) & ~((1'b0 == i_data_V_data_V_0_vld_in) & (1'b1 == i_data_V_data_V_0_ack_out))))) begin
            i_data_V_data_V_0_state <= 2'd3;
        end else begin
            i_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_dest_V_0_ack_out) & (1'b1 == i_data_V_dest_V_0_vld_out))) begin
            i_data_V_dest_V_0_sel_rd <= ~i_data_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_dest_V_0_vld_in) & (1'b1 == i_data_V_dest_V_0_ack_in))) begin
            i_data_V_dest_V_0_sel_wr <= ~i_data_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_dest_V_0_vld_in) & (1'b1 == i_data_V_dest_V_0_ack_out) & (2'd3 == i_data_V_dest_V_0_state)) | ((1'b0 == i_data_V_dest_V_0_vld_in) & (2'd2 == i_data_V_dest_V_0_state)))) begin
            i_data_V_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_dest_V_0_vld_in) & (1'b0 == i_data_V_dest_V_0_ack_out) & (2'd3 == i_data_V_dest_V_0_state)) | ((1'b0 == i_data_V_dest_V_0_ack_out) & (2'd1 == i_data_V_dest_V_0_state)))) begin
            i_data_V_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_dest_V_0_vld_in) & (2'd2 == i_data_V_dest_V_0_state)) | ((1'b1 == i_data_V_dest_V_0_ack_out) & (2'd1 == i_data_V_dest_V_0_state)) | ((2'd3 == i_data_V_dest_V_0_state) & ~((1'b1 == i_data_V_dest_V_0_vld_in) & (1'b0 == i_data_V_dest_V_0_ack_out)) & ~((1'b0 == i_data_V_dest_V_0_vld_in) & (1'b1 == i_data_V_dest_V_0_ack_out))))) begin
            i_data_V_dest_V_0_state <= 2'd3;
        end else begin
            i_data_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_id_V_0_ack_out) & (1'b1 == i_data_V_id_V_0_vld_out))) begin
            i_data_V_id_V_0_sel_rd <= ~i_data_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_id_V_0_vld_in) & (1'b1 == i_data_V_id_V_0_ack_in))) begin
            i_data_V_id_V_0_sel_wr <= ~i_data_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_id_V_0_vld_in) & (1'b1 == i_data_V_id_V_0_ack_out) & (2'd3 == i_data_V_id_V_0_state)) | ((1'b0 == i_data_V_id_V_0_vld_in) & (2'd2 == i_data_V_id_V_0_state)))) begin
            i_data_V_id_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_id_V_0_vld_in) & (1'b0 == i_data_V_id_V_0_ack_out) & (2'd3 == i_data_V_id_V_0_state)) | ((1'b0 == i_data_V_id_V_0_ack_out) & (2'd1 == i_data_V_id_V_0_state)))) begin
            i_data_V_id_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_id_V_0_vld_in) & (2'd2 == i_data_V_id_V_0_state)) | ((1'b1 == i_data_V_id_V_0_ack_out) & (2'd1 == i_data_V_id_V_0_state)) | ((2'd3 == i_data_V_id_V_0_state) & ~((1'b1 == i_data_V_id_V_0_vld_in) & (1'b0 == i_data_V_id_V_0_ack_out)) & ~((1'b0 == i_data_V_id_V_0_vld_in) & (1'b1 == i_data_V_id_V_0_ack_out))))) begin
            i_data_V_id_V_0_state <= 2'd3;
        end else begin
            i_data_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_keep_V_0_ack_out) & (1'b1 == i_data_V_keep_V_0_vld_out))) begin
            i_data_V_keep_V_0_sel_rd <= ~i_data_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_keep_V_0_vld_in) & (1'b1 == i_data_V_keep_V_0_ack_in))) begin
            i_data_V_keep_V_0_sel_wr <= ~i_data_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_keep_V_0_vld_in) & (1'b1 == i_data_V_keep_V_0_ack_out) & (2'd3 == i_data_V_keep_V_0_state)) | ((1'b0 == i_data_V_keep_V_0_vld_in) & (2'd2 == i_data_V_keep_V_0_state)))) begin
            i_data_V_keep_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_keep_V_0_vld_in) & (1'b0 == i_data_V_keep_V_0_ack_out) & (2'd3 == i_data_V_keep_V_0_state)) | ((1'b0 == i_data_V_keep_V_0_ack_out) & (2'd1 == i_data_V_keep_V_0_state)))) begin
            i_data_V_keep_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_keep_V_0_vld_in) & (2'd2 == i_data_V_keep_V_0_state)) | ((1'b1 == i_data_V_keep_V_0_ack_out) & (2'd1 == i_data_V_keep_V_0_state)) | ((2'd3 == i_data_V_keep_V_0_state) & ~((1'b1 == i_data_V_keep_V_0_vld_in) & (1'b0 == i_data_V_keep_V_0_ack_out)) & ~((1'b0 == i_data_V_keep_V_0_vld_in) & (1'b1 == i_data_V_keep_V_0_ack_out))))) begin
            i_data_V_keep_V_0_state <= 2'd3;
        end else begin
            i_data_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_last_V_0_ack_out) & (1'b1 == i_data_V_last_V_0_vld_out))) begin
            i_data_V_last_V_0_sel_rd <= ~i_data_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_last_V_0_vld_in) & (1'b1 == i_data_V_last_V_0_ack_in))) begin
            i_data_V_last_V_0_sel_wr <= ~i_data_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_last_V_0_vld_in) & (1'b1 == i_data_V_last_V_0_ack_out) & (2'd3 == i_data_V_last_V_0_state)) | ((1'b0 == i_data_V_last_V_0_vld_in) & (2'd2 == i_data_V_last_V_0_state)))) begin
            i_data_V_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_last_V_0_vld_in) & (1'b0 == i_data_V_last_V_0_ack_out) & (2'd3 == i_data_V_last_V_0_state)) | ((1'b0 == i_data_V_last_V_0_ack_out) & (2'd1 == i_data_V_last_V_0_state)))) begin
            i_data_V_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_last_V_0_vld_in) & (2'd2 == i_data_V_last_V_0_state)) | ((1'b1 == i_data_V_last_V_0_ack_out) & (2'd1 == i_data_V_last_V_0_state)) | ((2'd3 == i_data_V_last_V_0_state) & ~((1'b1 == i_data_V_last_V_0_vld_in) & (1'b0 == i_data_V_last_V_0_ack_out)) & ~((1'b0 == i_data_V_last_V_0_vld_in) & (1'b1 == i_data_V_last_V_0_ack_out))))) begin
            i_data_V_last_V_0_state <= 2'd3;
        end else begin
            i_data_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_strb_V_0_ack_out) & (1'b1 == i_data_V_strb_V_0_vld_out))) begin
            i_data_V_strb_V_0_sel_rd <= ~i_data_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_strb_V_0_vld_in) & (1'b1 == i_data_V_strb_V_0_ack_in))) begin
            i_data_V_strb_V_0_sel_wr <= ~i_data_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_strb_V_0_vld_in) & (1'b1 == i_data_V_strb_V_0_ack_out) & (2'd3 == i_data_V_strb_V_0_state)) | ((1'b0 == i_data_V_strb_V_0_vld_in) & (2'd2 == i_data_V_strb_V_0_state)))) begin
            i_data_V_strb_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_strb_V_0_vld_in) & (1'b0 == i_data_V_strb_V_0_ack_out) & (2'd3 == i_data_V_strb_V_0_state)) | ((1'b0 == i_data_V_strb_V_0_ack_out) & (2'd1 == i_data_V_strb_V_0_state)))) begin
            i_data_V_strb_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_strb_V_0_vld_in) & (2'd2 == i_data_V_strb_V_0_state)) | ((1'b1 == i_data_V_strb_V_0_ack_out) & (2'd1 == i_data_V_strb_V_0_state)) | ((2'd3 == i_data_V_strb_V_0_state) & ~((1'b1 == i_data_V_strb_V_0_vld_in) & (1'b0 == i_data_V_strb_V_0_ack_out)) & ~((1'b0 == i_data_V_strb_V_0_vld_in) & (1'b1 == i_data_V_strb_V_0_ack_out))))) begin
            i_data_V_strb_V_0_state <= 2'd3;
        end else begin
            i_data_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_user_V_0_ack_out) & (1'b1 == i_data_V_user_V_0_vld_out))) begin
            i_data_V_user_V_0_sel_rd <= ~i_data_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == i_data_V_user_V_0_vld_in) & (1'b1 == i_data_V_user_V_0_ack_in))) begin
            i_data_V_user_V_0_sel_wr <= ~i_data_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        i_data_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == i_data_V_user_V_0_vld_in) & (1'b1 == i_data_V_user_V_0_ack_out) & (2'd3 == i_data_V_user_V_0_state)) | ((1'b0 == i_data_V_user_V_0_vld_in) & (2'd2 == i_data_V_user_V_0_state)))) begin
            i_data_V_user_V_0_state <= 2'd2;
        end else if ((((1'b1 == i_data_V_user_V_0_vld_in) & (1'b0 == i_data_V_user_V_0_ack_out) & (2'd3 == i_data_V_user_V_0_state)) | ((1'b0 == i_data_V_user_V_0_ack_out) & (2'd1 == i_data_V_user_V_0_state)))) begin
            i_data_V_user_V_0_state <= 2'd1;
        end else if ((((1'b1 == i_data_V_user_V_0_vld_in) & (2'd2 == i_data_V_user_V_0_state)) | ((1'b1 == i_data_V_user_V_0_ack_out) & (2'd1 == i_data_V_user_V_0_state)) | ((2'd3 == i_data_V_user_V_0_state) & ~((1'b1 == i_data_V_user_V_0_vld_in) & (1'b0 == i_data_V_user_V_0_ack_out)) & ~((1'b0 == i_data_V_user_V_0_vld_in) & (1'b1 == i_data_V_user_V_0_ack_out))))) begin
            i_data_V_user_V_0_state <= 2'd3;
        end else begin
            i_data_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_data_V_1_ack_out) & (1'b1 == o_data_V_data_V_1_vld_out))) begin
            o_data_V_data_V_1_sel_rd <= ~o_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_data_V_1_vld_in) & (1'b1 == o_data_V_data_V_1_ack_in))) begin
            o_data_V_data_V_1_sel_wr <= ~o_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_data_V_1_vld_in) & (1'b1 == o_data_V_data_V_1_ack_out) & (2'd3 == o_data_V_data_V_1_state)) | ((1'b0 == o_data_V_data_V_1_vld_in) & (2'd2 == o_data_V_data_V_1_state)))) begin
            o_data_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_data_V_1_vld_in) & (1'b0 == o_data_V_data_V_1_ack_out) & (2'd3 == o_data_V_data_V_1_state)) | ((1'b0 == o_data_V_data_V_1_ack_out) & (2'd1 == o_data_V_data_V_1_state)))) begin
            o_data_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_data_V_1_vld_in) & (2'd2 == o_data_V_data_V_1_state)) | ((1'b1 == o_data_V_data_V_1_ack_out) & (2'd1 == o_data_V_data_V_1_state)) | ((2'd3 == o_data_V_data_V_1_state) & ~((1'b1 == o_data_V_data_V_1_vld_in) & (1'b0 == o_data_V_data_V_1_ack_out)) & ~((1'b0 == o_data_V_data_V_1_vld_in) & (1'b1 == o_data_V_data_V_1_ack_out))))) begin
            o_data_V_data_V_1_state <= 2'd3;
        end else begin
            o_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_dest_V_1_ack_out) & (1'b1 == o_data_V_dest_V_1_vld_out))) begin
            o_data_V_dest_V_1_sel_rd <= ~o_data_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_dest_V_1_vld_in) & (1'b1 == o_data_V_dest_V_1_ack_in))) begin
            o_data_V_dest_V_1_sel_wr <= ~o_data_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_dest_V_1_vld_in) & (1'b1 == o_data_V_dest_V_1_ack_out) & (2'd3 == o_data_V_dest_V_1_state)) | ((1'b0 == o_data_V_dest_V_1_vld_in) & (2'd2 == o_data_V_dest_V_1_state)))) begin
            o_data_V_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_dest_V_1_vld_in) & (1'b0 == o_data_V_dest_V_1_ack_out) & (2'd3 == o_data_V_dest_V_1_state)) | ((1'b0 == o_data_V_dest_V_1_ack_out) & (2'd1 == o_data_V_dest_V_1_state)))) begin
            o_data_V_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_dest_V_1_vld_in) & (2'd2 == o_data_V_dest_V_1_state)) | ((1'b1 == o_data_V_dest_V_1_ack_out) & (2'd1 == o_data_V_dest_V_1_state)) | ((2'd3 == o_data_V_dest_V_1_state) & ~((1'b1 == o_data_V_dest_V_1_vld_in) & (1'b0 == o_data_V_dest_V_1_ack_out)) & ~((1'b0 == o_data_V_dest_V_1_vld_in) & (1'b1 == o_data_V_dest_V_1_ack_out))))) begin
            o_data_V_dest_V_1_state <= 2'd3;
        end else begin
            o_data_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_id_V_1_ack_out) & (1'b1 == o_data_V_id_V_1_vld_out))) begin
            o_data_V_id_V_1_sel_rd <= ~o_data_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_id_V_1_vld_in) & (1'b1 == o_data_V_id_V_1_ack_in))) begin
            o_data_V_id_V_1_sel_wr <= ~o_data_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_id_V_1_vld_in) & (1'b1 == o_data_V_id_V_1_ack_out) & (2'd3 == o_data_V_id_V_1_state)) | ((1'b0 == o_data_V_id_V_1_vld_in) & (2'd2 == o_data_V_id_V_1_state)))) begin
            o_data_V_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_id_V_1_vld_in) & (1'b0 == o_data_V_id_V_1_ack_out) & (2'd3 == o_data_V_id_V_1_state)) | ((1'b0 == o_data_V_id_V_1_ack_out) & (2'd1 == o_data_V_id_V_1_state)))) begin
            o_data_V_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_id_V_1_vld_in) & (2'd2 == o_data_V_id_V_1_state)) | ((1'b1 == o_data_V_id_V_1_ack_out) & (2'd1 == o_data_V_id_V_1_state)) | ((2'd3 == o_data_V_id_V_1_state) & ~((1'b1 == o_data_V_id_V_1_vld_in) & (1'b0 == o_data_V_id_V_1_ack_out)) & ~((1'b0 == o_data_V_id_V_1_vld_in) & (1'b1 == o_data_V_id_V_1_ack_out))))) begin
            o_data_V_id_V_1_state <= 2'd3;
        end else begin
            o_data_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_keep_V_1_ack_out) & (1'b1 == o_data_V_keep_V_1_vld_out))) begin
            o_data_V_keep_V_1_sel_rd <= ~o_data_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_keep_V_1_vld_in) & (1'b1 == o_data_V_keep_V_1_ack_in))) begin
            o_data_V_keep_V_1_sel_wr <= ~o_data_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_keep_V_1_vld_in) & (1'b1 == o_data_V_keep_V_1_ack_out) & (2'd3 == o_data_V_keep_V_1_state)) | ((1'b0 == o_data_V_keep_V_1_vld_in) & (2'd2 == o_data_V_keep_V_1_state)))) begin
            o_data_V_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_keep_V_1_vld_in) & (1'b0 == o_data_V_keep_V_1_ack_out) & (2'd3 == o_data_V_keep_V_1_state)) | ((1'b0 == o_data_V_keep_V_1_ack_out) & (2'd1 == o_data_V_keep_V_1_state)))) begin
            o_data_V_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_keep_V_1_vld_in) & (2'd2 == o_data_V_keep_V_1_state)) | ((1'b1 == o_data_V_keep_V_1_ack_out) & (2'd1 == o_data_V_keep_V_1_state)) | ((2'd3 == o_data_V_keep_V_1_state) & ~((1'b1 == o_data_V_keep_V_1_vld_in) & (1'b0 == o_data_V_keep_V_1_ack_out)) & ~((1'b0 == o_data_V_keep_V_1_vld_in) & (1'b1 == o_data_V_keep_V_1_ack_out))))) begin
            o_data_V_keep_V_1_state <= 2'd3;
        end else begin
            o_data_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_last_V_1_ack_out) & (1'b1 == o_data_V_last_V_1_vld_out))) begin
            o_data_V_last_V_1_sel_rd <= ~o_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_last_V_1_vld_in) & (1'b1 == o_data_V_last_V_1_ack_in))) begin
            o_data_V_last_V_1_sel_wr <= ~o_data_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_last_V_1_vld_in) & (1'b1 == o_data_V_last_V_1_ack_out) & (2'd3 == o_data_V_last_V_1_state)) | ((1'b0 == o_data_V_last_V_1_vld_in) & (2'd2 == o_data_V_last_V_1_state)))) begin
            o_data_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_last_V_1_vld_in) & (1'b0 == o_data_V_last_V_1_ack_out) & (2'd3 == o_data_V_last_V_1_state)) | ((1'b0 == o_data_V_last_V_1_ack_out) & (2'd1 == o_data_V_last_V_1_state)))) begin
            o_data_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_last_V_1_vld_in) & (2'd2 == o_data_V_last_V_1_state)) | ((1'b1 == o_data_V_last_V_1_ack_out) & (2'd1 == o_data_V_last_V_1_state)) | ((2'd3 == o_data_V_last_V_1_state) & ~((1'b1 == o_data_V_last_V_1_vld_in) & (1'b0 == o_data_V_last_V_1_ack_out)) & ~((1'b0 == o_data_V_last_V_1_vld_in) & (1'b1 == o_data_V_last_V_1_ack_out))))) begin
            o_data_V_last_V_1_state <= 2'd3;
        end else begin
            o_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_strb_V_1_ack_out) & (1'b1 == o_data_V_strb_V_1_vld_out))) begin
            o_data_V_strb_V_1_sel_rd <= ~o_data_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_strb_V_1_vld_in) & (1'b1 == o_data_V_strb_V_1_ack_in))) begin
            o_data_V_strb_V_1_sel_wr <= ~o_data_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_strb_V_1_vld_in) & (1'b1 == o_data_V_strb_V_1_ack_out) & (2'd3 == o_data_V_strb_V_1_state)) | ((1'b0 == o_data_V_strb_V_1_vld_in) & (2'd2 == o_data_V_strb_V_1_state)))) begin
            o_data_V_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_strb_V_1_vld_in) & (1'b0 == o_data_V_strb_V_1_ack_out) & (2'd3 == o_data_V_strb_V_1_state)) | ((1'b0 == o_data_V_strb_V_1_ack_out) & (2'd1 == o_data_V_strb_V_1_state)))) begin
            o_data_V_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_strb_V_1_vld_in) & (2'd2 == o_data_V_strb_V_1_state)) | ((1'b1 == o_data_V_strb_V_1_ack_out) & (2'd1 == o_data_V_strb_V_1_state)) | ((2'd3 == o_data_V_strb_V_1_state) & ~((1'b1 == o_data_V_strb_V_1_vld_in) & (1'b0 == o_data_V_strb_V_1_ack_out)) & ~((1'b0 == o_data_V_strb_V_1_vld_in) & (1'b1 == o_data_V_strb_V_1_ack_out))))) begin
            o_data_V_strb_V_1_state <= 2'd3;
        end else begin
            o_data_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_user_V_1_ack_out) & (1'b1 == o_data_V_user_V_1_vld_out))) begin
            o_data_V_user_V_1_sel_rd <= ~o_data_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == o_data_V_user_V_1_vld_in) & (1'b1 == o_data_V_user_V_1_ack_in))) begin
            o_data_V_user_V_1_sel_wr <= ~o_data_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        o_data_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == o_data_V_user_V_1_vld_in) & (1'b1 == o_data_V_user_V_1_ack_out) & (2'd3 == o_data_V_user_V_1_state)) | ((1'b0 == o_data_V_user_V_1_vld_in) & (2'd2 == o_data_V_user_V_1_state)))) begin
            o_data_V_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == o_data_V_user_V_1_vld_in) & (1'b0 == o_data_V_user_V_1_ack_out) & (2'd3 == o_data_V_user_V_1_state)) | ((1'b0 == o_data_V_user_V_1_ack_out) & (2'd1 == o_data_V_user_V_1_state)))) begin
            o_data_V_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == o_data_V_user_V_1_vld_in) & (2'd2 == o_data_V_user_V_1_state)) | ((1'b1 == o_data_V_user_V_1_ack_out) & (2'd1 == o_data_V_user_V_1_state)) | ((2'd3 == o_data_V_user_V_1_state) & ~((1'b1 == o_data_V_user_V_1_vld_in) & (1'b0 == o_data_V_user_V_1_ack_out)) & ~((1'b0 == o_data_V_user_V_1_vld_in) & (1'b1 == o_data_V_user_V_1_ack_out))))) begin
            o_data_V_user_V_1_state <= 2'd3;
        end else begin
            o_data_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pulse_metadata_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == pulse_metadata_V_0_ack_out) & (1'b1 == pulse_metadata_V_0_vld_out))) begin
            pulse_metadata_V_0_sel_rd <= ~pulse_metadata_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pulse_metadata_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == pulse_metadata_V_0_vld_in) & (1'b1 == pulse_metadata_V_0_ack_in))) begin
            pulse_metadata_V_0_sel_wr <= ~pulse_metadata_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pulse_metadata_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == pulse_metadata_V_0_vld_in) & (1'b1 == pulse_metadata_V_0_ack_out) & (2'd3 == pulse_metadata_V_0_state)) | ((1'b0 == pulse_metadata_V_0_vld_in) & (2'd2 == pulse_metadata_V_0_state)))) begin
            pulse_metadata_V_0_state <= 2'd2;
        end else if ((((1'b1 == pulse_metadata_V_0_vld_in) & (1'b0 == pulse_metadata_V_0_ack_out) & (2'd3 == pulse_metadata_V_0_state)) | ((1'b0 == pulse_metadata_V_0_ack_out) & (2'd1 == pulse_metadata_V_0_state)))) begin
            pulse_metadata_V_0_state <= 2'd1;
        end else if ((((1'b1 == pulse_metadata_V_0_vld_in) & (2'd2 == pulse_metadata_V_0_state)) | ((1'b1 == pulse_metadata_V_0_ack_out) & (2'd1 == pulse_metadata_V_0_state)) | ((2'd3 == pulse_metadata_V_0_state) & ~((1'b1 == pulse_metadata_V_0_vld_in) & (1'b0 == pulse_metadata_V_0_ack_out)) & ~((1'b0 == pulse_metadata_V_0_vld_in) & (1'b1 == pulse_metadata_V_0_ack_out))))) begin
            pulse_metadata_V_0_state <= 2'd3;
        end else begin
            pulse_metadata_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'd0 == terminate_fu_399_p1))) begin
        in_a_pulse_fu_80 <= grp_handle_header_fu_161_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)))) begin
        in_a_pulse_fu_80 <= in_a_pulse_2_reg_549;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_a_pulse_fu_80 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'd0 == terminate_fu_399_p1))) begin
        in_a_pulse_group_fu_84 <= grp_handle_header_fu_161_ap_return_2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)))) begin
        in_a_pulse_group_fu_84 <= in_a_pulse_group_3_reg_544;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_a_pulse_group_fu_84 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'd0 == terminate_fu_399_p1))) begin
        last_pulse_fu_92 <= grp_handle_header_fu_161_ap_return_3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        last_pulse_fu_92 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'd0 == terminate_fu_399_p1))) begin
        num_samples_fu_96 <= grp_handle_header_fu_161_ap_return_4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_samples_fu_96 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'd0 == terminate_fu_399_p1))) begin
        sample_counter_fu_88 <= grp_handle_header_fu_161_ap_return_5;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)))) begin
        sample_counter_fu_88 <= sample_counter_1_fu_368_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sample_counter_fu_88 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_2_fu_269_p3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        brmerge_reg_554 <= brmerge_fu_341_p2;
        in_a_pulse_2_reg_549 <= in_a_pulse_2_fu_323_p2;
        in_a_pulse_group_3_reg_544 <= in_a_pulse_group_3_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)) & (1'd1 == tmp_2_fu_269_p3))) begin
        flags_read_reg_573 <= flags;
        pos_enc_0_read_reg_563 <= pos_enc_0;
        pos_enc_1_read_reg_568 <= pos_enc_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_data_V_0_load_A)) begin
        i_data_V_data_V_0_payload_A <= i_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_data_V_0_load_B)) begin
        i_data_V_data_V_0_payload_B <= i_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_dest_V_0_load_A)) begin
        i_data_V_dest_V_0_payload_A <= i_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_dest_V_0_load_B)) begin
        i_data_V_dest_V_0_payload_B <= i_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_id_V_0_load_A)) begin
        i_data_V_id_V_0_payload_A <= i_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_id_V_0_load_B)) begin
        i_data_V_id_V_0_payload_B <= i_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_keep_V_0_load_A)) begin
        i_data_V_keep_V_0_payload_A <= i_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_keep_V_0_load_B)) begin
        i_data_V_keep_V_0_payload_B <= i_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_last_V_0_load_A)) begin
        i_data_V_last_V_0_payload_A <= i_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_last_V_0_load_B)) begin
        i_data_V_last_V_0_payload_B <= i_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_strb_V_0_load_A)) begin
        i_data_V_strb_V_0_payload_A <= i_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_strb_V_0_load_B)) begin
        i_data_V_strb_V_0_payload_B <= i_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_user_V_0_load_A)) begin
        i_data_V_user_V_0_payload_A <= i_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == i_data_V_user_V_0_load_B)) begin
        i_data_V_user_V_0_payload_B <= i_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        in_a_pulse_group_loa_reg_524 <= in_a_pulse_group_fu_84;
        in_a_pulse_load_reg_519 <= in_a_pulse_fu_80;
        last_pulse_load_reg_534 <= last_pulse_fu_92;
        num_samples_load_reg_539 <= num_samples_fu_96;
        sample_counter_load_1_reg_529 <= sample_counter_fu_88;
        tmp_2_reg_515 <= i_data_V_user_V_0_data_out[32'd72];
        tmp_data_V_reg_474 <= i_data_V_data_V_0_data_out;
        tmp_dest_V_reg_509 <= i_data_V_dest_V_0_data_out;
        tmp_id_V_reg_503 <= i_data_V_id_V_0_data_out;
        tmp_keep_V_reg_480 <= i_data_V_keep_V_0_data_out;
        tmp_last_V_reg_497 <= i_data_V_last_V_0_data_out;
        tmp_strb_V_reg_486 <= i_data_V_strb_V_0_data_out;
        tmp_user_V_1_reg_492 <= i_data_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_data_V_1_load_A)) begin
        o_data_V_data_V_1_payload_A <= o_data_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_data_V_1_load_B)) begin
        o_data_V_data_V_1_payload_B <= o_data_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_dest_V_1_load_A)) begin
        o_data_V_dest_V_1_payload_A <= o_data_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_dest_V_1_load_B)) begin
        o_data_V_dest_V_1_payload_B <= o_data_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_id_V_1_load_A)) begin
        o_data_V_id_V_1_payload_A <= o_data_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_id_V_1_load_B)) begin
        o_data_V_id_V_1_payload_B <= o_data_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_keep_V_1_load_A)) begin
        o_data_V_keep_V_1_payload_A <= o_data_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_keep_V_1_load_B)) begin
        o_data_V_keep_V_1_payload_B <= o_data_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_last_V_1_load_A)) begin
        o_data_V_last_V_1_payload_A <= o_data_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_last_V_1_load_B)) begin
        o_data_V_last_V_1_payload_B <= o_data_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_strb_V_1_load_A)) begin
        o_data_V_strb_V_1_payload_A <= o_data_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_strb_V_1_load_B)) begin
        o_data_V_strb_V_1_payload_B <= o_data_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_user_V_1_load_A)) begin
        o_data_V_user_V_1_payload_A <= o_data_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == o_data_V_user_V_1_load_B)) begin
        o_data_V_user_V_1_payload_B <= o_data_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == pulse_metadata_V_0_load_A)) begin
        pulse_metadata_V_0_payload_A <= pulse_metadata_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == pulse_metadata_V_0_load_B)) begin
        pulse_metadata_V_0_payload_B <= pulse_metadata_V_TDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~((1'b0 == o_data_V_data_V_1_ack_in) | (1'b0 == o_data_V_keep_V_1_ack_in) | (1'b0 == o_data_V_strb_V_1_ack_in) | (1'b0 == o_data_V_user_V_1_ack_in) | (1'b0 == o_data_V_last_V_1_ack_in) | (1'b0 == o_data_V_id_V_1_ack_in) | (1'b0 == o_data_V_dest_V_1_ack_in)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~((1'b0 == o_data_V_data_V_1_ack_in) | (1'b0 == o_data_V_keep_V_1_ack_in) | (1'b0 == o_data_V_strb_V_1_ack_in) | (1'b0 == o_data_V_user_V_1_ack_in) | (1'b0 == o_data_V_last_V_1_ack_in) | (1'b0 == o_data_V_id_V_1_ack_in) | (1'b0 == o_data_V_dest_V_1_ack_in)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_data_TDATA_blk_n = i_data_V_data_V_0_state[1'd0];
    end else begin
        i_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        i_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_V_data_V_0_sel)) begin
        i_data_V_data_V_0_data_out = i_data_V_data_V_0_payload_B;
    end else begin
        i_data_V_data_V_0_data_out = i_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        i_data_V_dest_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_V_dest_V_0_sel)) begin
        i_data_V_dest_V_0_data_out = i_data_V_dest_V_0_payload_B;
    end else begin
        i_data_V_dest_V_0_data_out = i_data_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        i_data_V_id_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_V_id_V_0_sel)) begin
        i_data_V_id_V_0_data_out = i_data_V_id_V_0_payload_B;
    end else begin
        i_data_V_id_V_0_data_out = i_data_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        i_data_V_keep_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_V_keep_V_0_sel)) begin
        i_data_V_keep_V_0_data_out = i_data_V_keep_V_0_payload_B;
    end else begin
        i_data_V_keep_V_0_data_out = i_data_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        i_data_V_last_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_V_last_V_0_sel)) begin
        i_data_V_last_V_0_data_out = i_data_V_last_V_0_payload_B;
    end else begin
        i_data_V_last_V_0_data_out = i_data_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        i_data_V_strb_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_V_strb_V_0_sel)) begin
        i_data_V_strb_V_0_data_out = i_data_V_strb_V_0_payload_B;
    end else begin
        i_data_V_strb_V_0_data_out = i_data_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        i_data_V_user_V_0_ack_out = 1'b1;
    end else begin
        i_data_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == i_data_V_user_V_0_sel)) begin
        i_data_V_user_V_0_data_out = i_data_V_user_V_0_payload_B;
    end else begin
        i_data_V_user_V_0_data_out = i_data_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_2_fu_269_p3) & (1'd1 == brmerge_fu_341_p2)) | ((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_2_reg_515) & (1'd1 == brmerge_reg_554)))) begin
        o_data_TDATA_blk_n = o_data_V_data_V_1_state[1'd1];
    end else begin
        o_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & (i_data_V_data_V_0_vld_out == 1'b1))) begin
        o_data_V_data_V_1_data_in = i_data_V_data_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & (1'b1 == grp_handle_header_fu_161_o_data_TVALID))) begin
        o_data_V_data_V_1_data_in = grp_handle_header_fu_161_o_data_TDATA;
    end else begin
        o_data_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_V_data_V_1_sel)) begin
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_B;
    end else begin
        o_data_V_data_V_1_data_out = o_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        o_data_V_data_V_1_vld_in = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515))) begin
        o_data_V_data_V_1_vld_in = grp_handle_header_fu_161_o_data_TVALID;
    end else begin
        o_data_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & (i_data_V_data_V_0_vld_out == 1'b1))) begin
        o_data_V_dest_V_1_data_in = i_data_V_dest_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & (1'b1 == grp_handle_header_fu_161_o_data_TVALID))) begin
        o_data_V_dest_V_1_data_in = grp_handle_header_fu_161_o_data_TDEST;
    end else begin
        o_data_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_V_dest_V_1_sel)) begin
        o_data_V_dest_V_1_data_out = o_data_V_dest_V_1_payload_B;
    end else begin
        o_data_V_dest_V_1_data_out = o_data_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        o_data_V_dest_V_1_vld_in = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515))) begin
        o_data_V_dest_V_1_vld_in = grp_handle_header_fu_161_o_data_TVALID;
    end else begin
        o_data_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & (i_data_V_data_V_0_vld_out == 1'b1))) begin
        o_data_V_id_V_1_data_in = i_data_V_id_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & (1'b1 == grp_handle_header_fu_161_o_data_TVALID))) begin
        o_data_V_id_V_1_data_in = grp_handle_header_fu_161_o_data_TID;
    end else begin
        o_data_V_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_V_id_V_1_sel)) begin
        o_data_V_id_V_1_data_out = o_data_V_id_V_1_payload_B;
    end else begin
        o_data_V_id_V_1_data_out = o_data_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        o_data_V_id_V_1_vld_in = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515))) begin
        o_data_V_id_V_1_vld_in = grp_handle_header_fu_161_o_data_TVALID;
    end else begin
        o_data_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & (i_data_V_data_V_0_vld_out == 1'b1))) begin
        o_data_V_keep_V_1_data_in = i_data_V_keep_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & (1'b1 == grp_handle_header_fu_161_o_data_TVALID))) begin
        o_data_V_keep_V_1_data_in = grp_handle_header_fu_161_o_data_TKEEP;
    end else begin
        o_data_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_V_keep_V_1_sel)) begin
        o_data_V_keep_V_1_data_out = o_data_V_keep_V_1_payload_B;
    end else begin
        o_data_V_keep_V_1_data_out = o_data_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        o_data_V_keep_V_1_vld_in = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515))) begin
        o_data_V_keep_V_1_vld_in = grp_handle_header_fu_161_o_data_TVALID;
    end else begin
        o_data_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & (i_data_V_data_V_0_vld_out == 1'b1))) begin
        o_data_V_last_V_1_data_in = i_data_V_last_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & (1'b1 == grp_handle_header_fu_161_o_data_TVALID))) begin
        o_data_V_last_V_1_data_in = grp_handle_header_fu_161_o_data_TLAST;
    end else begin
        o_data_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_V_last_V_1_sel)) begin
        o_data_V_last_V_1_data_out = o_data_V_last_V_1_payload_B;
    end else begin
        o_data_V_last_V_1_data_out = o_data_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        o_data_V_last_V_1_vld_in = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515))) begin
        o_data_V_last_V_1_vld_in = grp_handle_header_fu_161_o_data_TVALID;
    end else begin
        o_data_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & (i_data_V_data_V_0_vld_out == 1'b1))) begin
        o_data_V_strb_V_1_data_in = i_data_V_strb_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & (1'b1 == grp_handle_header_fu_161_o_data_TVALID))) begin
        o_data_V_strb_V_1_data_in = grp_handle_header_fu_161_o_data_TSTRB;
    end else begin
        o_data_V_strb_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_V_strb_V_1_sel)) begin
        o_data_V_strb_V_1_data_out = o_data_V_strb_V_1_payload_B;
    end else begin
        o_data_V_strb_V_1_data_out = o_data_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        o_data_V_strb_V_1_vld_in = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515))) begin
        o_data_V_strb_V_1_vld_in = grp_handle_header_fu_161_o_data_TVALID;
    end else begin
        o_data_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & (i_data_V_data_V_0_vld_out == 1'b1))) begin
        o_data_V_user_V_1_data_in = p_Result_1_fu_357_p4;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & (1'b1 == grp_handle_header_fu_161_o_data_TVALID))) begin
        o_data_V_user_V_1_data_in = grp_handle_header_fu_161_o_data_TUSER;
    end else begin
        o_data_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == o_data_V_user_V_1_sel)) begin
        o_data_V_user_V_1_data_out = o_data_V_user_V_1_payload_B;
    end else begin
        o_data_V_user_V_1_data_out = o_data_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_predicate_op71_write_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
        o_data_V_user_V_1_vld_in = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515))) begin
        o_data_V_user_V_1_vld_in = grp_handle_header_fu_161_o_data_TVALID;
    end else begin
        o_data_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == pulse_metadata_V_0_sel)) begin
        pulse_metadata_V_0_data_out = pulse_metadata_V_0_payload_B;
    end else begin
        pulse_metadata_V_0_data_out = pulse_metadata_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == i_data_V_data_V_0_vld_out) | (1'b1 == ap_block_state3_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)) & ((1'd0 == tmp_2_reg_515) | (1'd0 == terminate_fu_399_p1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_2_reg_515) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'd1 == terminate_fu_399_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ~((1'b0 == o_data_V_data_V_1_ack_in) | (1'b0 == o_data_V_keep_V_1_ack_in) | (1'b0 == o_data_V_strb_V_1_ack_in) | (1'b0 == o_data_V_user_V_1_ack_in) | (1'b0 == o_data_V_last_V_1_ack_in) | (1'b0 == o_data_V_id_V_1_ack_in) | (1'b0 == o_data_V_dest_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state3_io = ((1'b0 == o_data_V_data_V_1_ack_in) & (1'b1 == ap_predicate_op71_write_state3));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == o_data_V_data_V_1_ack_in) & (1'b1 == ap_predicate_op76_write_state4));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((1'd1 == tmp_2_reg_515) & (1'b0 == grp_handle_header_fu_161_ap_done));
end

always @ (*) begin
    ap_block_state5 = ((1'b0 == o_data_V_data_V_1_ack_in) | (1'b0 == o_data_V_keep_V_1_ack_in) | (1'b0 == o_data_V_strb_V_1_ack_in) | (1'b0 == o_data_V_user_V_1_ack_in) | (1'b0 == o_data_V_last_V_1_ack_in) | (1'b0 == o_data_V_id_V_1_ack_in) | (1'b0 == o_data_V_dest_V_1_ack_in));
end

always @ (*) begin
    ap_predicate_op71_write_state3 = ((1'd0 == tmp_2_fu_269_p3) & (1'd1 == brmerge_fu_341_p2));
end

always @ (*) begin
    ap_predicate_op76_write_state4 = ((1'd0 == tmp_2_reg_515) & (1'd1 == brmerge_reg_554));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge_fu_341_p2 = (tmp_fu_335_p2 | p_in_a_pulse_group_de_fu_299_p2);

assign grp_handle_header_fu_161_ap_start = ap_reg_grp_handle_header_fu_161_ap_start;

assign grp_handle_header_fu_161_in_a_pulse_group_rea = in_a_pulse_group_loa_reg_524;

assign grp_handle_header_fu_161_in_a_pulse_read = in_a_pulse_load_reg_519;

assign grp_handle_header_fu_161_last_pulse_read = last_pulse_load_reg_534;

assign grp_handle_header_fu_161_o_data_TREADY = o_data_V_dest_V_1_state[1'd1];

assign grp_handle_header_fu_161_pulse_metadata_V_TVALID = pulse_metadata_V_0_state[1'd0];

assign i_data_TREADY = i_data_V_dest_V_0_state[1'd1];

assign i_data_V_data_V_0_ack_in = i_data_V_data_V_0_state[1'd1];

assign i_data_V_data_V_0_load_A = (i_data_V_data_V_0_state_cmp_full & ~i_data_V_data_V_0_sel_wr);

assign i_data_V_data_V_0_load_B = (i_data_V_data_V_0_sel_wr & i_data_V_data_V_0_state_cmp_full);

assign i_data_V_data_V_0_sel = i_data_V_data_V_0_sel_rd;

assign i_data_V_data_V_0_state_cmp_full = ((i_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_V_data_V_0_vld_in = i_data_TVALID;

assign i_data_V_data_V_0_vld_out = i_data_V_data_V_0_state[1'd0];

assign i_data_V_dest_V_0_ack_in = i_data_V_dest_V_0_state[1'd1];

assign i_data_V_dest_V_0_load_A = (i_data_V_dest_V_0_state_cmp_full & ~i_data_V_dest_V_0_sel_wr);

assign i_data_V_dest_V_0_load_B = (i_data_V_dest_V_0_sel_wr & i_data_V_dest_V_0_state_cmp_full);

assign i_data_V_dest_V_0_sel = i_data_V_dest_V_0_sel_rd;

assign i_data_V_dest_V_0_state_cmp_full = ((i_data_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_V_dest_V_0_vld_in = i_data_TVALID;

assign i_data_V_dest_V_0_vld_out = i_data_V_dest_V_0_state[1'd0];

assign i_data_V_id_V_0_ack_in = i_data_V_id_V_0_state[1'd1];

assign i_data_V_id_V_0_load_A = (i_data_V_id_V_0_state_cmp_full & ~i_data_V_id_V_0_sel_wr);

assign i_data_V_id_V_0_load_B = (i_data_V_id_V_0_sel_wr & i_data_V_id_V_0_state_cmp_full);

assign i_data_V_id_V_0_sel = i_data_V_id_V_0_sel_rd;

assign i_data_V_id_V_0_state_cmp_full = ((i_data_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_V_id_V_0_vld_in = i_data_TVALID;

assign i_data_V_id_V_0_vld_out = i_data_V_id_V_0_state[1'd0];

assign i_data_V_keep_V_0_ack_in = i_data_V_keep_V_0_state[1'd1];

assign i_data_V_keep_V_0_load_A = (i_data_V_keep_V_0_state_cmp_full & ~i_data_V_keep_V_0_sel_wr);

assign i_data_V_keep_V_0_load_B = (i_data_V_keep_V_0_sel_wr & i_data_V_keep_V_0_state_cmp_full);

assign i_data_V_keep_V_0_sel = i_data_V_keep_V_0_sel_rd;

assign i_data_V_keep_V_0_state_cmp_full = ((i_data_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_V_keep_V_0_vld_in = i_data_TVALID;

assign i_data_V_keep_V_0_vld_out = i_data_V_keep_V_0_state[1'd0];

assign i_data_V_last_V_0_ack_in = i_data_V_last_V_0_state[1'd1];

assign i_data_V_last_V_0_load_A = (i_data_V_last_V_0_state_cmp_full & ~i_data_V_last_V_0_sel_wr);

assign i_data_V_last_V_0_load_B = (i_data_V_last_V_0_sel_wr & i_data_V_last_V_0_state_cmp_full);

assign i_data_V_last_V_0_sel = i_data_V_last_V_0_sel_rd;

assign i_data_V_last_V_0_state_cmp_full = ((i_data_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_V_last_V_0_vld_in = i_data_TVALID;

assign i_data_V_last_V_0_vld_out = i_data_V_last_V_0_state[1'd0];

assign i_data_V_strb_V_0_ack_in = i_data_V_strb_V_0_state[1'd1];

assign i_data_V_strb_V_0_load_A = (i_data_V_strb_V_0_state_cmp_full & ~i_data_V_strb_V_0_sel_wr);

assign i_data_V_strb_V_0_load_B = (i_data_V_strb_V_0_sel_wr & i_data_V_strb_V_0_state_cmp_full);

assign i_data_V_strb_V_0_sel = i_data_V_strb_V_0_sel_rd;

assign i_data_V_strb_V_0_state_cmp_full = ((i_data_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_V_strb_V_0_vld_in = i_data_TVALID;

assign i_data_V_strb_V_0_vld_out = i_data_V_strb_V_0_state[1'd0];

assign i_data_V_user_V_0_ack_in = i_data_V_user_V_0_state[1'd1];

assign i_data_V_user_V_0_load_A = (i_data_V_user_V_0_state_cmp_full & ~i_data_V_user_V_0_sel_wr);

assign i_data_V_user_V_0_load_B = (i_data_V_user_V_0_sel_wr & i_data_V_user_V_0_state_cmp_full);

assign i_data_V_user_V_0_sel = i_data_V_user_V_0_sel_rd;

assign i_data_V_user_V_0_state_cmp_full = ((i_data_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign i_data_V_user_V_0_vld_in = i_data_TVALID;

assign i_data_V_user_V_0_vld_out = i_data_V_user_V_0_state[1'd0];

assign in_a_pulse_2_fu_323_p2 = (in_a_pulse_fu_80 & not_tmp_1_fu_317_p2);

assign in_a_pulse_group_3_fu_311_p2 = (in_a_pulse_group_fu_84 & p_in_a_pulse_group_fu_305_p2);

assign in_a_pulse_group_not_fu_329_p2 = (in_a_pulse_group_fu_84 ^ 1'd1);

assign not_tmp_1_fu_317_p2 = (tmp_1_fu_293_p2 ^ 1'd1);

assign o_data_TDATA = o_data_V_data_V_1_data_out;

assign o_data_TDEST = o_data_V_dest_V_1_data_out;

assign o_data_TID = o_data_V_id_V_1_data_out;

assign o_data_TKEEP = o_data_V_keep_V_1_data_out;

assign o_data_TLAST = o_data_V_last_V_1_data_out;

assign o_data_TSTRB = o_data_V_strb_V_1_data_out;

assign o_data_TUSER = o_data_V_user_V_1_data_out;

assign o_data_TVALID = o_data_V_dest_V_1_state[1'd0];

assign o_data_V_data_V_1_ack_in = o_data_V_data_V_1_state[1'd1];

assign o_data_V_data_V_1_ack_out = o_data_TREADY;

assign o_data_V_data_V_1_load_A = (o_data_V_data_V_1_state_cmp_full & ~o_data_V_data_V_1_sel_wr);

assign o_data_V_data_V_1_load_B = (o_data_V_data_V_1_sel_wr & o_data_V_data_V_1_state_cmp_full);

assign o_data_V_data_V_1_sel = o_data_V_data_V_1_sel_rd;

assign o_data_V_data_V_1_state_cmp_full = ((o_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_data_V_1_vld_out = o_data_V_data_V_1_state[1'd0];

assign o_data_V_dest_V_1_ack_in = o_data_V_dest_V_1_state[1'd1];

assign o_data_V_dest_V_1_ack_out = o_data_TREADY;

assign o_data_V_dest_V_1_load_A = (o_data_V_dest_V_1_state_cmp_full & ~o_data_V_dest_V_1_sel_wr);

assign o_data_V_dest_V_1_load_B = (o_data_V_dest_V_1_sel_wr & o_data_V_dest_V_1_state_cmp_full);

assign o_data_V_dest_V_1_sel = o_data_V_dest_V_1_sel_rd;

assign o_data_V_dest_V_1_state_cmp_full = ((o_data_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_dest_V_1_vld_out = o_data_V_dest_V_1_state[1'd0];

assign o_data_V_id_V_1_ack_in = o_data_V_id_V_1_state[1'd1];

assign o_data_V_id_V_1_ack_out = o_data_TREADY;

assign o_data_V_id_V_1_load_A = (o_data_V_id_V_1_state_cmp_full & ~o_data_V_id_V_1_sel_wr);

assign o_data_V_id_V_1_load_B = (o_data_V_id_V_1_sel_wr & o_data_V_id_V_1_state_cmp_full);

assign o_data_V_id_V_1_sel = o_data_V_id_V_1_sel_rd;

assign o_data_V_id_V_1_state_cmp_full = ((o_data_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_id_V_1_vld_out = o_data_V_id_V_1_state[1'd0];

assign o_data_V_keep_V_1_ack_in = o_data_V_keep_V_1_state[1'd1];

assign o_data_V_keep_V_1_ack_out = o_data_TREADY;

assign o_data_V_keep_V_1_load_A = (o_data_V_keep_V_1_state_cmp_full & ~o_data_V_keep_V_1_sel_wr);

assign o_data_V_keep_V_1_load_B = (o_data_V_keep_V_1_sel_wr & o_data_V_keep_V_1_state_cmp_full);

assign o_data_V_keep_V_1_sel = o_data_V_keep_V_1_sel_rd;

assign o_data_V_keep_V_1_state_cmp_full = ((o_data_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_keep_V_1_vld_out = o_data_V_keep_V_1_state[1'd0];

assign o_data_V_last_V_1_ack_in = o_data_V_last_V_1_state[1'd1];

assign o_data_V_last_V_1_ack_out = o_data_TREADY;

assign o_data_V_last_V_1_load_A = (o_data_V_last_V_1_state_cmp_full & ~o_data_V_last_V_1_sel_wr);

assign o_data_V_last_V_1_load_B = (o_data_V_last_V_1_sel_wr & o_data_V_last_V_1_state_cmp_full);

assign o_data_V_last_V_1_sel = o_data_V_last_V_1_sel_rd;

assign o_data_V_last_V_1_state_cmp_full = ((o_data_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_last_V_1_vld_out = o_data_V_last_V_1_state[1'd0];

assign o_data_V_strb_V_1_ack_in = o_data_V_strb_V_1_state[1'd1];

assign o_data_V_strb_V_1_ack_out = o_data_TREADY;

assign o_data_V_strb_V_1_load_A = (o_data_V_strb_V_1_state_cmp_full & ~o_data_V_strb_V_1_sel_wr);

assign o_data_V_strb_V_1_load_B = (o_data_V_strb_V_1_sel_wr & o_data_V_strb_V_1_state_cmp_full);

assign o_data_V_strb_V_1_sel = o_data_V_strb_V_1_sel_rd;

assign o_data_V_strb_V_1_state_cmp_full = ((o_data_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_strb_V_1_vld_out = o_data_V_strb_V_1_state[1'd0];

assign o_data_V_user_V_1_ack_in = o_data_V_user_V_1_state[1'd1];

assign o_data_V_user_V_1_ack_out = o_data_TREADY;

assign o_data_V_user_V_1_load_A = (o_data_V_user_V_1_state_cmp_full & ~o_data_V_user_V_1_sel_wr);

assign o_data_V_user_V_1_load_B = (o_data_V_user_V_1_sel_wr & o_data_V_user_V_1_state_cmp_full);

assign o_data_V_user_V_1_sel = o_data_V_user_V_1_sel_rd;

assign o_data_V_user_V_1_state_cmp_full = ((o_data_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign o_data_V_user_V_1_vld_out = o_data_V_user_V_1_state[1'd0];

always @ (*) begin
    p_Result_1_fu_357_p4 = p_Result_s_fu_347_p4;
    p_Result_1_fu_357_p4[32'd72] = |(1'd0);
end

always @ (*) begin
    p_Result_s_fu_347_p4 = i_data_V_user_V_0_data_out;
    p_Result_s_fu_347_p4[32'd64] = |(in_a_pulse_2_fu_323_p2);
end

assign p_in_a_pulse_group_de_fu_299_p2 = (tmp_1_fu_293_p2 & last_pulse_fu_92);

assign p_in_a_pulse_group_fu_305_p2 = (p_in_a_pulse_group_de_fu_299_p2 ^ 1'd1);

assign pulse_metadata_V_0_ack_in = pulse_metadata_V_0_state[1'd1];

assign pulse_metadata_V_0_ack_out = grp_handle_header_fu_161_pulse_metadata_V_TREADY;

assign pulse_metadata_V_0_load_A = (pulse_metadata_V_0_state_cmp_full & ~pulse_metadata_V_0_sel_wr);

assign pulse_metadata_V_0_load_B = (pulse_metadata_V_0_sel_wr & pulse_metadata_V_0_state_cmp_full);

assign pulse_metadata_V_0_sel = pulse_metadata_V_0_sel_rd;

assign pulse_metadata_V_0_state_cmp_full = ((pulse_metadata_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign pulse_metadata_V_0_vld_in = pulse_metadata_V_TVALID;

assign pulse_metadata_V_0_vld_out = pulse_metadata_V_0_state[1'd0];

assign pulse_metadata_V_TREADY = pulse_metadata_V_0_state[1'd1];

assign sample_counter_1_fu_368_p2 = (sample_counter_fu_88 + 32'd1);

assign terminate_fu_399_p1 = grp_handle_header_fu_161_ap_return_0;

assign tmp_1_fu_293_p2 = ((sample_counter_fu_88 == num_samples_fu_96) ? 1'b1 : 1'b0);

assign tmp_2_fu_269_p3 = i_data_V_user_V_0_data_out[32'd72];

assign tmp_fu_335_p2 = (in_a_pulse_2_fu_323_p2 | in_a_pulse_group_not_fu_329_p2);

endmodule //hcr_metadata_injector
