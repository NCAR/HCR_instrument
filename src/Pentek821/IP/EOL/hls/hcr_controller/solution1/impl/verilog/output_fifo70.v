// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module output_fifo70 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pulse_queue_ch0_V_dout,
        pulse_queue_ch0_V_empty_n,
        pulse_queue_ch0_V_read,
        pulse_metadata_ch0_V_TDATA,
        pulse_metadata_ch0_V_TVALID,
        pulse_metadata_ch0_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [812:0] pulse_queue_ch0_V_dout;
input   pulse_queue_ch0_V_empty_n;
output   pulse_queue_ch0_V_read;
output  [815:0] pulse_metadata_ch0_V_TDATA;
output   pulse_metadata_ch0_V_TVALID;
input   pulse_metadata_ch0_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pulse_queue_ch0_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [815:0] pulse_metadata_ch0_V_1_data_out;
reg    pulse_metadata_ch0_V_1_vld_in;
wire    pulse_metadata_ch0_V_1_vld_out;
wire    pulse_metadata_ch0_V_1_ack_in;
wire    pulse_metadata_ch0_V_1_ack_out;
reg   [815:0] pulse_metadata_ch0_V_1_payload_A;
reg   [815:0] pulse_metadata_ch0_V_1_payload_B;
reg    pulse_metadata_ch0_V_1_sel_rd;
reg    pulse_metadata_ch0_V_1_sel_wr;
wire    pulse_metadata_ch0_V_1_sel;
wire    pulse_metadata_ch0_V_1_load_A;
wire    pulse_metadata_ch0_V_1_load_B;
reg   [1:0] pulse_metadata_ch0_V_1_state;
wire    pulse_metadata_ch0_V_1_state_cmp_full;
reg    pulse_queue_ch0_V_blk_n;
wire    ap_CS_fsm_state2;
reg    pulse_metadata_ch0_V_TDATA_blk_n;
wire   [0:0] pulse_terminate_fu_65_p3;
wire    ap_CS_fsm_state3;
wire  signed [815:0] cast_fu_85_p1;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [811:0] tmp_38_fu_73_p1;
wire   [812:0] tmp_1_fu_77_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_block_state1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pulse_metadata_ch0_V_1_sel_rd = 1'b0;
#0 pulse_metadata_ch0_V_1_sel_wr = 1'b0;
#0 pulse_metadata_ch0_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == pulse_queue_ch0_V_empty_n) | (1'b0 == pulse_metadata_ch0_V_1_ack_in) | (1'b1 == ap_block_state2_io)) & (1'd1 == pulse_terminate_fu_65_p3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        pulse_metadata_ch0_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == pulse_metadata_ch0_V_1_ack_out) & (1'b1 == pulse_metadata_ch0_V_1_vld_out))) begin
            pulse_metadata_ch0_V_1_sel_rd <= ~pulse_metadata_ch0_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        pulse_metadata_ch0_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == pulse_metadata_ch0_V_1_vld_in) & (1'b1 == pulse_metadata_ch0_V_1_ack_in))) begin
            pulse_metadata_ch0_V_1_sel_wr <= ~pulse_metadata_ch0_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        pulse_metadata_ch0_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == pulse_metadata_ch0_V_1_vld_in) & (1'b1 == pulse_metadata_ch0_V_1_ack_out) & (pulse_metadata_ch0_V_1_state == 2'd3)) | ((1'b0 == pulse_metadata_ch0_V_1_vld_in) & (pulse_metadata_ch0_V_1_state == 2'd2)))) begin
            pulse_metadata_ch0_V_1_state <= 2'd2;
        end else if ((((1'b1 == pulse_metadata_ch0_V_1_vld_in) & (1'b0 == pulse_metadata_ch0_V_1_ack_out) & (pulse_metadata_ch0_V_1_state == 2'd3)) | ((1'b0 == pulse_metadata_ch0_V_1_ack_out) & (pulse_metadata_ch0_V_1_state == 2'd1)))) begin
            pulse_metadata_ch0_V_1_state <= 2'd1;
        end else if ((((1'b1 == pulse_metadata_ch0_V_1_vld_in) & (pulse_metadata_ch0_V_1_state == 2'd2)) | ((1'b1 == pulse_metadata_ch0_V_1_ack_out) & (pulse_metadata_ch0_V_1_state == 2'd1)) | ((pulse_metadata_ch0_V_1_state == 2'd3) & ~((1'b1 == pulse_metadata_ch0_V_1_vld_in) & (1'b0 == pulse_metadata_ch0_V_1_ack_out)) & ~((1'b0 == pulse_metadata_ch0_V_1_vld_in) & (1'b1 == pulse_metadata_ch0_V_1_ack_out))))) begin
            pulse_metadata_ch0_V_1_state <= 2'd3;
        end else begin
            pulse_metadata_ch0_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == pulse_metadata_ch0_V_1_load_A)) begin
        pulse_metadata_ch0_V_1_payload_A <= cast_fu_85_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == pulse_metadata_ch0_V_1_load_B)) begin
        pulse_metadata_ch0_V_1_payload_B <= cast_fu_85_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == pulse_queue_ch0_V_empty_n) | (1'b0 == pulse_metadata_ch0_V_1_ack_in) | (1'b1 == ap_block_state2_io)) & (1'd1 == pulse_terminate_fu_65_p3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == pulse_queue_ch0_V_empty_n) | (1'b0 == pulse_metadata_ch0_V_1_ack_in) | (1'b1 == ap_block_state2_io)) & (1'd1 == pulse_terminate_fu_65_p3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == pulse_metadata_ch0_V_1_sel)) begin
        pulse_metadata_ch0_V_1_data_out = pulse_metadata_ch0_V_1_payload_B;
    end else begin
        pulse_metadata_ch0_V_1_data_out = pulse_metadata_ch0_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == pulse_terminate_fu_65_p3) & ~((1'b0 == pulse_queue_ch0_V_empty_n) | (1'b0 == pulse_metadata_ch0_V_1_ack_in) | (1'b1 == ap_block_state2_io)))) begin
        pulse_metadata_ch0_V_1_vld_in = 1'b1;
    end else begin
        pulse_metadata_ch0_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == pulse_terminate_fu_65_p3)) | (1'b1 == ap_CS_fsm_state3))) begin
        pulse_metadata_ch0_V_TDATA_blk_n = pulse_metadata_ch0_V_1_state[1'd1];
    end else begin
        pulse_metadata_ch0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pulse_queue_ch0_V_blk_n = pulse_queue_ch0_V_empty_n;
    end else begin
        pulse_queue_ch0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == pulse_queue_ch0_V_empty_n) | (1'b0 == pulse_metadata_ch0_V_1_ack_in) | (1'b1 == ap_block_state2_io)))) begin
        pulse_queue_ch0_V_read = 1'b1;
    end else begin
        pulse_queue_ch0_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == pulse_queue_ch0_V_empty_n) | (1'b0 == pulse_metadata_ch0_V_1_ack_in) | (1'b1 == ap_block_state2_io)) & (1'd1 == pulse_terminate_fu_65_p3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == pulse_terminate_fu_65_p3) & ~((1'b0 == pulse_queue_ch0_V_empty_n) | (1'b0 == pulse_metadata_ch0_V_1_ack_in) | (1'b1 == ap_block_state2_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (pulse_metadata_ch0_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == pulse_queue_ch0_V_empty_n) | (1'b0 == pulse_metadata_ch0_V_1_ack_in));
end

always @ (*) begin
    ap_block_state2_io = ((1'd0 == pulse_terminate_fu_65_p3) & (1'b0 == pulse_metadata_ch0_V_1_ack_in));
end

assign cast_fu_85_p1 = $signed(tmp_1_fu_77_p3);

assign pulse_metadata_ch0_V_1_ack_in = pulse_metadata_ch0_V_1_state[1'd1];

assign pulse_metadata_ch0_V_1_ack_out = pulse_metadata_ch0_V_TREADY;

assign pulse_metadata_ch0_V_1_load_A = (pulse_metadata_ch0_V_1_state_cmp_full & ~pulse_metadata_ch0_V_1_sel_wr);

assign pulse_metadata_ch0_V_1_load_B = (pulse_metadata_ch0_V_1_sel_wr & pulse_metadata_ch0_V_1_state_cmp_full);

assign pulse_metadata_ch0_V_1_sel = pulse_metadata_ch0_V_1_sel_rd;

assign pulse_metadata_ch0_V_1_state_cmp_full = ((pulse_metadata_ch0_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign pulse_metadata_ch0_V_1_vld_out = pulse_metadata_ch0_V_1_state[1'd0];

assign pulse_metadata_ch0_V_TDATA = pulse_metadata_ch0_V_1_data_out;

assign pulse_metadata_ch0_V_TVALID = pulse_metadata_ch0_V_1_state[1'd0];

assign pulse_terminate_fu_65_p3 = pulse_queue_ch0_V_dout[32'd812];

assign tmp_1_fu_77_p3 = {{1'd0}, {tmp_38_fu_73_p1}};

assign tmp_38_fu_73_p1 = pulse_queue_ch0_V_dout[811:0];

endmodule //output_fifo70
