// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scheduler_parser (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cfg_pulse_sequence_s,
        cfg_pulse_sequence_l,
        cfg_num_pulses_to_ex,
        cfg_total_decimation,
        cfg_post_decimation,
        cfg_num_pulses_per_x,
        cfg_enabled_channel_vector,
        cfg_pulse_sequence_p_address0,
        cfg_pulse_sequence_p_ce0,
        cfg_pulse_sequence_p_q0,
        cfg_pulse_sequence_p_2_address0,
        cfg_pulse_sequence_p_2_ce0,
        cfg_pulse_sequence_p_2_q0,
        cfg_pulse_sequence_n_address0,
        cfg_pulse_sequence_n_ce0,
        cfg_pulse_sequence_n_q0,
        cfg_pulse_sequence_b_address0,
        cfg_pulse_sequence_b_ce0,
        cfg_pulse_sequence_b_q0,
        cfg_pulse_sequence_c_address0,
        cfg_pulse_sequence_c_ce0,
        cfg_pulse_sequence_c_q0,
        cfg_pulse_sequence_f_address0,
        cfg_pulse_sequence_f_ce0,
        cfg_pulse_sequence_f_q0,
        cfg_pulse_sequence_f_3_address0,
        cfg_pulse_sequence_f_3_ce0,
        cfg_pulse_sequence_f_3_q0,
        cfg_pulse_sequence_f_4_address0,
        cfg_pulse_sequence_f_4_ce0,
        cfg_pulse_sequence_f_4_q0,
        cfg_pulse_sequence_t_address0,
        cfg_pulse_sequence_t_ce0,
        cfg_pulse_sequence_t_q0,
        cfg_pulse_sequence_t_16_address0,
        cfg_pulse_sequence_t_16_ce0,
        cfg_pulse_sequence_t_16_q0,
        cfg_pulse_sequence_t_17_address0,
        cfg_pulse_sequence_t_17_ce0,
        cfg_pulse_sequence_t_17_q0,
        cfg_pulse_sequence_t_18_address0,
        cfg_pulse_sequence_t_18_ce0,
        cfg_pulse_sequence_t_18_q0,
        cfg_pulse_sequence_t_19_address0,
        cfg_pulse_sequence_t_19_ce0,
        cfg_pulse_sequence_t_19_q0,
        cfg_pulse_sequence_t_20_address0,
        cfg_pulse_sequence_t_20_ce0,
        cfg_pulse_sequence_t_20_q0,
        cfg_pulse_sequence_t_21_address0,
        cfg_pulse_sequence_t_21_ce0,
        cfg_pulse_sequence_t_21_q0,
        cfg_pulse_sequence_t_22_address0,
        cfg_pulse_sequence_t_22_ce0,
        cfg_pulse_sequence_t_22_q0,
        cfg_pulse_sequence_t_23_address0,
        cfg_pulse_sequence_t_23_ce0,
        cfg_pulse_sequence_t_23_q0,
        cfg_pulse_sequence_t_24_address0,
        cfg_pulse_sequence_t_24_ce0,
        cfg_pulse_sequence_t_24_q0,
        cfg_pulse_sequence_t_25_address0,
        cfg_pulse_sequence_t_25_ce0,
        cfg_pulse_sequence_t_25_q0,
        cfg_pulse_sequence_t_26_address0,
        cfg_pulse_sequence_t_26_ce0,
        cfg_pulse_sequence_t_26_q0,
        cfg_pulse_sequence_t_27_address0,
        cfg_pulse_sequence_t_27_ce0,
        cfg_pulse_sequence_t_27_q0,
        cfg_pulse_sequence_t_28_address0,
        cfg_pulse_sequence_t_28_ce0,
        cfg_pulse_sequence_t_28_q0,
        cfg_pulse_sequence_t_29_address0,
        cfg_pulse_sequence_t_29_ce0,
        cfg_pulse_sequence_t_29_q0,
        cfg_pulse_sequence_t_30_address0,
        cfg_pulse_sequence_t_30_ce0,
        cfg_pulse_sequence_t_30_q0,
        cfg_filter_coefs_ch0_address0,
        cfg_filter_coefs_ch0_ce0,
        cfg_filter_coefs_ch0_q0,
        cfg_filter_coefs_ch1_address0,
        cfg_filter_coefs_ch1_ce0,
        cfg_filter_coefs_ch1_q0,
        cfg_filter_coefs_ch2_address0,
        cfg_filter_coefs_ch2_ce0,
        cfg_filter_coefs_ch2_q0,
        coef_ch0_V_V_TDATA,
        coef_ch0_V_V_TVALID,
        coef_ch0_V_V_TREADY,
        coef_ch1_V_V_TDATA,
        coef_ch1_V_V_TVALID,
        coef_ch1_V_V_TREADY,
        coef_ch2_V_V_TDATA,
        coef_ch2_V_V_TVALID,
        coef_ch2_V_V_TREADY,
        pulse_queue_0_V_din,
        pulse_queue_0_V_full_n,
        pulse_queue_0_V_write,
        pulse_queue_1_V_din,
        pulse_queue_1_V_full_n,
        pulse_queue_1_V_write,
        pulse_queue_2_V_din,
        pulse_queue_2_V_full_n,
        pulse_queue_2_V_write,
        pulse_queue_s_V_din,
        pulse_queue_s_V_full_n,
        pulse_queue_s_V_write
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] cfg_pulse_sequence_s;
input  [7:0] cfg_pulse_sequence_l;
input  [31:0] cfg_num_pulses_to_ex;
input  [31:0] cfg_total_decimation;
input  [31:0] cfg_post_decimation;
input  [31:0] cfg_num_pulses_per_x;
input  [31:0] cfg_enabled_channel_vector;
output  [4:0] cfg_pulse_sequence_p_address0;
output   cfg_pulse_sequence_p_ce0;
input  [31:0] cfg_pulse_sequence_p_q0;
output  [4:0] cfg_pulse_sequence_p_2_address0;
output   cfg_pulse_sequence_p_2_ce0;
input  [31:0] cfg_pulse_sequence_p_2_q0;
output  [4:0] cfg_pulse_sequence_n_address0;
output   cfg_pulse_sequence_n_ce0;
input  [31:0] cfg_pulse_sequence_n_q0;
output  [4:0] cfg_pulse_sequence_b_address0;
output   cfg_pulse_sequence_b_ce0;
input  [31:0] cfg_pulse_sequence_b_q0;
output  [4:0] cfg_pulse_sequence_c_address0;
output   cfg_pulse_sequence_c_ce0;
input  [31:0] cfg_pulse_sequence_c_q0;
output  [4:0] cfg_pulse_sequence_f_address0;
output   cfg_pulse_sequence_f_ce0;
input  [31:0] cfg_pulse_sequence_f_q0;
output  [4:0] cfg_pulse_sequence_f_3_address0;
output   cfg_pulse_sequence_f_3_ce0;
input  [31:0] cfg_pulse_sequence_f_3_q0;
output  [4:0] cfg_pulse_sequence_f_4_address0;
output   cfg_pulse_sequence_f_4_ce0;
input  [31:0] cfg_pulse_sequence_f_4_q0;
output  [4:0] cfg_pulse_sequence_t_address0;
output   cfg_pulse_sequence_t_ce0;
input  [31:0] cfg_pulse_sequence_t_q0;
output  [4:0] cfg_pulse_sequence_t_16_address0;
output   cfg_pulse_sequence_t_16_ce0;
input  [31:0] cfg_pulse_sequence_t_16_q0;
output  [4:0] cfg_pulse_sequence_t_17_address0;
output   cfg_pulse_sequence_t_17_ce0;
input  [31:0] cfg_pulse_sequence_t_17_q0;
output  [4:0] cfg_pulse_sequence_t_18_address0;
output   cfg_pulse_sequence_t_18_ce0;
input  [31:0] cfg_pulse_sequence_t_18_q0;
output  [4:0] cfg_pulse_sequence_t_19_address0;
output   cfg_pulse_sequence_t_19_ce0;
input  [31:0] cfg_pulse_sequence_t_19_q0;
output  [4:0] cfg_pulse_sequence_t_20_address0;
output   cfg_pulse_sequence_t_20_ce0;
input  [31:0] cfg_pulse_sequence_t_20_q0;
output  [4:0] cfg_pulse_sequence_t_21_address0;
output   cfg_pulse_sequence_t_21_ce0;
input  [31:0] cfg_pulse_sequence_t_21_q0;
output  [4:0] cfg_pulse_sequence_t_22_address0;
output   cfg_pulse_sequence_t_22_ce0;
input  [31:0] cfg_pulse_sequence_t_22_q0;
output  [4:0] cfg_pulse_sequence_t_23_address0;
output   cfg_pulse_sequence_t_23_ce0;
input  [31:0] cfg_pulse_sequence_t_23_q0;
output  [4:0] cfg_pulse_sequence_t_24_address0;
output   cfg_pulse_sequence_t_24_ce0;
input  [31:0] cfg_pulse_sequence_t_24_q0;
output  [4:0] cfg_pulse_sequence_t_25_address0;
output   cfg_pulse_sequence_t_25_ce0;
input  [31:0] cfg_pulse_sequence_t_25_q0;
output  [4:0] cfg_pulse_sequence_t_26_address0;
output   cfg_pulse_sequence_t_26_ce0;
input  [31:0] cfg_pulse_sequence_t_26_q0;
output  [4:0] cfg_pulse_sequence_t_27_address0;
output   cfg_pulse_sequence_t_27_ce0;
input  [31:0] cfg_pulse_sequence_t_27_q0;
output  [4:0] cfg_pulse_sequence_t_28_address0;
output   cfg_pulse_sequence_t_28_ce0;
input  [31:0] cfg_pulse_sequence_t_28_q0;
output  [4:0] cfg_pulse_sequence_t_29_address0;
output   cfg_pulse_sequence_t_29_ce0;
input  [31:0] cfg_pulse_sequence_t_29_q0;
output  [4:0] cfg_pulse_sequence_t_30_address0;
output   cfg_pulse_sequence_t_30_ce0;
input  [31:0] cfg_pulse_sequence_t_30_q0;
output  [7:0] cfg_filter_coefs_ch0_address0;
output   cfg_filter_coefs_ch0_ce0;
input  [31:0] cfg_filter_coefs_ch0_q0;
output  [7:0] cfg_filter_coefs_ch1_address0;
output   cfg_filter_coefs_ch1_ce0;
input  [31:0] cfg_filter_coefs_ch1_q0;
output  [7:0] cfg_filter_coefs_ch2_address0;
output   cfg_filter_coefs_ch2_ce0;
input  [31:0] cfg_filter_coefs_ch2_q0;
output  [23:0] coef_ch0_V_V_TDATA;
output   coef_ch0_V_V_TVALID;
input   coef_ch0_V_V_TREADY;
output  [23:0] coef_ch1_V_V_TDATA;
output   coef_ch1_V_V_TVALID;
input   coef_ch1_V_V_TREADY;
output  [23:0] coef_ch2_V_V_TDATA;
output   coef_ch2_V_V_TVALID;
input   coef_ch2_V_V_TREADY;
output  [820:0] pulse_queue_0_V_din;
input   pulse_queue_0_V_full_n;
output   pulse_queue_0_V_write;
output  [820:0] pulse_queue_1_V_din;
input   pulse_queue_1_V_full_n;
output   pulse_queue_1_V_write;
output  [820:0] pulse_queue_2_V_din;
input   pulse_queue_2_V_full_n;
output   pulse_queue_2_V_write;
output  [820:0] pulse_queue_s_V_din;
input   pulse_queue_s_V_full_n;
output   pulse_queue_s_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cfg_pulse_sequence_p_ce0;
reg cfg_pulse_sequence_p_2_ce0;
reg cfg_pulse_sequence_n_ce0;
reg cfg_pulse_sequence_b_ce0;
reg cfg_pulse_sequence_c_ce0;
reg cfg_pulse_sequence_f_ce0;
reg cfg_pulse_sequence_f_3_ce0;
reg cfg_pulse_sequence_f_4_ce0;
reg cfg_pulse_sequence_t_ce0;
reg cfg_pulse_sequence_t_16_ce0;
reg cfg_pulse_sequence_t_17_ce0;
reg cfg_pulse_sequence_t_18_ce0;
reg cfg_pulse_sequence_t_19_ce0;
reg cfg_pulse_sequence_t_20_ce0;
reg cfg_pulse_sequence_t_21_ce0;
reg cfg_pulse_sequence_t_22_ce0;
reg cfg_pulse_sequence_t_23_ce0;
reg cfg_pulse_sequence_t_24_ce0;
reg cfg_pulse_sequence_t_25_ce0;
reg cfg_pulse_sequence_t_26_ce0;
reg cfg_pulse_sequence_t_27_ce0;
reg cfg_pulse_sequence_t_28_ce0;
reg cfg_pulse_sequence_t_29_ce0;
reg cfg_pulse_sequence_t_30_ce0;
reg cfg_filter_coefs_ch0_ce0;
reg cfg_filter_coefs_ch1_ce0;
reg cfg_filter_coefs_ch2_ce0;
reg[820:0] pulse_queue_0_V_din;
reg pulse_queue_0_V_write;
reg[820:0] pulse_queue_1_V_din;
reg pulse_queue_1_V_write;
reg[820:0] pulse_queue_2_V_din;
reg pulse_queue_2_V_write;
reg[820:0] pulse_queue_s_V_din;
reg pulse_queue_s_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    coef_ch0_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln149_fu_833_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    coef_ch1_V_V_TDATA_blk_n;
reg    coef_ch2_V_V_TDATA_blk_n;
reg    pulse_queue_0_V_blk_n;
wire    ap_CS_fsm_state49;
reg   [0:0] trunc_ln791_reg_1542;
wire    ap_CS_fsm_state51;
reg    pulse_queue_1_V_blk_n;
reg   [0:0] tmp_reg_1546;
reg    pulse_queue_2_V_blk_n;
reg   [0:0] p_Result_s_reg_1550;
reg    pulse_queue_s_V_blk_n;
reg    ap_block_state1;
wire   [31:0] cfg_pulse_sequence_l_1_fu_825_p1;
reg   [31:0] cfg_pulse_sequence_l_1_reg_1472;
wire   [31:0] cfg_pulse_sequence_s_1_fu_829_p1;
reg   [31:0] cfg_pulse_sequence_s_1_reg_1477;
wire   [2:0] set_fu_839_p2;
reg   [2:0] set_reg_1485;
reg    ap_block_state2_io;
wire   [23:0] tmp_V_fu_845_p1;
wire   [7:0] pulse_post_decimatio_fu_852_p1;
reg   [7:0] pulse_post_decimatio_reg_1534;
wire   [0:0] trunc_ln791_fu_855_p1;
wire   [8:0] sub_ln156_1_fu_902_p2;
reg   [8:0] sub_ln156_1_reg_1554;
reg    ap_block_state3_io;
wire   [5:0] coef_fu_914_p2;
reg   [5:0] coef_reg_1562;
wire    ap_CS_fsm_state4;
wire   [8:0] add_ln156_fu_930_p2;
reg   [8:0] add_ln156_reg_1567;
wire   [0:0] icmp_ln154_fu_908_p2;
wire    ap_CS_fsm_state5;
wire   [23:0] tmp_V_1_fu_941_p1;
reg    ap_block_state6_io;
wire   [23:0] tmp_V_2_fu_946_p1;
wire   [23:0] tmp_V_3_fu_951_p1;
reg   [31:0] seq_idx_1_load_reg_1602;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln170_fu_959_p2;
reg   [0:0] icmp_ln170_reg_1608;
reg   [31:0] cfg_pulse_sequence_p_6_reg_1732;
wire    ap_CS_fsm_state9;
reg   [31:0] pulse_definition_num_reg_1740;
reg   [31:0] pulse_definition_blo_reg_1749;
reg   [31:0] pulse_definition_con_reg_1754;
reg   [31:0] pulse_definition_fil_reg_1762;
reg   [31:0] pulse_definition_fil_1_reg_1770;
reg   [31:0] pulse_definition_fil_2_reg_1778;
reg   [31:0] pulse_definition_tim_reg_1786;
reg   [31:0] pulse_definition_tim_1_reg_1794;
reg   [31:0] pulse_definition_tim_2_reg_1803;
reg   [31:0] pulse_definition_tim_3_reg_1812;
reg   [31:0] pulse_definition_tim_4_reg_1821;
reg   [31:0] pulse_definition_tim_5_reg_1829;
reg   [31:0] pulse_definition_tim_6_reg_1837;
reg   [31:0] pulse_definition_tim_7_reg_1845;
reg   [31:0] pulse_definition_tim_8_reg_1853;
reg   [31:0] pulse_definition_tim_9_reg_1861;
reg   [31:0] pulse_definition_tim_10_reg_1869;
reg   [31:0] pulse_definition_tim_11_reg_1877;
reg   [31:0] pulse_definition_tim_12_reg_1885;
reg   [31:0] pulse_definition_tim_13_reg_1893;
reg   [31:0] pulse_definition_tim_14_reg_1901;
reg   [31:0] pulse_definition_tim_15_reg_1909;
wire   [7:0] pulse_sequence_index_fu_1000_p2;
reg   [7:0] pulse_sequence_index_reg_1917;
wire   [31:0] add_ln184_fu_1005_p2;
reg   [31:0] add_ln184_reg_1925;
wire   [31:0] add_ln200_fu_1011_p2;
reg   [31:0] add_ln200_reg_1930;
wire   [31:0] add_ln200_1_fu_1017_p2;
reg   [31:0] add_ln200_1_reg_1936;
wire   [31:0] add_ln200_2_fu_1023_p2;
reg   [31:0] add_ln200_2_reg_1942;
wire   [31:0] pulse_rep_fu_1034_p2;
reg   [31:0] pulse_rep_reg_1951;
wire    ap_CS_fsm_state10;
wire   [0:0] pulse_first_pulse_in_fu_1040_p2;
reg   [0:0] pulse_first_pulse_in_reg_1956;
wire   [0:0] icmp_ln177_fu_1029_p2;
wire   [0:0] pulse_last_pulse_in_s_fu_1046_p2;
reg   [0:0] pulse_last_pulse_in_s_reg_1964;
wire   [31:0] pulse_definition_prt_q0;
reg   [31:0] pulse_definition_prt_4_reg_1978;
wire    ap_CS_fsm_state11;
wire   [31:0] sub_ln203_fu_1076_p2;
reg   [31:0] sub_ln203_reg_1992;
wire    ap_CS_fsm_state12;
wire   [31:0] sub_ln203_1_fu_1091_p2;
reg   [31:0] sub_ln203_1_reg_1997;
wire   [31:0] sub_ln203_2_fu_1106_p2;
reg   [31:0] sub_ln203_2_reg_2002;
wire   [31:0] grp_fu_1111_p2;
reg   [31:0] udiv_ln203_reg_2007;
wire    ap_CS_fsm_state48;
wire   [0:0] icmp_ln204_fu_1126_p2;
reg   [0:0] icmp_ln204_reg_2012;
wire   [31:0] grp_fu_1115_p2;
reg   [31:0] udiv_ln203_1_reg_2017;
wire   [0:0] icmp_ln204_1_fu_1132_p2;
reg   [0:0] icmp_ln204_1_reg_2022;
wire   [31:0] grp_fu_1119_p2;
reg   [31:0] udiv_ln203_2_reg_2027;
wire   [0:0] icmp_ln204_2_fu_1138_p2;
reg   [0:0] icmp_ln204_2_reg_2032;
wire   [0:0] and_ln210_fu_1162_p2;
reg   [0:0] and_ln210_reg_2037;
wire   [0:0] pulse_first_pulse_in_1_fu_1168_p2;
reg   [0:0] pulse_first_pulse_in_1_reg_2042;
wire   [31:0] num_pulses_scheduled_5_fu_1174_p2;
reg   [31:0] num_pulses_scheduled_5_reg_2050;
wire   [0:0] icmp_ln219_fu_1180_p2;
reg   [0:0] icmp_ln219_reg_2055;
wire   [7:0] staggered_prt_index_fu_1393_p2;
reg   [7:0] staggered_prt_index_reg_2060;
reg    ap_block_state49;
wire   [7:0] select_ln254_fu_1436_p3;
wire    ap_CS_fsm_state50;
reg   [0:0] pulse_definition_prt_address0;
reg    pulse_definition_prt_ce0;
reg    pulse_definition_prt_we0;
reg   [0:0] pulse_definition_prt_address1;
reg    pulse_definition_prt_ce1;
reg    pulse_definition_prt_we1;
wire   [31:0] pulse_definition_prt_q1;
reg   [2:0] val_assign_reg_771;
reg   [5:0] coef_0_i_reg_783;
reg    ap_block_state7_io;
reg   [7:0] staggered_prt_index_s_reg_794;
reg   [31:0] pulse_rep_0_i_reg_806;
wire  signed [63:0] sext_ln156_fu_935_p1;
wire   [63:0] zext_ln173_fu_969_p1;
wire   [63:0] zext_ln192_fu_1051_p1;
wire   [63:0] zext_ln254_fu_1399_p1;
reg   [31:0] seq_idx_1_fu_270;
wire   [31:0] seq_idx_fu_1056_p2;
reg   [31:0] num_pulses_scheduled_2_fu_274;
wire   [31:0] select_ln219_fu_1216_p3;
reg   [31:0] num_pulses_scheduled_1_fu_278;
wire   [31:0] num_pulses_scheduled_fu_1387_p2;
reg   [31:0] tmp_num_samples_fu_282;
wire   [31:0] pulse_num_samples_2_fu_1206_p3;
wire   [820:0] tmp_1_fu_1223_p33;
wire    regslice_both_coef_ch0_V_V_U_apdone_blk;
wire    regslice_both_coef_ch1_V_V_U_apdone_blk;
wire    regslice_both_coef_ch2_V_V_U_apdone_blk;
reg    ap_block_state51;
wire   [820:0] tmp_1_1_fu_1264_p33;
wire   [820:0] tmp_2_1_fu_1305_p33;
wire   [820:0] tmp_3_fu_1346_p33;
wire   [6:0] tmp_9_fu_890_p3;
wire   [8:0] tmp_8_fu_882_p3;
wire   [8:0] zext_ln156_fu_898_p1;
wire   [5:0] sub_ln156_fu_920_p2;
wire   [8:0] zext_ln156_1_fu_926_p1;
wire   [31:0] add_ln173_fu_964_p2;
wire   [7:0] trunc_ln173_fu_997_p1;
wire   [0:0] icmp_ln201_fu_1066_p2;
wire   [31:0] select_ln201_fu_1070_p3;
wire   [0:0] icmp_ln201_1_fu_1081_p2;
wire   [31:0] select_ln201_1_fu_1085_p3;
wire   [0:0] icmp_ln201_2_fu_1096_p2;
wire   [31:0] select_ln201_2_fu_1100_p3;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln210_1_fu_1150_p2;
wire   [0:0] xor_ln210_fu_1156_p2;
wire   [0:0] icmp_ln210_fu_1144_p2;
wire   [0:0] pulse_last_pulse_in_1_fu_1212_p2;
wire   [31:0] tmp_def_block_post_t_fu_1188_p3;
wire   [31:0] pulse_num_samples_fu_1194_p3;
wire   [31:0] pulse_num_samples_1_fu_1200_p3;
wire   [0:0] icmp_ln254_fu_1419_p2;
wire   [0:0] icmp_ln254_1_fu_1424_p2;
wire   [0:0] or_ln254_fu_1430_p2;
reg    grp_fu_1111_ap_start;
wire    grp_fu_1111_ap_done;
reg    grp_fu_1115_ap_start;
wire    grp_fu_1115_ap_done;
reg    grp_fu_1119_ap_start;
wire    grp_fu_1119_ap_done;
reg   [50:0] ap_NS_fsm;
reg   [23:0] coef_ch0_V_V_TDATA_int;
reg    coef_ch0_V_V_TVALID_int;
wire    coef_ch0_V_V_TREADY_int;
wire    regslice_both_coef_ch0_V_V_U_vld_out;
reg   [23:0] coef_ch1_V_V_TDATA_int;
reg    coef_ch1_V_V_TVALID_int;
wire    coef_ch1_V_V_TREADY_int;
wire    regslice_both_coef_ch1_V_V_U_vld_out;
reg   [23:0] coef_ch2_V_V_TDATA_int;
reg    coef_ch2_V_V_TVALID_int;
wire    coef_ch2_V_V_TREADY_int;
wire    regslice_both_coef_ch2_V_V_U_vld_out;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 51'd1;
end

scheduler_parser_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
pulse_definition_prt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pulse_definition_prt_address0),
    .ce0(pulse_definition_prt_ce0),
    .we0(pulse_definition_prt_we0),
    .d0(cfg_pulse_sequence_p_q0),
    .q0(pulse_definition_prt_q0),
    .address1(pulse_definition_prt_address1),
    .ce1(pulse_definition_prt_ce1),
    .we1(pulse_definition_prt_we1),
    .d1(cfg_pulse_sequence_p_2_q0),
    .q1(pulse_definition_prt_q1)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1111_ap_start),
    .done(grp_fu_1111_ap_done),
    .din0(sub_ln203_reg_1992),
    .din1(cfg_total_decimation),
    .ce(1'b1),
    .dout(grp_fu_1111_p2)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1115_ap_start),
    .done(grp_fu_1115_ap_done),
    .din0(sub_ln203_1_reg_1997),
    .din1(cfg_total_decimation),
    .ce(1'b1),
    .dout(grp_fu_1115_p2)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1119_ap_start),
    .done(grp_fu_1119_ap_done),
    .din0(sub_ln203_2_reg_2002),
    .din1(cfg_total_decimation),
    .ce(1'b1),
    .dout(grp_fu_1119_p2)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch0_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch0_V_V_TDATA_int),
    .vld_in(coef_ch0_V_V_TVALID_int),
    .ack_in(coef_ch0_V_V_TREADY_int),
    .data_out(coef_ch0_V_V_TDATA),
    .vld_out(regslice_both_coef_ch0_V_V_U_vld_out),
    .ack_out(coef_ch0_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch0_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch1_V_V_TDATA_int),
    .vld_in(coef_ch1_V_V_TVALID_int),
    .ack_in(coef_ch1_V_V_TREADY_int),
    .data_out(coef_ch1_V_V_TDATA),
    .vld_out(regslice_both_coef_ch1_V_V_U_vld_out),
    .ack_out(coef_ch1_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch1_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_coef_ch2_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(coef_ch2_V_V_TDATA_int),
    .vld_in(coef_ch2_V_V_TVALID_int),
    .ack_in(coef_ch2_V_V_TREADY_int),
    .data_out(coef_ch2_V_V_TDATA),
    .vld_out(regslice_both_coef_ch2_V_V_U_vld_out),
    .ack_out(coef_ch2_V_V_TREADY),
    .apdone_blk(regslice_both_coef_ch2_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        coef_0_i_reg_783 <= coef_reg_1562;
    end else if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        coef_0_i_reg_783 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (1'd0 == and_ln210_reg_2037) & (1'b1 == ap_CS_fsm_state49))) begin
        num_pulses_scheduled_1_fu_278 <= num_pulses_scheduled_fu_1387_p2;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        num_pulses_scheduled_1_fu_278 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (1'd0 == and_ln210_reg_2037) & (1'b1 == ap_CS_fsm_state49))) begin
        num_pulses_scheduled_2_fu_274 <= select_ln219_fu_1216_p3;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        num_pulses_scheduled_2_fu_274 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        pulse_rep_0_i_reg_806 <= pulse_rep_reg_1951;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_rep_0_i_reg_806 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_reg_1608 == 1'd1) & (icmp_ln177_fu_1029_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        seq_idx_1_fu_270 <= seq_idx_fu_1056_p2;
    end else if ((((icmp_ln170_fu_959_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        seq_idx_1_fu_270 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        staggered_prt_index_s_reg_794 <= select_ln254_fu_1436_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        staggered_prt_index_s_reg_794 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_fu_908_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        val_assign_reg_771 <= set_reg_1485;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_reg_771 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_fu_908_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln156_reg_1567 <= add_ln156_fu_930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln184_reg_1925 <= add_ln184_fu_1005_p2;
        add_ln200_1_reg_1936 <= add_ln200_1_fu_1017_p2;
        add_ln200_2_reg_1942 <= add_ln200_2_fu_1023_p2;
        add_ln200_reg_1930 <= add_ln200_fu_1011_p2;
        cfg_pulse_sequence_p_6_reg_1732 <= cfg_pulse_sequence_p_2_q0;
        pulse_definition_blo_reg_1749 <= cfg_pulse_sequence_b_q0;
        pulse_definition_con_reg_1754 <= cfg_pulse_sequence_c_q0;
        pulse_definition_fil_1_reg_1770 <= cfg_pulse_sequence_f_3_q0;
        pulse_definition_fil_2_reg_1778 <= cfg_pulse_sequence_f_4_q0;
        pulse_definition_fil_reg_1762 <= cfg_pulse_sequence_f_q0;
        pulse_definition_num_reg_1740 <= cfg_pulse_sequence_n_q0;
        pulse_definition_tim_10_reg_1869 <= cfg_pulse_sequence_t_25_q0;
        pulse_definition_tim_11_reg_1877 <= cfg_pulse_sequence_t_26_q0;
        pulse_definition_tim_12_reg_1885 <= cfg_pulse_sequence_t_27_q0;
        pulse_definition_tim_13_reg_1893 <= cfg_pulse_sequence_t_28_q0;
        pulse_definition_tim_14_reg_1901 <= cfg_pulse_sequence_t_29_q0;
        pulse_definition_tim_15_reg_1909 <= cfg_pulse_sequence_t_30_q0;
        pulse_definition_tim_1_reg_1794 <= cfg_pulse_sequence_t_16_q0;
        pulse_definition_tim_2_reg_1803 <= cfg_pulse_sequence_t_17_q0;
        pulse_definition_tim_3_reg_1812 <= cfg_pulse_sequence_t_18_q0;
        pulse_definition_tim_4_reg_1821 <= cfg_pulse_sequence_t_19_q0;
        pulse_definition_tim_5_reg_1829 <= cfg_pulse_sequence_t_20_q0;
        pulse_definition_tim_6_reg_1837 <= cfg_pulse_sequence_t_21_q0;
        pulse_definition_tim_7_reg_1845 <= cfg_pulse_sequence_t_22_q0;
        pulse_definition_tim_8_reg_1853 <= cfg_pulse_sequence_t_23_q0;
        pulse_definition_tim_9_reg_1861 <= cfg_pulse_sequence_t_24_q0;
        pulse_definition_tim_reg_1786 <= cfg_pulse_sequence_t_q0;
        pulse_sequence_index_reg_1917 <= pulse_sequence_index_fu_1000_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        and_ln210_reg_2037 <= and_ln210_fu_1162_p2;
        icmp_ln204_1_reg_2022 <= icmp_ln204_1_fu_1132_p2;
        icmp_ln204_2_reg_2032 <= icmp_ln204_2_fu_1138_p2;
        icmp_ln204_reg_2012 <= icmp_ln204_fu_1126_p2;
        icmp_ln219_reg_2055 <= icmp_ln219_fu_1180_p2;
        num_pulses_scheduled_5_reg_2050 <= num_pulses_scheduled_5_fu_1174_p2;
        pulse_first_pulse_in_1_reg_2042 <= pulse_first_pulse_in_1_fu_1168_p2;
        udiv_ln203_1_reg_2017 <= grp_fu_1115_p2;
        udiv_ln203_2_reg_2027 <= grp_fu_1119_p2;
        udiv_ln203_reg_2007 <= grp_fu_1111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cfg_pulse_sequence_l_1_reg_1472[7 : 0] <= cfg_pulse_sequence_l_1_fu_825_p1[7 : 0];
        cfg_pulse_sequence_s_1_reg_1477[7 : 0] <= cfg_pulse_sequence_s_1_fu_829_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coef_reg_1562 <= coef_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln170_reg_1608 <= icmp_ln170_fu_959_p2;
        seq_idx_1_load_reg_1602 <= seq_idx_1_fu_270;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Result_s_reg_1550 <= cfg_enabled_channel_vector[32'd2];
        pulse_post_decimatio_reg_1534 <= pulse_post_decimatio_fu_852_p1;
        tmp_reg_1546 <= cfg_enabled_channel_vector[32'd1];
        trunc_ln791_reg_1542 <= trunc_ln791_fu_855_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pulse_definition_prt_4_reg_1978 <= pulse_definition_prt_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_1029_p2 == 1'd1) & (icmp_ln170_reg_1608 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        pulse_first_pulse_in_reg_1956 <= pulse_first_pulse_in_fu_1040_p2;
        pulse_last_pulse_in_s_reg_1964 <= pulse_last_pulse_in_s_fu_1046_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_reg_1608 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        pulse_rep_reg_1951 <= pulse_rep_fu_1034_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        set_reg_1485 <= set_fu_839_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (1'd0 == and_ln210_reg_2037) & (1'b1 == ap_CS_fsm_state49))) begin
        staggered_prt_index_reg_2060 <= staggered_prt_index_fu_1393_p2;
        tmp_num_samples_fu_282 <= pulse_num_samples_2_fu_1206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln156_1_reg_1554[8 : 4] <= sub_ln156_1_fu_902_p2[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sub_ln203_1_reg_1997 <= sub_ln203_1_fu_1091_p2;
        sub_ln203_2_reg_2002 <= sub_ln203_2_fu_1106_p2;
        sub_ln203_reg_1992 <= sub_ln203_fu_1076_p2;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch0_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch1_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch2_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_b_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_c_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_3_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_4_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_n_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_n_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_p_2_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_p_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_16_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_17_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_18_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_19_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_20_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_21_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_22_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_23_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_24_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_25_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_26_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_27_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_28_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_29_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_30_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch0_V_V_TDATA_blk_n = coef_ch0_V_V_TREADY_int;
    end else begin
        coef_ch0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch0_V_V_TDATA_int = tmp_V_1_fu_941_p1;
    end else if (((icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch0_V_V_TDATA_int = tmp_V_fu_845_p1;
    end else begin
        coef_ch0_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch0_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch0_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch1_V_V_TDATA_blk_n = coef_ch1_V_V_TREADY_int;
    end else begin
        coef_ch1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch1_V_V_TDATA_int = tmp_V_2_fu_946_p1;
    end else if (((icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch1_V_V_TDATA_int = tmp_V_fu_845_p1;
    end else begin
        coef_ch1_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch1_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch1_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch2_V_V_TDATA_blk_n = coef_ch2_V_V_TREADY_int;
    end else begin
        coef_ch2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch2_V_V_TDATA_int = tmp_V_3_fu_951_p1;
    end else if (((icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        coef_ch2_V_V_TDATA_int = tmp_V_fu_845_p1;
    end else begin
        coef_ch2_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        coef_ch2_V_V_TVALID_int = 1'b1;
    end else begin
        coef_ch2_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_1111_ap_start = 1'b1;
    end else begin
        grp_fu_1111_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_1115_ap_start = 1'b1;
    end else begin
        grp_fu_1115_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_1119_ap_start = 1'b1;
    end else begin
        grp_fu_1119_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_definition_prt_address0 = zext_ln192_fu_1051_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_address0 = 64'd0;
    end else begin
        pulse_definition_prt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        pulse_definition_prt_address1 = zext_ln254_fu_1399_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_address1 = 64'd1;
    end else begin
        pulse_definition_prt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        pulse_definition_prt_ce0 = 1'b1;
    end else begin
        pulse_definition_prt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (1'b1 == ap_CS_fsm_state49)))) begin
        pulse_definition_prt_ce1 = 1'b1;
    end else begin
        pulse_definition_prt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_we0 = 1'b1;
    end else begin
        pulse_definition_prt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_we1 = 1'b1;
    end else begin
        pulse_definition_prt_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((trunc_ln791_reg_1542 == 1'd1) & (1'b1 == ap_CS_fsm_state49)))) begin
        pulse_queue_0_V_blk_n = pulse_queue_0_V_full_n;
    end else begin
        pulse_queue_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
        pulse_queue_0_V_din = 821'd6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576;
    end else if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (trunc_ln791_reg_1542 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        pulse_queue_0_V_din = tmp_1_1_fu_1264_p33;
    end else begin
        pulse_queue_0_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51)) | (~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (trunc_ln791_reg_1542 == 1'd1) & (1'b1 == ap_CS_fsm_state49)))) begin
        pulse_queue_0_V_write = 1'b1;
    end else begin
        pulse_queue_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((tmp_reg_1546 == 1'd1) & (1'b1 == ap_CS_fsm_state49)))) begin
        pulse_queue_1_V_blk_n = pulse_queue_1_V_full_n;
    end else begin
        pulse_queue_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
        pulse_queue_1_V_din = 821'd6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576;
    end else if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (tmp_reg_1546 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        pulse_queue_1_V_din = tmp_2_1_fu_1305_p33;
    end else begin
        pulse_queue_1_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51)) | (~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (tmp_reg_1546 == 1'd1) & (1'b1 == ap_CS_fsm_state49)))) begin
        pulse_queue_1_V_write = 1'b1;
    end else begin
        pulse_queue_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((p_Result_s_reg_1550 == 1'd1) & (1'b1 == ap_CS_fsm_state49)))) begin
        pulse_queue_2_V_blk_n = pulse_queue_2_V_full_n;
    end else begin
        pulse_queue_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
        pulse_queue_2_V_din = 821'd6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576;
    end else if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (p_Result_s_reg_1550 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        pulse_queue_2_V_din = tmp_3_fu_1346_p33;
    end else begin
        pulse_queue_2_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51)) | (~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (p_Result_s_reg_1550 == 1'd1) & (1'b1 == ap_CS_fsm_state49)))) begin
        pulse_queue_2_V_write = 1'b1;
    end else begin
        pulse_queue_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49))) begin
        pulse_queue_s_V_blk_n = pulse_queue_s_V_full_n;
    end else begin
        pulse_queue_s_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
        pulse_queue_s_V_din = 821'd6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576;
    end else if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (1'b1 == ap_CS_fsm_state49))) begin
        pulse_queue_s_V_din = tmp_1_fu_1223_p33;
    end else begin
        pulse_queue_s_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51)) | (~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (1'b1 == ap_CS_fsm_state49)))) begin
        pulse_queue_s_V_write = 1'b1;
    end else begin
        pulse_queue_s_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b0 == ap_block_state2_io) & (icmp_ln149_fu_833_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln154_fu_908_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_io) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln170_fu_959_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ((icmp_ln177_fu_1029_p2 == 1'd0) | (icmp_ln170_reg_1608 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (1'd1 == and_ln210_reg_2037) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if ((~((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1))) & (1'd0 == and_ln210_reg_2037) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state51 : begin
            if ((~((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln156_fu_930_p2 = (sub_ln156_1_reg_1554 + zext_ln156_1_fu_926_p1);

assign add_ln173_fu_964_p2 = (seq_idx_1_fu_270 + cfg_pulse_sequence_s_1_reg_1477);

assign add_ln184_fu_1005_p2 = ($signed(32'd4294967295) + $signed(cfg_pulse_sequence_n_q0));

assign add_ln200_1_fu_1017_p2 = (cfg_pulse_sequence_t_17_q0 + cfg_pulse_sequence_t_25_q0);

assign add_ln200_2_fu_1023_p2 = (cfg_pulse_sequence_t_18_q0 + cfg_pulse_sequence_t_26_q0);

assign add_ln200_fu_1011_p2 = (cfg_pulse_sequence_t_16_q0 + cfg_pulse_sequence_t_24_q0);

assign and_ln210_fu_1162_p2 = (xor_ln210_fu_1156_p2 & icmp_ln210_fu_1144_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = (((coef_ch2_V_V_TREADY_int == 1'b0) & (icmp_ln149_fu_833_p2 == 1'd0)) | ((coef_ch1_V_V_TREADY_int == 1'b0) & (icmp_ln149_fu_833_p2 == 1'd0)) | ((coef_ch0_V_V_TREADY_int == 1'b0) & (icmp_ln149_fu_833_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state3_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state49 = ((pulse_queue_s_V_full_n == 1'b0) | ((pulse_queue_2_V_full_n == 1'b0) & (p_Result_s_reg_1550 == 1'd1)) | ((pulse_queue_1_V_full_n == 1'b0) & (tmp_reg_1546 == 1'd1)) | ((pulse_queue_0_V_full_n == 1'b0) & (trunc_ln791_reg_1542 == 1'd1)));
end

always @ (*) begin
    ap_block_state51 = ((pulse_queue_s_V_full_n == 1'b0) | (pulse_queue_2_V_full_n == 1'b0) | (pulse_queue_1_V_full_n == 1'b0) | (pulse_queue_0_V_full_n == 1'b0) | (regslice_both_coef_ch2_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch1_V_V_U_apdone_blk == 1'b1) | (regslice_both_coef_ch0_V_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state6_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((coef_ch2_V_V_TREADY_int == 1'b0) | (coef_ch1_V_V_TREADY_int == 1'b0) | (coef_ch0_V_V_TREADY_int == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign cfg_filter_coefs_ch0_address0 = sext_ln156_fu_935_p1;

assign cfg_filter_coefs_ch1_address0 = sext_ln156_fu_935_p1;

assign cfg_filter_coefs_ch2_address0 = sext_ln156_fu_935_p1;

assign cfg_pulse_sequence_b_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_c_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_f_3_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_f_4_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_f_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_l_1_fu_825_p1 = cfg_pulse_sequence_l;

assign cfg_pulse_sequence_n_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_p_2_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_p_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_s_1_fu_829_p1 = cfg_pulse_sequence_s;

assign cfg_pulse_sequence_t_16_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_17_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_18_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_19_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_20_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_21_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_22_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_23_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_24_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_25_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_26_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_27_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_28_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_29_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_30_address0 = zext_ln173_fu_969_p1;

assign cfg_pulse_sequence_t_address0 = zext_ln173_fu_969_p1;

assign coef_ch0_V_V_TVALID = regslice_both_coef_ch0_V_V_U_vld_out;

assign coef_ch1_V_V_TVALID = regslice_both_coef_ch1_V_V_U_vld_out;

assign coef_ch2_V_V_TVALID = regslice_both_coef_ch2_V_V_U_vld_out;

assign coef_fu_914_p2 = (coef_0_i_reg_783 + 6'd1);

assign icmp_ln149_fu_833_p2 = ((val_assign_reg_771 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_908_p2 = ((coef_0_i_reg_783 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_959_p2 = ((seq_idx_1_fu_270 < cfg_pulse_sequence_l_1_reg_1472) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_1029_p2 = ((pulse_rep_0_i_reg_806 < pulse_definition_num_reg_1740) ? 1'b1 : 1'b0);

assign icmp_ln201_1_fu_1081_p2 = ((pulse_definition_prt_4_reg_1978 < add_ln200_1_reg_1936) ? 1'b1 : 1'b0);

assign icmp_ln201_2_fu_1096_p2 = ((pulse_definition_prt_4_reg_1978 < add_ln200_2_reg_1942) ? 1'b1 : 1'b0);

assign icmp_ln201_fu_1066_p2 = ((pulse_definition_prt_4_reg_1978 < add_ln200_reg_1930) ? 1'b1 : 1'b0);

assign icmp_ln204_1_fu_1132_p2 = ((grp_fu_1115_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln204_2_fu_1138_p2 = ((grp_fu_1119_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_1126_p2 = ((grp_fu_1111_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln210_1_fu_1150_p2 = ((num_pulses_scheduled_1_fu_278 < cfg_num_pulses_to_ex) ? 1'b1 : 1'b0);

assign icmp_ln210_fu_1144_p2 = ((cfg_num_pulses_to_ex != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln219_fu_1180_p2 = ((num_pulses_scheduled_5_fu_1174_p2 == cfg_num_pulses_per_x) ? 1'b1 : 1'b0);

assign icmp_ln254_1_fu_1424_p2 = ((pulse_definition_prt_q1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_1419_p2 = ((staggered_prt_index_reg_2060 == 8'd2) ? 1'b1 : 1'b0);

assign num_pulses_scheduled_5_fu_1174_p2 = (num_pulses_scheduled_2_fu_274 + 32'd1);

assign num_pulses_scheduled_fu_1387_p2 = (num_pulses_scheduled_1_fu_278 + 32'd1);

assign or_ln254_fu_1430_p2 = (icmp_ln254_fu_1419_p2 | icmp_ln254_1_fu_1424_p2);

assign pulse_first_pulse_in_1_fu_1168_p2 = ((num_pulses_scheduled_2_fu_274 == 32'd0) ? 1'b1 : 1'b0);

assign pulse_first_pulse_in_fu_1040_p2 = ((pulse_rep_0_i_reg_806 == 32'd0) ? 1'b1 : 1'b0);

assign pulse_last_pulse_in_1_fu_1212_p2 = (icmp_ln219_reg_2055 | and_ln210_reg_2037);

assign pulse_last_pulse_in_s_fu_1046_p2 = ((pulse_rep_0_i_reg_806 == add_ln184_reg_1925) ? 1'b1 : 1'b0);

assign pulse_num_samples_1_fu_1200_p3 = ((icmp_ln204_1_reg_2022[0:0] === 1'b1) ? 32'd1 : udiv_ln203_1_reg_2017);

assign pulse_num_samples_2_fu_1206_p3 = ((icmp_ln204_2_reg_2032[0:0] === 1'b1) ? 32'd1 : udiv_ln203_2_reg_2027);

assign pulse_num_samples_fu_1194_p3 = ((icmp_ln204_reg_2012[0:0] === 1'b1) ? 32'd1 : udiv_ln203_reg_2007);

assign pulse_post_decimatio_fu_852_p1 = cfg_post_decimation[7:0];

assign pulse_rep_fu_1034_p2 = (pulse_rep_0_i_reg_806 + 32'd1);

assign pulse_sequence_index_fu_1000_p2 = (cfg_pulse_sequence_s + trunc_ln173_fu_997_p1);

assign select_ln201_1_fu_1085_p3 = ((icmp_ln201_1_fu_1081_p2[0:0] === 1'b1) ? pulse_definition_prt_4_reg_1978 : add_ln200_1_reg_1936);

assign select_ln201_2_fu_1100_p3 = ((icmp_ln201_2_fu_1096_p2[0:0] === 1'b1) ? pulse_definition_prt_4_reg_1978 : add_ln200_2_reg_1942);

assign select_ln201_fu_1070_p3 = ((icmp_ln201_fu_1066_p2[0:0] === 1'b1) ? pulse_definition_prt_4_reg_1978 : add_ln200_reg_1930);

assign select_ln219_fu_1216_p3 = ((pulse_last_pulse_in_1_fu_1212_p2[0:0] === 1'b1) ? 32'd0 : num_pulses_scheduled_5_reg_2050);

assign select_ln254_fu_1436_p3 = ((or_ln254_fu_1430_p2[0:0] === 1'b1) ? 8'd0 : staggered_prt_index_reg_2060);

assign seq_idx_fu_1056_p2 = (seq_idx_1_load_reg_1602 + 32'd1);

assign set_fu_839_p2 = (val_assign_reg_771 + 3'd1);

assign sext_ln156_fu_935_p1 = $signed(add_ln156_reg_1567);

assign staggered_prt_index_fu_1393_p2 = (staggered_prt_index_s_reg_794 + 8'd1);

assign start_out = real_start;

assign sub_ln156_1_fu_902_p2 = (tmp_8_fu_882_p3 - zext_ln156_fu_898_p1);

assign sub_ln156_fu_920_p2 = ($signed(6'd47) - $signed(coef_0_i_reg_783));

assign sub_ln203_1_fu_1091_p2 = (select_ln201_1_fu_1085_p3 - pulse_definition_tim_2_reg_1803);

assign sub_ln203_2_fu_1106_p2 = (select_ln201_2_fu_1100_p3 - pulse_definition_tim_3_reg_1812);

assign sub_ln203_fu_1076_p2 = (select_ln201_fu_1070_p3 - pulse_definition_tim_1_reg_1794);

assign tmp_1_1_fu_1264_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_fu_1212_p2}}}, {pulse_first_pulse_in_1_reg_2042}}}, {pulse_last_pulse_in_s_reg_1964}}}, {pulse_first_pulse_in_reg_1956}}}, {pulse_post_decimatio_reg_1534}}}, {pulse_num_samples_fu_1194_p3}}}, {pulse_sequence_index_reg_1917}}}, {pulse_definition_tim_15_reg_1909}}}, {pulse_definition_tim_14_reg_1901}}}, {pulse_definition_tim_13_reg_1893}}}, {pulse_definition_tim_12_reg_1885}}}, {pulse_definition_tim_11_reg_1877}}}, {pulse_definition_tim_10_reg_1869}}}, {pulse_definition_tim_9_reg_1861}}}, {pulse_definition_tim_8_reg_1853}}}, {pulse_definition_tim_7_reg_1845}}}, {pulse_definition_tim_6_reg_1837}}}, {pulse_definition_tim_5_reg_1829}}}, {pulse_definition_tim_4_reg_1821}}}, {pulse_definition_tim_3_reg_1812}}}, {pulse_definition_tim_2_reg_1803}}}, {pulse_definition_tim_1_reg_1794}}}, {pulse_definition_tim_reg_1786}}}, {pulse_definition_fil_2_reg_1778}}}, {pulse_definition_fil_1_reg_1770}}}, {pulse_definition_fil_reg_1762}}}, {pulse_definition_con_reg_1754}}}, {tmp_def_block_post_t_fu_1188_p3}}}, {pulse_definition_num_reg_1740}}}, {cfg_pulse_sequence_p_6_reg_1732}}}, {pulse_definition_prt_4_reg_1978}};

assign tmp_1_fu_1223_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_fu_1212_p2}}}, {pulse_first_pulse_in_1_reg_2042}}}, {pulse_last_pulse_in_s_reg_1964}}}, {pulse_first_pulse_in_reg_1956}}}, {pulse_post_decimatio_reg_1534}}}, {tmp_num_samples_fu_282}}}, {pulse_sequence_index_reg_1917}}}, {pulse_definition_tim_15_reg_1909}}}, {pulse_definition_tim_14_reg_1901}}}, {pulse_definition_tim_13_reg_1893}}}, {pulse_definition_tim_12_reg_1885}}}, {pulse_definition_tim_11_reg_1877}}}, {pulse_definition_tim_10_reg_1869}}}, {pulse_definition_tim_9_reg_1861}}}, {pulse_definition_tim_8_reg_1853}}}, {pulse_definition_tim_7_reg_1845}}}, {pulse_definition_tim_6_reg_1837}}}, {pulse_definition_tim_5_reg_1829}}}, {pulse_definition_tim_4_reg_1821}}}, {pulse_definition_tim_3_reg_1812}}}, {pulse_definition_tim_2_reg_1803}}}, {pulse_definition_tim_1_reg_1794}}}, {pulse_definition_tim_reg_1786}}}, {pulse_definition_fil_2_reg_1778}}}, {pulse_definition_fil_1_reg_1770}}}, {pulse_definition_fil_reg_1762}}}, {pulse_definition_con_reg_1754}}}, {tmp_def_block_post_t_fu_1188_p3}}}, {pulse_definition_num_reg_1740}}}, {cfg_pulse_sequence_p_6_reg_1732}}}, {pulse_definition_prt_4_reg_1978}};

assign tmp_2_1_fu_1305_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_fu_1212_p2}}}, {pulse_first_pulse_in_1_reg_2042}}}, {pulse_last_pulse_in_s_reg_1964}}}, {pulse_first_pulse_in_reg_1956}}}, {pulse_post_decimatio_reg_1534}}}, {pulse_num_samples_1_fu_1200_p3}}}, {pulse_sequence_index_reg_1917}}}, {pulse_definition_tim_15_reg_1909}}}, {pulse_definition_tim_14_reg_1901}}}, {pulse_definition_tim_13_reg_1893}}}, {pulse_definition_tim_12_reg_1885}}}, {pulse_definition_tim_11_reg_1877}}}, {pulse_definition_tim_10_reg_1869}}}, {pulse_definition_tim_9_reg_1861}}}, {pulse_definition_tim_8_reg_1853}}}, {pulse_definition_tim_7_reg_1845}}}, {pulse_definition_tim_6_reg_1837}}}, {pulse_definition_tim_5_reg_1829}}}, {pulse_definition_tim_4_reg_1821}}}, {pulse_definition_tim_3_reg_1812}}}, {pulse_definition_tim_2_reg_1803}}}, {pulse_definition_tim_1_reg_1794}}}, {pulse_definition_tim_reg_1786}}}, {pulse_definition_fil_2_reg_1778}}}, {pulse_definition_fil_1_reg_1770}}}, {pulse_definition_fil_reg_1762}}}, {pulse_definition_con_reg_1754}}}, {tmp_def_block_post_t_fu_1188_p3}}}, {pulse_definition_num_reg_1740}}}, {cfg_pulse_sequence_p_6_reg_1732}}}, {pulse_definition_prt_4_reg_1978}};

assign tmp_3_fu_1346_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_fu_1212_p2}}}, {pulse_first_pulse_in_1_reg_2042}}}, {pulse_last_pulse_in_s_reg_1964}}}, {pulse_first_pulse_in_reg_1956}}}, {pulse_post_decimatio_reg_1534}}}, {pulse_num_samples_2_fu_1206_p3}}}, {pulse_sequence_index_reg_1917}}}, {pulse_definition_tim_15_reg_1909}}}, {pulse_definition_tim_14_reg_1901}}}, {pulse_definition_tim_13_reg_1893}}}, {pulse_definition_tim_12_reg_1885}}}, {pulse_definition_tim_11_reg_1877}}}, {pulse_definition_tim_10_reg_1869}}}, {pulse_definition_tim_9_reg_1861}}}, {pulse_definition_tim_8_reg_1853}}}, {pulse_definition_tim_7_reg_1845}}}, {pulse_definition_tim_6_reg_1837}}}, {pulse_definition_tim_5_reg_1829}}}, {pulse_definition_tim_4_reg_1821}}}, {pulse_definition_tim_3_reg_1812}}}, {pulse_definition_tim_2_reg_1803}}}, {pulse_definition_tim_1_reg_1794}}}, {pulse_definition_tim_reg_1786}}}, {pulse_definition_fil_2_reg_1778}}}, {pulse_definition_fil_1_reg_1770}}}, {pulse_definition_fil_reg_1762}}}, {pulse_definition_con_reg_1754}}}, {tmp_def_block_post_t_fu_1188_p3}}}, {pulse_definition_num_reg_1740}}}, {cfg_pulse_sequence_p_6_reg_1732}}}, {pulse_definition_prt_4_reg_1978}};

assign tmp_8_fu_882_p3 = {{val_assign_reg_771}, {6'd0}};

assign tmp_9_fu_890_p3 = {{val_assign_reg_771}, {4'd0}};

assign tmp_V_1_fu_941_p1 = cfg_filter_coefs_ch0_q0[23:0];

assign tmp_V_2_fu_946_p1 = cfg_filter_coefs_ch1_q0[23:0];

assign tmp_V_3_fu_951_p1 = cfg_filter_coefs_ch2_q0[23:0];

assign tmp_V_fu_845_p1 = val_assign_reg_771;

assign tmp_def_block_post_t_fu_1188_p3 = ((pulse_last_pulse_in_s_reg_1964[0:0] === 1'b1) ? pulse_definition_blo_reg_1749 : 32'd0);

assign trunc_ln173_fu_997_p1 = seq_idx_1_load_reg_1602[7:0];

assign trunc_ln791_fu_855_p1 = cfg_enabled_channel_vector[0:0];

assign xor_ln210_fu_1156_p2 = (icmp_ln210_1_fu_1150_p2 ^ 1'd1);

assign zext_ln156_1_fu_926_p1 = sub_ln156_fu_920_p2;

assign zext_ln156_fu_898_p1 = tmp_9_fu_890_p3;

assign zext_ln173_fu_969_p1 = add_ln173_fu_964_p2;

assign zext_ln192_fu_1051_p1 = staggered_prt_index_s_reg_794;

assign zext_ln254_fu_1399_p1 = staggered_prt_index_fu_1393_p2;

always @ (posedge ap_clk) begin
    cfg_pulse_sequence_l_1_reg_1472[31:8] <= 24'b000000000000000000000000;
    cfg_pulse_sequence_s_1_reg_1477[31:8] <= 24'b000000000000000000000000;
    sub_ln156_1_reg_1554[3:0] <= 4'b0000;
end

endmodule //scheduler_parser
