// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scheduler_cycle_exac (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pps_address0,
        pps_ce0,
        pps_q0,
        pulse_queue_V_dout,
        pulse_queue_V_empty_n,
        pulse_queue_V_read,
        mt_pulse_V,
        mt_pulse_V_ap_vld,
        control_flags_V,
        control_flags_V_ap_vld,
        filter_select_ch0_V,
        filter_select_ch0_V_ap_vld,
        filter_select_ch1_V,
        filter_select_ch1_V_ap_vld,
        filter_select_ch2_V,
        filter_select_ch2_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state5 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [0:0] pps_address0;
output   pps_ce0;
input  [0:0] pps_q0;
input  [840:0] pulse_queue_V_dout;
input   pulse_queue_V_empty_n;
output   pulse_queue_V_read;
output  [7:0] mt_pulse_V;
output   mt_pulse_V_ap_vld;
output  [31:0] control_flags_V;
output   control_flags_V_ap_vld;
output  [1:0] filter_select_ch0_V;
output   filter_select_ch0_V_ap_vld;
output  [1:0] filter_select_ch1_V;
output   filter_select_ch1_V_ap_vld;
output  [1:0] filter_select_ch2_V;
output   filter_select_ch2_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pps_ce0;
reg pulse_queue_V_read;
reg mt_pulse_V_ap_vld;
reg control_flags_V_ap_vld;
reg filter_select_ch0_V_ap_vld;
reg filter_select_ch1_V_ap_vld;
reg filter_select_ch2_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    pulse_queue_V_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0_flag00000000;
wire   [0:0] tmp_s_fu_422_p2;
reg   [63:0] p_0_rec_reg_339;
reg   [0:0] got_pps_reg_351;
reg   [31:0] prt_clock_reg_363;
reg   [7:0] p_s_reg_375;
wire   [0:0] tmp_1_nbreadreq_fu_278_p3;
wire    ap_CS_fsm_state2;
wire   [63:0] p_rec_fu_410_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] got_pps_phi_fu_355_p4;
wire   [0:0] phitmp_fu_416_p2;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_s_reg_1448;
reg    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_state8_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_flag00011001;
reg   [0:0] ap_reg_pp1_iter1_tmp_s_reg_1448;
reg   [31:0] pulse_def_control_fl_reg_1452;
reg   [31:0] pulse_def_filter_sel_reg_1457;
reg   [31:0] pulse_def_filter_sel_1_reg_1462;
reg   [31:0] pulse_def_filter_sel_2_reg_1467;
wire   [0:0] pulse_terminate_fu_642_p3;
reg   [0:0] pulse_terminate_reg_1472;
reg   [0:0] ap_reg_pp1_iter1_pulse_terminate_reg_1472;
wire   [7:0] p_Val2_1_2_fu_934_p3;
reg   [7:0] p_Val2_1_2_reg_1476;
wire   [0:0] tmp_32_2_fu_948_p2;
reg   [0:0] tmp_32_2_reg_1482;
wire   [0:0] tmp_30_3_fu_954_p2;
reg   [0:0] tmp_30_3_reg_1487;
wire   [0:0] tmp_32_3_fu_966_p2;
reg   [0:0] tmp_32_3_reg_1492;
wire   [0:0] tmp_30_4_fu_972_p2;
reg   [0:0] tmp_30_4_reg_1497;
wire   [0:0] tmp_32_4_fu_984_p2;
reg   [0:0] tmp_32_4_reg_1502;
wire   [0:0] tmp_30_5_fu_990_p2;
reg   [0:0] tmp_30_5_reg_1507;
wire   [0:0] tmp_32_5_fu_1002_p2;
reg   [0:0] tmp_32_5_reg_1512;
wire   [0:0] tmp_30_6_fu_1008_p2;
reg   [0:0] tmp_30_6_reg_1517;
wire   [0:0] tmp_32_6_fu_1020_p2;
reg   [0:0] tmp_32_6_reg_1522;
wire   [0:0] tmp_30_7_fu_1026_p2;
reg   [0:0] tmp_30_7_reg_1527;
wire   [0:0] tmp_32_7_fu_1038_p2;
reg   [0:0] tmp_32_7_reg_1532;
wire   [0:0] tmp_21_fu_1050_p2;
reg   [0:0] tmp_21_reg_1537;
wire   [31:0] prt_clock_2_fu_1068_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [7:0] p_066_2_fu_1290_p3;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_CS_fsm_state5;
reg    ap_block_pp1_stage0_flag00011011;
reg    ap_predicate_tran7to9_state6;
reg    ap_condition_pp1_exit_iter1_state7;
wire    ap_block_pp0_stage0_flag00000000;
reg   [31:0] prt_clock_phi_fu_367_p4;
reg   [7:0] p_s_phi_fu_379_p4;
wire   [7:0] ap_phi_precharge_reg_pp1_iter0_p_066_1_reg_386;
reg   [7:0] ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386;
reg   [7:0] p_066_1_phi_fu_390_p4;
wire   [31:0] ap_phi_precharge_reg_pp1_iter0_prt_clock_1_reg_398;
reg   [31:0] ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398;
reg   [31:0] prt_clock_1_phi_fu_402_p4;
reg   [31:0] pulse_0_6_s_fu_190;
reg   [31:0] pulse_def_block_post_fu_194;
reg   [31:0] pulse_0_3_s_fu_198;
reg   [31:0] pulse_0_4_s_fu_202;
reg   [31:0] pulse_0_5_s_fu_206;
reg   [31:0] pulse_def_prt_0_fu_210;
wire   [31:0] pulse_def_prt_0_1_fu_428_p1;
reg   [31:0] pulse_def_timer_offs_fu_214;
reg   [31:0] pulse_def_timer_offs_1_fu_218;
reg   [31:0] pulse_def_timer_offs_2_fu_222;
reg   [31:0] pulse_def_timer_offs_3_fu_226;
reg   [31:0] pulse_def_timer_offs_4_fu_230;
reg   [31:0] pulse_def_timer_offs_5_fu_234;
reg   [31:0] pulse_def_timer_offs_6_fu_238;
reg   [31:0] pulse_def_timer_offs_7_fu_242;
reg   [31:0] pulse_def_timer_widt_fu_246;
reg   [31:0] pulse_def_timer_widt_1_fu_250;
reg   [31:0] pulse_def_timer_widt_2_fu_254;
reg   [31:0] pulse_def_timer_widt_3_fu_258;
reg   [31:0] pulse_def_timer_widt_4_fu_262;
reg   [31:0] pulse_def_timer_widt_5_fu_266;
reg   [31:0] pulse_def_timer_widt_6_fu_270;
reg   [31:0] pulse_def_timer_widt_7_fu_274;
wire   [7:0] p_066_4_7_fu_1267_p3;
reg    ap_block_pp1_stage0_flag00001001;
wire   [0:0] tmp_20_fu_810_p2;
reg   [7:0] tmp_29_fu_816_p4;
wire   [31:0] tmp_24_fu_834_p2;
wire   [7:0] p_Val2_1_fu_826_p3;
wire   [0:0] tmp_25_fu_840_p2;
reg   [7:0] tmp_30_fu_846_p4;
wire   [7:0] p_066_4_fu_856_p3;
wire   [0:0] tmp_30_1_fu_864_p2;
reg   [7:0] tmp_31_fu_870_p4;
wire   [31:0] tmp_31_1_fu_888_p2;
wire   [7:0] p_Val2_1_1_fu_880_p3;
wire   [0:0] tmp_32_1_fu_894_p2;
reg   [7:0] tmp_32_fu_900_p4;
wire   [7:0] p_066_4_1_fu_910_p3;
wire   [0:0] tmp_30_2_fu_918_p2;
reg   [7:0] tmp_33_fu_924_p4;
wire   [31:0] tmp_31_2_fu_942_p2;
wire   [31:0] tmp_31_3_fu_960_p2;
wire   [31:0] tmp_31_4_fu_978_p2;
wire   [31:0] tmp_31_5_fu_996_p2;
wire   [31:0] tmp_31_6_fu_1014_p2;
wire   [31:0] tmp_31_7_fu_1032_p2;
wire   [31:0] prt_clock_3_fu_1044_p2;
wire   [31:0] tmp_22_fu_1056_p2;
wire   [0:0] tmp_23_fu_1062_p2;
reg   [7:0] tmp_34_fu_1089_p4;
wire   [7:0] p_066_4_2_fu_1098_p3;
reg   [7:0] tmp_35_fu_1104_p4;
wire   [7:0] p_Val2_1_3_fu_1114_p3;
reg   [7:0] tmp_36_fu_1121_p4;
wire   [7:0] p_066_4_3_fu_1131_p3;
reg   [7:0] tmp_37_fu_1138_p4;
wire   [7:0] p_Val2_1_4_fu_1148_p3;
reg   [7:0] tmp_38_fu_1155_p4;
wire   [7:0] p_066_4_4_fu_1165_p3;
reg   [7:0] tmp_39_fu_1172_p4;
wire   [7:0] p_Val2_1_5_fu_1182_p3;
reg   [7:0] tmp_40_fu_1189_p4;
wire   [7:0] p_066_4_5_fu_1199_p3;
reg   [7:0] tmp_41_fu_1206_p4;
wire   [7:0] p_Val2_1_6_fu_1216_p3;
reg   [7:0] tmp_42_fu_1223_p4;
wire   [7:0] p_066_4_6_fu_1233_p3;
reg   [7:0] tmp_43_fu_1240_p4;
wire   [7:0] p_Val2_1_7_fu_1250_p3;
reg   [7:0] tmp_44_fu_1257_p4;
wire    ap_CS_fsm_state9;
reg   [5:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_237;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_nbreadreq_fu_278_p3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_nbreadreq_fu_278_p3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_predicate_tran7to9_state6))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) | ((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter1_state7)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter1_state7))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_237 == 1'b1)) begin
        if (((tmp_s_fu_422_p2 == 1'd1) & (pulse_terminate_fu_642_p3 == 1'd0))) begin
            ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386 <= 8'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386 <= ap_phi_precharge_reg_pp1_iter0_p_066_1_reg_386;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_condition_237 == 1'b1)) begin
        if (((tmp_s_fu_422_p2 == 1'd1) & (pulse_terminate_fu_642_p3 == 1'd0))) begin
            ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398 <= ap_phi_precharge_reg_pp1_iter0_prt_clock_1_reg_398;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_nbreadreq_fu_278_p3))) begin
        got_pps_reg_351 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == got_pps_reg_351))) begin
        got_pps_reg_351 <= phitmp_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_nbreadreq_fu_278_p3))) begin
        p_0_rec_reg_339 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == got_pps_phi_fu_355_p4))) begin
        p_0_rec_reg_339 <= p_rec_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        prt_clock_reg_363 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & ((tmp_s_reg_1448 == 1'd0) | (pulse_terminate_reg_1472 == 1'd0)) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        prt_clock_reg_363 <= prt_clock_2_fu_1068_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp1_iter1_pulse_terminate_reg_1472 <= pulse_terminate_reg_1472;
        ap_reg_pp1_iter1_tmp_s_reg_1448 <= tmp_s_reg_1448;
        tmp_s_reg_1448 <= tmp_s_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & ((tmp_s_reg_1448 == 1'd0) | (pulse_terminate_reg_1472 == 1'd0)))) begin
        p_Val2_1_2_reg_1476 <= p_Val2_1_2_fu_934_p3;
        tmp_21_reg_1537 <= tmp_21_fu_1050_p2;
        tmp_30_3_reg_1487 <= tmp_30_3_fu_954_p2;
        tmp_30_4_reg_1497 <= tmp_30_4_fu_972_p2;
        tmp_30_5_reg_1507 <= tmp_30_5_fu_990_p2;
        tmp_30_6_reg_1517 <= tmp_30_6_fu_1008_p2;
        tmp_30_7_reg_1527 <= tmp_30_7_fu_1026_p2;
        tmp_32_2_reg_1482 <= tmp_32_2_fu_948_p2;
        tmp_32_3_reg_1492 <= tmp_32_3_fu_966_p2;
        tmp_32_4_reg_1502 <= tmp_32_4_fu_984_p2;
        tmp_32_5_reg_1512 <= tmp_32_5_fu_1002_p2;
        tmp_32_6_reg_1522 <= tmp_32_6_fu_1020_p2;
        tmp_32_7_reg_1532 <= tmp_32_7_fu_1038_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & ((ap_reg_pp1_iter1_tmp_s_reg_1448 == 1'd0) | (ap_reg_pp1_iter1_pulse_terminate_reg_1472 == 1'd0)))) begin
        p_s_reg_375 <= p_066_2_fu_1290_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (pulse_terminate_reg_1472 == 1'd0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd1 == tmp_s_reg_1448))) begin
        pulse_0_3_s_fu_198 <= pulse_def_control_fl_reg_1452;
        pulse_0_4_s_fu_202 <= pulse_def_filter_sel_reg_1457;
        pulse_0_5_s_fu_206 <= pulse_def_filter_sel_1_reg_1462;
        pulse_0_6_s_fu_190 <= pulse_def_filter_sel_2_reg_1467;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0) & (tmp_s_fu_422_p2 == 1'd1) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (pulse_terminate_fu_642_p3 == 1'd0))) begin
        pulse_def_block_post_fu_194 <= {{pulse_queue_V_dout[127:96]}};
        pulse_def_prt_0_fu_210 <= pulse_def_prt_0_1_fu_428_p1;
        pulse_def_timer_offs_1_fu_218 <= {{pulse_queue_V_dout[319:288]}};
        pulse_def_timer_offs_2_fu_222 <= {{pulse_queue_V_dout[351:320]}};
        pulse_def_timer_offs_3_fu_226 <= {{pulse_queue_V_dout[383:352]}};
        pulse_def_timer_offs_4_fu_230 <= {{pulse_queue_V_dout[415:384]}};
        pulse_def_timer_offs_5_fu_234 <= {{pulse_queue_V_dout[447:416]}};
        pulse_def_timer_offs_6_fu_238 <= {{pulse_queue_V_dout[479:448]}};
        pulse_def_timer_offs_7_fu_242 <= {{pulse_queue_V_dout[511:480]}};
        pulse_def_timer_offs_fu_214 <= {{pulse_queue_V_dout[287:256]}};
        pulse_def_timer_widt_1_fu_250 <= {{pulse_queue_V_dout[575:544]}};
        pulse_def_timer_widt_2_fu_254 <= {{pulse_queue_V_dout[607:576]}};
        pulse_def_timer_widt_3_fu_258 <= {{pulse_queue_V_dout[639:608]}};
        pulse_def_timer_widt_4_fu_262 <= {{pulse_queue_V_dout[671:640]}};
        pulse_def_timer_widt_5_fu_266 <= {{pulse_queue_V_dout[703:672]}};
        pulse_def_timer_widt_6_fu_270 <= {{pulse_queue_V_dout[735:704]}};
        pulse_def_timer_widt_7_fu_274 <= {{pulse_queue_V_dout[767:736]}};
        pulse_def_timer_widt_fu_246 <= {{pulse_queue_V_dout[543:512]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_s_fu_422_p2 == 1'd1) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        pulse_def_control_fl_reg_1452 <= {{pulse_queue_V_dout[159:128]}};
        pulse_def_filter_sel_1_reg_1462 <= {{pulse_queue_V_dout[223:192]}};
        pulse_def_filter_sel_2_reg_1467 <= {{pulse_queue_V_dout[255:224]}};
        pulse_def_filter_sel_reg_1457 <= {{pulse_queue_V_dout[191:160]}};
        pulse_terminate_reg_1472 <= pulse_queue_V_dout[32'd840];
    end
end

always @ (*) begin
    if ((got_pps_phi_fu_355_p4 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & ((ap_reg_pp1_iter1_tmp_s_reg_1448 == 1'd0) | (ap_reg_pp1_iter1_pulse_terminate_reg_1472 == 1'd0)) & (ap_block_pp1_stage0_flag00001001 == 1'b0))) begin
        control_flags_V_ap_vld = 1'b1;
    end else begin
        control_flags_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & ((ap_reg_pp1_iter1_tmp_s_reg_1448 == 1'd0) | (ap_reg_pp1_iter1_pulse_terminate_reg_1472 == 1'd0)) & (ap_block_pp1_stage0_flag00001001 == 1'b0))) begin
        filter_select_ch0_V_ap_vld = 1'b1;
    end else begin
        filter_select_ch0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & ((ap_reg_pp1_iter1_tmp_s_reg_1448 == 1'd0) | (ap_reg_pp1_iter1_pulse_terminate_reg_1472 == 1'd0)) & (ap_block_pp1_stage0_flag00001001 == 1'b0))) begin
        filter_select_ch1_V_ap_vld = 1'b1;
    end else begin
        filter_select_ch1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & ((ap_reg_pp1_iter1_tmp_s_reg_1448 == 1'd0) | (ap_reg_pp1_iter1_pulse_terminate_reg_1472 == 1'd0)) & (ap_block_pp1_stage0_flag00001001 == 1'b0))) begin
        filter_select_ch2_V_ap_vld = 1'b1;
    end else begin
        filter_select_ch2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == got_pps_reg_351) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        got_pps_phi_fu_355_p4 = phitmp_fu_416_p2;
    end else begin
        got_pps_phi_fu_355_p4 = got_pps_reg_351;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & ((ap_reg_pp1_iter1_tmp_s_reg_1448 == 1'd0) | (ap_reg_pp1_iter1_pulse_terminate_reg_1472 == 1'd0)) & (ap_block_pp1_stage0_flag00001001 == 1'b0))) begin
        mt_pulse_V_ap_vld = 1'b1;
    end else begin
        mt_pulse_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00000000 == 1'b0) & (tmp_s_reg_1448 == 1'd0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        p_066_1_phi_fu_390_p4 = p_s_phi_fu_379_p4;
    end else begin
        p_066_1_phi_fu_390_p4 = ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386;
    end
end

always @ (*) begin
    if (((ap_block_pp1_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & ((ap_reg_pp1_iter1_tmp_s_reg_1448 == 1'd0) | (ap_reg_pp1_iter1_pulse_terminate_reg_1472 == 1'd0)))) begin
        p_s_phi_fu_379_p4 = p_066_2_fu_1290_p3;
    end else begin
        p_s_phi_fu_379_p4 = p_s_reg_375;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        pps_ce0 = 1'b1;
    end else begin
        pps_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00000000 == 1'b0) & (tmp_s_reg_1448 == 1'd0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        prt_clock_1_phi_fu_402_p4 = prt_clock_reg_363;
    end else begin
        prt_clock_1_phi_fu_402_p4 = ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00000000 == 1'b0) & ((tmp_s_reg_1448 == 1'd0) | (pulse_terminate_reg_1472 == 1'd0)) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        prt_clock_phi_fu_367_p4 = prt_clock_2_fu_1068_p3;
    end else begin
        prt_clock_phi_fu_367_p4 = prt_clock_reg_363;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00000000 == 1'b0) & (tmp_s_fu_422_p2 == 1'd1))) begin
        pulse_queue_V_blk_n = pulse_queue_V_empty_n;
    end else begin
        pulse_queue_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0) & (tmp_s_fu_422_p2 == 1'd1) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        pulse_queue_V_read = 1'b1;
    end else begin
        pulse_queue_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_1_nbreadreq_fu_278_p3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (got_pps_phi_fu_355_p4 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (got_pps_phi_fu_355_p4 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp1_iter0) & (tmp_s_fu_422_p2 == 1'd1) & (1'b0 == pulse_queue_V_empty_n));
end

always @ (*) begin
    ap_block_pp1_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp1_iter0) & (tmp_s_fu_422_p2 == 1'd1) & (1'b0 == pulse_queue_V_empty_n));
end

always @ (*) begin
    ap_block_pp1_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp1_iter0) & (tmp_s_fu_422_p2 == 1'd1) & (1'b0 == pulse_queue_V_empty_n));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((tmp_s_fu_422_p2 == 1'd1) & (1'b0 == pulse_queue_V_empty_n));
end

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_237 = ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_precharge_reg_pp1_iter0_p_066_1_reg_386 = 'bx;

assign ap_phi_precharge_reg_pp1_iter0_prt_clock_1_reg_398 = 'bx;

always @ (*) begin
    ap_predicate_tran7to9_state6 = ((tmp_s_fu_422_p2 == 1'd1) & (1'd1 == pulse_terminate_fu_642_p3));
end

assign control_flags_V = pulse_0_3_s_fu_198;

assign filter_select_ch0_V = pulse_0_4_s_fu_202[1:0];

assign filter_select_ch1_V = pulse_0_5_s_fu_206[1:0];

assign filter_select_ch2_V = pulse_0_6_s_fu_190[1:0];

assign mt_pulse_V = p_066_4_7_fu_1267_p3;

assign p_066_2_fu_1290_p3 = ((tmp_21_reg_1537[0:0] === 1'b1) ? 8'd0 : p_066_4_7_fu_1267_p3);

assign p_066_4_1_fu_910_p3 = ((tmp_32_1_fu_894_p2[0:0] === 1'b1) ? tmp_32_fu_900_p4 : p_Val2_1_1_fu_880_p3);

assign p_066_4_2_fu_1098_p3 = ((tmp_32_2_reg_1482[0:0] === 1'b1) ? tmp_34_fu_1089_p4 : p_Val2_1_2_reg_1476);

assign p_066_4_3_fu_1131_p3 = ((tmp_32_3_reg_1492[0:0] === 1'b1) ? tmp_36_fu_1121_p4 : p_Val2_1_3_fu_1114_p3);

assign p_066_4_4_fu_1165_p3 = ((tmp_32_4_reg_1502[0:0] === 1'b1) ? tmp_38_fu_1155_p4 : p_Val2_1_4_fu_1148_p3);

assign p_066_4_5_fu_1199_p3 = ((tmp_32_5_reg_1512[0:0] === 1'b1) ? tmp_40_fu_1189_p4 : p_Val2_1_5_fu_1182_p3);

assign p_066_4_6_fu_1233_p3 = ((tmp_32_6_reg_1522[0:0] === 1'b1) ? tmp_42_fu_1223_p4 : p_Val2_1_6_fu_1216_p3);

assign p_066_4_7_fu_1267_p3 = ((tmp_32_7_reg_1532[0:0] === 1'b1) ? tmp_44_fu_1257_p4 : p_Val2_1_7_fu_1250_p3);

assign p_066_4_fu_856_p3 = ((tmp_25_fu_840_p2[0:0] === 1'b1) ? tmp_30_fu_846_p4 : p_Val2_1_fu_826_p3);

assign p_Val2_1_1_fu_880_p3 = ((tmp_30_1_fu_864_p2[0:0] === 1'b1) ? tmp_31_fu_870_p4 : p_066_4_fu_856_p3);

assign p_Val2_1_2_fu_934_p3 = ((tmp_30_2_fu_918_p2[0:0] === 1'b1) ? tmp_33_fu_924_p4 : p_066_4_1_fu_910_p3);

assign p_Val2_1_3_fu_1114_p3 = ((tmp_30_3_reg_1487[0:0] === 1'b1) ? tmp_35_fu_1104_p4 : p_066_4_2_fu_1098_p3);

assign p_Val2_1_4_fu_1148_p3 = ((tmp_30_4_reg_1497[0:0] === 1'b1) ? tmp_37_fu_1138_p4 : p_066_4_3_fu_1131_p3);

assign p_Val2_1_5_fu_1182_p3 = ((tmp_30_5_reg_1507[0:0] === 1'b1) ? tmp_39_fu_1172_p4 : p_066_4_4_fu_1165_p3);

assign p_Val2_1_6_fu_1216_p3 = ((tmp_30_6_reg_1517[0:0] === 1'b1) ? tmp_41_fu_1206_p4 : p_066_4_5_fu_1199_p3);

assign p_Val2_1_7_fu_1250_p3 = ((tmp_30_7_reg_1527[0:0] === 1'b1) ? tmp_43_fu_1240_p4 : p_066_4_6_fu_1233_p3);

assign p_Val2_1_fu_826_p3 = ((tmp_20_fu_810_p2[0:0] === 1'b1) ? tmp_29_fu_816_p4 : p_066_1_phi_fu_390_p4);

assign p_rec_fu_410_p2 = (p_0_rec_reg_339 + 64'd1);

assign phitmp_fu_416_p2 = (pps_q0 ^ 1'd1);

assign pps_address0 = p_0_rec_reg_339;

assign prt_clock_2_fu_1068_p3 = ((tmp_23_fu_1062_p2[0:0] === 1'b1) ? 32'd0 : prt_clock_3_fu_1044_p2);

assign prt_clock_3_fu_1044_p2 = (32'd1 + prt_clock_1_phi_fu_402_p4);

assign pulse_def_prt_0_1_fu_428_p1 = pulse_queue_V_dout[31:0];

assign pulse_terminate_fu_642_p3 = pulse_queue_V_dout[32'd840];

assign tmp_1_nbreadreq_fu_278_p3 = pulse_queue_V_empty_n;

assign tmp_20_fu_810_p2 = ((prt_clock_1_phi_fu_402_p4 == pulse_def_timer_offs_fu_214) ? 1'b1 : 1'b0);

assign tmp_21_fu_1050_p2 = ((prt_clock_3_fu_1044_p2 == pulse_def_prt_0_fu_210) ? 1'b1 : 1'b0);

assign tmp_22_fu_1056_p2 = (pulse_def_block_post_fu_194 + pulse_def_prt_0_fu_210);

assign tmp_23_fu_1062_p2 = ((prt_clock_3_fu_1044_p2 == tmp_22_fu_1056_p2) ? 1'b1 : 1'b0);

assign tmp_24_fu_834_p2 = (pulse_def_timer_widt_fu_246 + pulse_def_timer_offs_fu_214);

assign tmp_25_fu_840_p2 = ((prt_clock_1_phi_fu_402_p4 == tmp_24_fu_834_p2) ? 1'b1 : 1'b0);

always @ (*) begin
    tmp_29_fu_816_p4 = p_066_1_phi_fu_390_p4;
    tmp_29_fu_816_p4[32'd0] = |(1'd1);
end

assign tmp_30_1_fu_864_p2 = ((prt_clock_1_phi_fu_402_p4 == pulse_def_timer_offs_1_fu_218) ? 1'b1 : 1'b0);

assign tmp_30_2_fu_918_p2 = ((prt_clock_1_phi_fu_402_p4 == pulse_def_timer_offs_2_fu_222) ? 1'b1 : 1'b0);

assign tmp_30_3_fu_954_p2 = ((prt_clock_1_phi_fu_402_p4 == pulse_def_timer_offs_3_fu_226) ? 1'b1 : 1'b0);

assign tmp_30_4_fu_972_p2 = ((prt_clock_1_phi_fu_402_p4 == pulse_def_timer_offs_4_fu_230) ? 1'b1 : 1'b0);

assign tmp_30_5_fu_990_p2 = ((prt_clock_1_phi_fu_402_p4 == pulse_def_timer_offs_5_fu_234) ? 1'b1 : 1'b0);

assign tmp_30_6_fu_1008_p2 = ((prt_clock_1_phi_fu_402_p4 == pulse_def_timer_offs_6_fu_238) ? 1'b1 : 1'b0);

assign tmp_30_7_fu_1026_p2 = ((prt_clock_1_phi_fu_402_p4 == pulse_def_timer_offs_7_fu_242) ? 1'b1 : 1'b0);

always @ (*) begin
    tmp_30_fu_846_p4 = p_Val2_1_fu_826_p3;
    tmp_30_fu_846_p4[32'd0] = |(1'd0);
end

assign tmp_31_1_fu_888_p2 = (pulse_def_timer_widt_1_fu_250 + pulse_def_timer_offs_1_fu_218);

assign tmp_31_2_fu_942_p2 = (pulse_def_timer_widt_2_fu_254 + pulse_def_timer_offs_2_fu_222);

assign tmp_31_3_fu_960_p2 = (pulse_def_timer_widt_3_fu_258 + pulse_def_timer_offs_3_fu_226);

assign tmp_31_4_fu_978_p2 = (pulse_def_timer_widt_4_fu_262 + pulse_def_timer_offs_4_fu_230);

assign tmp_31_5_fu_996_p2 = (pulse_def_timer_widt_5_fu_266 + pulse_def_timer_offs_5_fu_234);

assign tmp_31_6_fu_1014_p2 = (pulse_def_timer_widt_6_fu_270 + pulse_def_timer_offs_6_fu_238);

assign tmp_31_7_fu_1032_p2 = (pulse_def_timer_widt_7_fu_274 + pulse_def_timer_offs_7_fu_242);

always @ (*) begin
    tmp_31_fu_870_p4 = p_066_4_fu_856_p3;
    tmp_31_fu_870_p4[32'd1] = |(1'd1);
end

assign tmp_32_1_fu_894_p2 = ((prt_clock_1_phi_fu_402_p4 == tmp_31_1_fu_888_p2) ? 1'b1 : 1'b0);

assign tmp_32_2_fu_948_p2 = ((prt_clock_1_phi_fu_402_p4 == tmp_31_2_fu_942_p2) ? 1'b1 : 1'b0);

assign tmp_32_3_fu_966_p2 = ((prt_clock_1_phi_fu_402_p4 == tmp_31_3_fu_960_p2) ? 1'b1 : 1'b0);

assign tmp_32_4_fu_984_p2 = ((prt_clock_1_phi_fu_402_p4 == tmp_31_4_fu_978_p2) ? 1'b1 : 1'b0);

assign tmp_32_5_fu_1002_p2 = ((prt_clock_1_phi_fu_402_p4 == tmp_31_5_fu_996_p2) ? 1'b1 : 1'b0);

assign tmp_32_6_fu_1020_p2 = ((prt_clock_1_phi_fu_402_p4 == tmp_31_6_fu_1014_p2) ? 1'b1 : 1'b0);

assign tmp_32_7_fu_1038_p2 = ((prt_clock_1_phi_fu_402_p4 == tmp_31_7_fu_1032_p2) ? 1'b1 : 1'b0);

always @ (*) begin
    tmp_32_fu_900_p4 = p_Val2_1_1_fu_880_p3;
    tmp_32_fu_900_p4[32'd1] = |(1'd0);
end

always @ (*) begin
    tmp_33_fu_924_p4 = p_066_4_1_fu_910_p3;
    tmp_33_fu_924_p4[32'd2] = |(1'd1);
end

always @ (*) begin
    tmp_34_fu_1089_p4 = p_Val2_1_2_reg_1476;
    tmp_34_fu_1089_p4[32'd2] = |(1'd0);
end

always @ (*) begin
    tmp_35_fu_1104_p4 = p_066_4_2_fu_1098_p3;
    tmp_35_fu_1104_p4[32'd3] = |(1'd1);
end

always @ (*) begin
    tmp_36_fu_1121_p4 = p_Val2_1_3_fu_1114_p3;
    tmp_36_fu_1121_p4[32'd3] = |(1'd0);
end

always @ (*) begin
    tmp_37_fu_1138_p4 = p_066_4_3_fu_1131_p3;
    tmp_37_fu_1138_p4[32'd4] = |(1'd1);
end

always @ (*) begin
    tmp_38_fu_1155_p4 = p_Val2_1_4_fu_1148_p3;
    tmp_38_fu_1155_p4[32'd4] = |(1'd0);
end

always @ (*) begin
    tmp_39_fu_1172_p4 = p_066_4_4_fu_1165_p3;
    tmp_39_fu_1172_p4[32'd5] = |(1'd1);
end

always @ (*) begin
    tmp_40_fu_1189_p4 = p_Val2_1_5_fu_1182_p3;
    tmp_40_fu_1189_p4[32'd5] = |(1'd0);
end

always @ (*) begin
    tmp_41_fu_1206_p4 = p_066_4_5_fu_1199_p3;
    tmp_41_fu_1206_p4[32'd6] = |(1'd1);
end

always @ (*) begin
    tmp_42_fu_1223_p4 = p_Val2_1_6_fu_1216_p3;
    tmp_42_fu_1223_p4[32'd6] = |(1'd0);
end

always @ (*) begin
    tmp_43_fu_1240_p4 = p_066_4_6_fu_1233_p3;
    tmp_43_fu_1240_p4[32'd7] = |(1'd1);
end

always @ (*) begin
    tmp_44_fu_1257_p4 = p_Val2_1_7_fu_1250_p3;
    tmp_44_fu_1257_p4[32'd7] = |(1'd0);
end

assign tmp_s_fu_422_p2 = ((prt_clock_phi_fu_367_p4 == 32'd0) ? 1'b1 : 1'b0);

endmodule //scheduler_cycle_exac
