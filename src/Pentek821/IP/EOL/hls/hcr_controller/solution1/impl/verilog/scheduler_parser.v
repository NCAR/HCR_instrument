// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scheduler_parser (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        cfg_pulse_sequence_s,
        cfg_pulse_sequence_l,
        cfg_num_pulses_to_ex,
        cfg_decimation,
        cfg_num_pulses_per_x,
        cfg_enabled_channel_vector,
        cfg_pulse_sequence_p_address0,
        cfg_pulse_sequence_p_ce0,
        cfg_pulse_sequence_p_q0,
        cfg_pulse_sequence_p_2_address0,
        cfg_pulse_sequence_p_2_ce0,
        cfg_pulse_sequence_p_2_q0,
        cfg_pulse_sequence_n_address0,
        cfg_pulse_sequence_n_ce0,
        cfg_pulse_sequence_n_q0,
        cfg_pulse_sequence_b_address0,
        cfg_pulse_sequence_b_ce0,
        cfg_pulse_sequence_b_q0,
        cfg_pulse_sequence_c_address0,
        cfg_pulse_sequence_c_ce0,
        cfg_pulse_sequence_c_q0,
        cfg_pulse_sequence_f_address0,
        cfg_pulse_sequence_f_ce0,
        cfg_pulse_sequence_f_q0,
        cfg_pulse_sequence_f_3_address0,
        cfg_pulse_sequence_f_3_ce0,
        cfg_pulse_sequence_f_3_q0,
        cfg_pulse_sequence_f_4_address0,
        cfg_pulse_sequence_f_4_ce0,
        cfg_pulse_sequence_f_4_q0,
        cfg_pulse_sequence_t_address0,
        cfg_pulse_sequence_t_ce0,
        cfg_pulse_sequence_t_q0,
        cfg_pulse_sequence_t_16_address0,
        cfg_pulse_sequence_t_16_ce0,
        cfg_pulse_sequence_t_16_q0,
        cfg_pulse_sequence_t_17_address0,
        cfg_pulse_sequence_t_17_ce0,
        cfg_pulse_sequence_t_17_q0,
        cfg_pulse_sequence_t_18_address0,
        cfg_pulse_sequence_t_18_ce0,
        cfg_pulse_sequence_t_18_q0,
        cfg_pulse_sequence_t_19_address0,
        cfg_pulse_sequence_t_19_ce0,
        cfg_pulse_sequence_t_19_q0,
        cfg_pulse_sequence_t_20_address0,
        cfg_pulse_sequence_t_20_ce0,
        cfg_pulse_sequence_t_20_q0,
        cfg_pulse_sequence_t_21_address0,
        cfg_pulse_sequence_t_21_ce0,
        cfg_pulse_sequence_t_21_q0,
        cfg_pulse_sequence_t_22_address0,
        cfg_pulse_sequence_t_22_ce0,
        cfg_pulse_sequence_t_22_q0,
        cfg_pulse_sequence_t_23_address0,
        cfg_pulse_sequence_t_23_ce0,
        cfg_pulse_sequence_t_23_q0,
        cfg_pulse_sequence_t_24_address0,
        cfg_pulse_sequence_t_24_ce0,
        cfg_pulse_sequence_t_24_q0,
        cfg_pulse_sequence_t_25_address0,
        cfg_pulse_sequence_t_25_ce0,
        cfg_pulse_sequence_t_25_q0,
        cfg_pulse_sequence_t_26_address0,
        cfg_pulse_sequence_t_26_ce0,
        cfg_pulse_sequence_t_26_q0,
        cfg_pulse_sequence_t_27_address0,
        cfg_pulse_sequence_t_27_ce0,
        cfg_pulse_sequence_t_27_q0,
        cfg_pulse_sequence_t_28_address0,
        cfg_pulse_sequence_t_28_ce0,
        cfg_pulse_sequence_t_28_q0,
        cfg_pulse_sequence_t_29_address0,
        cfg_pulse_sequence_t_29_ce0,
        cfg_pulse_sequence_t_29_q0,
        cfg_pulse_sequence_t_30_address0,
        cfg_pulse_sequence_t_30_ce0,
        cfg_pulse_sequence_t_30_q0,
        cfg_filter_coefs_ch0_address0,
        cfg_filter_coefs_ch0_ce0,
        cfg_filter_coefs_ch0_q0,
        cfg_filter_coefs_ch1_address0,
        cfg_filter_coefs_ch1_ce0,
        cfg_filter_coefs_ch1_q0,
        cfg_filter_coefs_ch2_address0,
        cfg_filter_coefs_ch2_ce0,
        cfg_filter_coefs_ch2_q0,
        coef_ch0_V_V_TDATA,
        coef_ch0_V_V_TVALID,
        coef_ch0_V_V_TREADY,
        coef_ch1_V_V_TDATA,
        coef_ch1_V_V_TVALID,
        coef_ch1_V_V_TREADY,
        coef_ch2_V_V_TDATA,
        coef_ch2_V_V_TVALID,
        coef_ch2_V_V_TREADY,
        pulse_queue_0_V_din,
        pulse_queue_0_V_full_n,
        pulse_queue_0_V_write,
        pulse_queue_1_V_din,
        pulse_queue_1_V_full_n,
        pulse_queue_1_V_write,
        pulse_queue_2_V_din,
        pulse_queue_2_V_full_n,
        pulse_queue_2_V_write,
        pulse_queue_s_V_din,
        pulse_queue_s_V_full_n,
        pulse_queue_s_V_write
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [7:0] cfg_pulse_sequence_s;
input  [7:0] cfg_pulse_sequence_l;
input  [31:0] cfg_num_pulses_to_ex;
input  [31:0] cfg_decimation;
input  [31:0] cfg_num_pulses_per_x;
input  [31:0] cfg_enabled_channel_vector;
output  [4:0] cfg_pulse_sequence_p_address0;
output   cfg_pulse_sequence_p_ce0;
input  [31:0] cfg_pulse_sequence_p_q0;
output  [4:0] cfg_pulse_sequence_p_2_address0;
output   cfg_pulse_sequence_p_2_ce0;
input  [31:0] cfg_pulse_sequence_p_2_q0;
output  [4:0] cfg_pulse_sequence_n_address0;
output   cfg_pulse_sequence_n_ce0;
input  [31:0] cfg_pulse_sequence_n_q0;
output  [4:0] cfg_pulse_sequence_b_address0;
output   cfg_pulse_sequence_b_ce0;
input  [31:0] cfg_pulse_sequence_b_q0;
output  [4:0] cfg_pulse_sequence_c_address0;
output   cfg_pulse_sequence_c_ce0;
input  [31:0] cfg_pulse_sequence_c_q0;
output  [4:0] cfg_pulse_sequence_f_address0;
output   cfg_pulse_sequence_f_ce0;
input  [31:0] cfg_pulse_sequence_f_q0;
output  [4:0] cfg_pulse_sequence_f_3_address0;
output   cfg_pulse_sequence_f_3_ce0;
input  [31:0] cfg_pulse_sequence_f_3_q0;
output  [4:0] cfg_pulse_sequence_f_4_address0;
output   cfg_pulse_sequence_f_4_ce0;
input  [31:0] cfg_pulse_sequence_f_4_q0;
output  [4:0] cfg_pulse_sequence_t_address0;
output   cfg_pulse_sequence_t_ce0;
input  [31:0] cfg_pulse_sequence_t_q0;
output  [4:0] cfg_pulse_sequence_t_16_address0;
output   cfg_pulse_sequence_t_16_ce0;
input  [31:0] cfg_pulse_sequence_t_16_q0;
output  [4:0] cfg_pulse_sequence_t_17_address0;
output   cfg_pulse_sequence_t_17_ce0;
input  [31:0] cfg_pulse_sequence_t_17_q0;
output  [4:0] cfg_pulse_sequence_t_18_address0;
output   cfg_pulse_sequence_t_18_ce0;
input  [31:0] cfg_pulse_sequence_t_18_q0;
output  [4:0] cfg_pulse_sequence_t_19_address0;
output   cfg_pulse_sequence_t_19_ce0;
input  [31:0] cfg_pulse_sequence_t_19_q0;
output  [4:0] cfg_pulse_sequence_t_20_address0;
output   cfg_pulse_sequence_t_20_ce0;
input  [31:0] cfg_pulse_sequence_t_20_q0;
output  [4:0] cfg_pulse_sequence_t_21_address0;
output   cfg_pulse_sequence_t_21_ce0;
input  [31:0] cfg_pulse_sequence_t_21_q0;
output  [4:0] cfg_pulse_sequence_t_22_address0;
output   cfg_pulse_sequence_t_22_ce0;
input  [31:0] cfg_pulse_sequence_t_22_q0;
output  [4:0] cfg_pulse_sequence_t_23_address0;
output   cfg_pulse_sequence_t_23_ce0;
input  [31:0] cfg_pulse_sequence_t_23_q0;
output  [4:0] cfg_pulse_sequence_t_24_address0;
output   cfg_pulse_sequence_t_24_ce0;
input  [31:0] cfg_pulse_sequence_t_24_q0;
output  [4:0] cfg_pulse_sequence_t_25_address0;
output   cfg_pulse_sequence_t_25_ce0;
input  [31:0] cfg_pulse_sequence_t_25_q0;
output  [4:0] cfg_pulse_sequence_t_26_address0;
output   cfg_pulse_sequence_t_26_ce0;
input  [31:0] cfg_pulse_sequence_t_26_q0;
output  [4:0] cfg_pulse_sequence_t_27_address0;
output   cfg_pulse_sequence_t_27_ce0;
input  [31:0] cfg_pulse_sequence_t_27_q0;
output  [4:0] cfg_pulse_sequence_t_28_address0;
output   cfg_pulse_sequence_t_28_ce0;
input  [31:0] cfg_pulse_sequence_t_28_q0;
output  [4:0] cfg_pulse_sequence_t_29_address0;
output   cfg_pulse_sequence_t_29_ce0;
input  [31:0] cfg_pulse_sequence_t_29_q0;
output  [4:0] cfg_pulse_sequence_t_30_address0;
output   cfg_pulse_sequence_t_30_ce0;
input  [31:0] cfg_pulse_sequence_t_30_q0;
output  [7:0] cfg_filter_coefs_ch0_address0;
output   cfg_filter_coefs_ch0_ce0;
input  [31:0] cfg_filter_coefs_ch0_q0;
output  [7:0] cfg_filter_coefs_ch1_address0;
output   cfg_filter_coefs_ch1_ce0;
input  [31:0] cfg_filter_coefs_ch1_q0;
output  [7:0] cfg_filter_coefs_ch2_address0;
output   cfg_filter_coefs_ch2_ce0;
input  [31:0] cfg_filter_coefs_ch2_q0;
output  [23:0] coef_ch0_V_V_TDATA;
output   coef_ch0_V_V_TVALID;
input   coef_ch0_V_V_TREADY;
output  [23:0] coef_ch1_V_V_TDATA;
output   coef_ch1_V_V_TVALID;
input   coef_ch1_V_V_TREADY;
output  [23:0] coef_ch2_V_V_TDATA;
output   coef_ch2_V_V_TVALID;
input   coef_ch2_V_V_TREADY;
output  [812:0] pulse_queue_0_V_din;
input   pulse_queue_0_V_full_n;
output   pulse_queue_0_V_write;
output  [812:0] pulse_queue_1_V_din;
input   pulse_queue_1_V_full_n;
output   pulse_queue_1_V_write;
output  [812:0] pulse_queue_2_V_din;
input   pulse_queue_2_V_full_n;
output   pulse_queue_2_V_write;
output  [812:0] pulse_queue_s_V_din;
input   pulse_queue_s_V_full_n;
output   pulse_queue_s_V_write;

reg ap_done;
reg ap_idle;
reg cfg_pulse_sequence_p_ce0;
reg cfg_pulse_sequence_p_2_ce0;
reg cfg_pulse_sequence_n_ce0;
reg cfg_pulse_sequence_b_ce0;
reg cfg_pulse_sequence_c_ce0;
reg cfg_pulse_sequence_f_ce0;
reg cfg_pulse_sequence_f_3_ce0;
reg cfg_pulse_sequence_f_4_ce0;
reg cfg_pulse_sequence_t_ce0;
reg cfg_pulse_sequence_t_16_ce0;
reg cfg_pulse_sequence_t_17_ce0;
reg cfg_pulse_sequence_t_18_ce0;
reg cfg_pulse_sequence_t_19_ce0;
reg cfg_pulse_sequence_t_20_ce0;
reg cfg_pulse_sequence_t_21_ce0;
reg cfg_pulse_sequence_t_22_ce0;
reg cfg_pulse_sequence_t_23_ce0;
reg cfg_pulse_sequence_t_24_ce0;
reg cfg_pulse_sequence_t_25_ce0;
reg cfg_pulse_sequence_t_26_ce0;
reg cfg_pulse_sequence_t_27_ce0;
reg cfg_pulse_sequence_t_28_ce0;
reg cfg_pulse_sequence_t_29_ce0;
reg cfg_pulse_sequence_t_30_ce0;
reg cfg_filter_coefs_ch0_ce0;
reg cfg_filter_coefs_ch1_ce0;
reg cfg_filter_coefs_ch2_ce0;
reg[812:0] pulse_queue_0_V_din;
reg pulse_queue_0_V_write;
reg[812:0] pulse_queue_1_V_din;
reg pulse_queue_1_V_write;
reg[812:0] pulse_queue_2_V_din;
reg pulse_queue_2_V_write;
reg[812:0] pulse_queue_s_V_din;
reg pulse_queue_s_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg   [23:0] coef_ch0_V_V_1_data_in;
reg   [23:0] coef_ch0_V_V_1_data_out;
reg    coef_ch0_V_V_1_vld_in;
wire    coef_ch0_V_V_1_vld_out;
wire    coef_ch0_V_V_1_ack_in;
wire    coef_ch0_V_V_1_ack_out;
reg   [23:0] coef_ch0_V_V_1_payload_A;
reg   [23:0] coef_ch0_V_V_1_payload_B;
reg    coef_ch0_V_V_1_sel_rd;
reg    coef_ch0_V_V_1_sel_wr;
wire    coef_ch0_V_V_1_sel;
wire    coef_ch0_V_V_1_load_A;
wire    coef_ch0_V_V_1_load_B;
reg   [1:0] coef_ch0_V_V_1_state;
wire    coef_ch0_V_V_1_state_cmp_full;
reg   [23:0] coef_ch1_V_V_1_data_in;
reg   [23:0] coef_ch1_V_V_1_data_out;
reg    coef_ch1_V_V_1_vld_in;
wire    coef_ch1_V_V_1_vld_out;
wire    coef_ch1_V_V_1_ack_in;
wire    coef_ch1_V_V_1_ack_out;
reg   [23:0] coef_ch1_V_V_1_payload_A;
reg   [23:0] coef_ch1_V_V_1_payload_B;
reg    coef_ch1_V_V_1_sel_rd;
reg    coef_ch1_V_V_1_sel_wr;
wire    coef_ch1_V_V_1_sel;
wire    coef_ch1_V_V_1_load_A;
wire    coef_ch1_V_V_1_load_B;
reg   [1:0] coef_ch1_V_V_1_state;
wire    coef_ch1_V_V_1_state_cmp_full;
reg   [23:0] coef_ch2_V_V_1_data_in;
reg   [23:0] coef_ch2_V_V_1_data_out;
reg    coef_ch2_V_V_1_vld_in;
wire    coef_ch2_V_V_1_vld_out;
wire    coef_ch2_V_V_1_ack_in;
wire    coef_ch2_V_V_1_ack_out;
reg   [23:0] coef_ch2_V_V_1_payload_A;
reg   [23:0] coef_ch2_V_V_1_payload_B;
reg    coef_ch2_V_V_1_sel_rd;
reg    coef_ch2_V_V_1_sel_wr;
wire    coef_ch2_V_V_1_sel;
wire    coef_ch2_V_V_1_load_A;
wire    coef_ch2_V_V_1_load_B;
reg   [1:0] coef_ch2_V_V_1_state;
wire    coef_ch2_V_V_1_state_cmp_full;
reg    coef_ch0_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_i_fu_796_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    coef_ch1_V_V_TDATA_blk_n;
reg    coef_ch2_V_V_TDATA_blk_n;
reg    pulse_queue_0_V_blk_n;
wire    ap_CS_fsm_state49;
reg   [0:0] tmp_8_reg_1991;
wire    ap_CS_fsm_state51;
reg    pulse_queue_1_V_blk_n;
wire   [0:0] tmp_9_fu_1253_p3;
reg    pulse_queue_2_V_blk_n;
wire   [0:0] tmp_10_fu_1297_p3;
reg    pulse_queue_s_V_blk_n;
wire    ap_CS_fsm_state48;
reg    ap_block_state1;
wire   [31:0] cfg_pulse_sequence_l_1_fu_788_p1;
reg   [31:0] cfg_pulse_sequence_l_1_reg_1419;
wire   [31:0] cfg_pulse_sequence_s_1_fu_792_p1;
reg   [31:0] cfg_pulse_sequence_s_1_reg_1424;
wire   [2:0] set_fu_802_p2;
reg   [2:0] set_reg_1432;
reg    ap_block_state2_io;
wire   [23:0] tmp_V_fu_808_p1;
wire   [8:0] tmp_2_fu_845_p2;
reg   [8:0] tmp_2_reg_1481;
reg    ap_block_state3_io;
wire   [5:0] coef_fu_857_p2;
reg   [5:0] coef_reg_1489;
wire    ap_CS_fsm_state4;
wire   [8:0] tmp_3_fu_873_p2;
reg   [8:0] tmp_3_reg_1494;
wire   [0:0] exitcond2_i_fu_851_p2;
wire    ap_CS_fsm_state5;
wire   [23:0] tmp_V_1_fu_884_p1;
reg    ap_block_state6_io;
wire   [23:0] tmp_V_2_fu_889_p1;
wire   [23:0] tmp_V_3_fu_894_p1;
reg   [31:0] seq_idx_1_load_reg_1529;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_5_i_fu_902_p2;
reg   [0:0] tmp_5_i_reg_1535;
reg   [31:0] cfg_pulse_sequence_p_6_reg_1659;
wire    ap_CS_fsm_state9;
reg   [31:0] pulse_definition_num_reg_1667;
reg   [31:0] pulse_definition_blo_reg_1676;
reg   [31:0] pulse_definition_con_reg_1681;
reg   [31:0] pulse_definition_fil_reg_1689;
reg   [31:0] pulse_definition_fil_1_reg_1697;
reg   [31:0] pulse_definition_fil_2_reg_1705;
reg   [31:0] pulse_definition_tim_reg_1713;
reg   [31:0] pulse_definition_tim_1_reg_1721;
reg   [31:0] pulse_definition_tim_2_reg_1730;
reg   [31:0] pulse_definition_tim_3_reg_1739;
reg   [31:0] pulse_definition_tim_4_reg_1748;
reg   [31:0] pulse_definition_tim_5_reg_1756;
reg   [31:0] pulse_definition_tim_6_reg_1764;
reg   [31:0] pulse_definition_tim_7_reg_1772;
reg   [31:0] pulse_definition_tim_8_reg_1780;
reg   [31:0] pulse_definition_tim_9_reg_1788;
reg   [31:0] pulse_definition_tim_10_reg_1796;
reg   [31:0] pulse_definition_tim_11_reg_1804;
reg   [31:0] pulse_definition_tim_12_reg_1812;
reg   [31:0] pulse_definition_tim_13_reg_1820;
reg   [31:0] pulse_definition_tim_14_reg_1828;
reg   [31:0] pulse_definition_tim_15_reg_1836;
wire   [7:0] pulse_sequence_index_fu_943_p2;
reg   [7:0] pulse_sequence_index_reg_1844;
wire   [31:0] tmp_2_i_fu_948_p2;
reg   [31:0] tmp_2_i_reg_1852;
wire   [31:0] totalTime_i_fu_954_p2;
reg   [31:0] totalTime_i_reg_1857;
wire   [31:0] totalTime_i_7_fu_960_p2;
reg   [31:0] totalTime_i_7_reg_1863;
wire   [31:0] totalTime_2_i_fu_966_p2;
reg   [31:0] totalTime_2_i_reg_1869;
wire   [31:0] pulse_rep_fu_977_p2;
reg   [31:0] pulse_rep_reg_1878;
wire    ap_CS_fsm_state10;
wire   [0:0] pulse_first_pulse_in_fu_983_p2;
reg   [0:0] pulse_first_pulse_in_reg_1883;
wire   [0:0] tmp_9_i_fu_972_p2;
wire   [0:0] pulse_last_pulse_in_s_fu_989_p2;
reg   [0:0] pulse_last_pulse_in_s_reg_1891;
wire   [31:0] pulse_definition_prt_q0;
reg   [31:0] pulse_definition_prt_4_reg_1905;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_18_i_fu_1019_p2;
reg   [31:0] tmp_18_i_reg_1919;
wire    ap_CS_fsm_state12;
wire   [31:0] tmp_18_1_i_fu_1034_p2;
reg   [31:0] tmp_18_1_i_reg_1924;
wire   [31:0] tmp_18_2_i_fu_1049_p2;
reg   [31:0] tmp_18_2_i_reg_1929;
wire   [0:0] pulse_first_pulse_in_1_fu_1069_p2;
reg   [0:0] pulse_first_pulse_in_1_reg_1934;
wire    ap_CS_fsm_state47;
wire   [31:0] num_pulses_scheduled_5_fu_1075_p2;
reg   [31:0] num_pulses_scheduled_5_reg_1942;
wire   [0:0] tmp_8_i_fu_1081_p2;
reg   [0:0] tmp_8_i_reg_1947;
wire   [31:0] tmp_def_block_post_t_fu_1089_p3;
reg   [31:0] tmp_def_block_post_t_reg_1952;
wire   [31:0] pulse_num_samples_fu_1101_p3;
reg   [31:0] pulse_num_samples_reg_1959;
wire   [31:0] pulse_num_samples_1_fu_1115_p3;
reg   [31:0] pulse_num_samples_1_reg_1964;
wire   [31:0] pulse_num_samples_2_fu_1129_p3;
reg   [31:0] pulse_num_samples_2_reg_1969;
wire   [0:0] not_or_cond_i_fu_1155_p2;
reg   [0:0] not_or_cond_i_reg_1975;
wire   [0:0] pulse_last_pulse_in_1_fu_1161_p2;
reg   [0:0] pulse_last_pulse_in_1_reg_1979;
wire   [31:0] p_1_i_fu_1166_p3;
reg   [31:0] p_1_i_reg_1986;
wire   [0:0] tmp_8_fu_1213_p1;
wire   [7:0] staggered_prt_index_fu_1347_p2;
reg   [7:0] staggered_prt_index_reg_2001;
reg    ap_block_state49;
wire   [7:0] staggered_prt_index_1_fu_1388_p3;
wire    ap_CS_fsm_state50;
reg   [0:0] pulse_definition_prt_address0;
reg    pulse_definition_prt_ce0;
reg    pulse_definition_prt_we0;
reg   [0:0] pulse_definition_prt_address1;
reg    pulse_definition_prt_ce1;
reg    pulse_definition_prt_we1;
wire   [31:0] pulse_definition_prt_q1;
reg   [2:0] val_assign_reg_734;
reg   [5:0] coef_i_reg_746;
reg    ap_block_state7_io;
reg   [7:0] staggered_prt_index_s_reg_757;
reg   [31:0] pulse_rep_i_reg_769;
wire  signed [63:0] tmp_3_cast_fu_878_p1;
wire   [63:0] tmp_7_i_fu_912_p1;
wire   [63:0] tmp_3_i_fu_994_p1;
wire   [63:0] tmp_11_i_fu_1353_p1;
reg    ap_block_state51;
wire   [812:0] tmp176_fu_1173_p32;
wire   [812:0] tmp_122_fu_1216_p32;
wire   [812:0] tmp_2344_fu_1260_p32;
wire   [812:0] tmp_3512_fu_1304_p32;
reg   [31:0] seq_idx_1_fu_268;
wire   [31:0] seq_idx_fu_999_p2;
reg   [31:0] num_pulses_scheduled_2_fu_272;
reg   [31:0] num_pulses_scheduled_1_fu_276;
wire   [31:0] num_pulses_scheduled_fu_1341_p2;
reg   [31:0] tmp_num_samples_fu_280;
wire   [6:0] tmp_1_fu_833_p3;
wire   [8:0] tmp_fu_825_p3;
wire   [8:0] p_shl1_cast_fu_841_p1;
wire   [5:0] tmp_i_fu_863_p2;
wire   [8:0] tmp_1_i_cast_fu_869_p1;
wire   [31:0] tmp_6_i_fu_907_p2;
wire   [7:0] tmp_4_fu_940_p1;
wire   [0:0] tmp_17_i_fu_1009_p2;
wire   [31:0] pulse_definition_prt_5_fu_1013_p3;
wire   [0:0] tmp_17_1_i_fu_1024_p2;
wire   [31:0] pulse_definition_prt_6_fu_1028_p3;
wire   [0:0] tmp_17_2_i_fu_1039_p2;
wire   [31:0] pulse_definition_prt_7_fu_1043_p3;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_1054_p2;
wire   [0:0] tmp_19_i_fu_1095_p2;
wire   [31:0] grp_fu_1058_p2;
wire   [0:0] tmp_19_1_i_fu_1109_p2;
wire   [31:0] grp_fu_1062_p2;
wire   [0:0] tmp_19_2_i_fu_1123_p2;
wire   [0:0] ult_fu_1143_p2;
wire   [0:0] rev_fu_1149_p2;
wire   [0:0] notlhs_i_fu_1137_p2;
wire   [0:0] tmp_10_i_fu_1371_p2;
wire   [0:0] tmp_12_i_fu_1376_p2;
wire   [0:0] sel_tmp_fu_1382_p2;
reg    grp_fu_1054_ap_start;
wire    grp_fu_1054_ap_done;
reg    grp_fu_1054_ce;
reg    grp_fu_1058_ap_start;
wire    grp_fu_1058_ap_done;
reg    grp_fu_1058_ce;
reg    grp_fu_1062_ap_start;
wire    grp_fu_1062_ap_done;
reg    grp_fu_1062_ce;
reg   [50:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 51'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 coef_ch0_V_V_1_sel_rd = 1'b0;
#0 coef_ch0_V_V_1_sel_wr = 1'b0;
#0 coef_ch0_V_V_1_state = 2'd0;
#0 coef_ch1_V_V_1_sel_rd = 1'b0;
#0 coef_ch1_V_V_1_sel_wr = 1'b0;
#0 coef_ch1_V_V_1_state = 2'd0;
#0 coef_ch2_V_V_1_sel_rd = 1'b0;
#0 coef_ch2_V_V_1_sel_wr = 1'b0;
#0 coef_ch2_V_V_1_state = 2'd0;
end

scheduler_parser_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
pulse_definition_prt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pulse_definition_prt_address0),
    .ce0(pulse_definition_prt_ce0),
    .we0(pulse_definition_prt_we0),
    .d0(cfg_pulse_sequence_p_q0),
    .q0(pulse_definition_prt_q0),
    .address1(pulse_definition_prt_address1),
    .ce1(pulse_definition_prt_ce1),
    .we1(pulse_definition_prt_we1),
    .d1(cfg_pulse_sequence_p_2_q0),
    .q1(pulse_definition_prt_q1)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1054_ap_start),
    .done(grp_fu_1054_ap_done),
    .din0(tmp_18_i_reg_1919),
    .din1(cfg_decimation),
    .ce(grp_fu_1054_ce),
    .dout(grp_fu_1054_p2)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1058_ap_start),
    .done(grp_fu_1058_ap_done),
    .din0(tmp_18_1_i_reg_1924),
    .din1(cfg_decimation),
    .ce(grp_fu_1058_ce),
    .dout(grp_fu_1058_p2)
);

hcr_controller_udcud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hcr_controller_udcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1062_ap_start),
    .done(grp_fu_1062_ap_done),
    .din0(tmp_18_2_i_reg_1929),
    .din1(cfg_decimation),
    .ce(grp_fu_1062_ce),
    .dout(grp_fu_1062_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch0_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == coef_ch0_V_V_1_ack_out) & (1'b1 == coef_ch0_V_V_1_vld_out))) begin
            coef_ch0_V_V_1_sel_rd <= ~coef_ch0_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch0_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == coef_ch0_V_V_1_vld_in) & (1'b1 == coef_ch0_V_V_1_ack_in))) begin
            coef_ch0_V_V_1_sel_wr <= ~coef_ch0_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch0_V_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == coef_ch0_V_V_1_vld_in) & (1'b1 == coef_ch0_V_V_1_ack_out) & (coef_ch0_V_V_1_state == 2'd3)) | ((1'b0 == coef_ch0_V_V_1_vld_in) & (coef_ch0_V_V_1_state == 2'd2)))) begin
            coef_ch0_V_V_1_state <= 2'd2;
        end else if ((((1'b1 == coef_ch0_V_V_1_vld_in) & (1'b0 == coef_ch0_V_V_1_ack_out) & (coef_ch0_V_V_1_state == 2'd3)) | ((1'b0 == coef_ch0_V_V_1_ack_out) & (coef_ch0_V_V_1_state == 2'd1)))) begin
            coef_ch0_V_V_1_state <= 2'd1;
        end else if ((((1'b1 == coef_ch0_V_V_1_vld_in) & (coef_ch0_V_V_1_state == 2'd2)) | ((1'b1 == coef_ch0_V_V_1_ack_out) & (coef_ch0_V_V_1_state == 2'd1)) | ((coef_ch0_V_V_1_state == 2'd3) & ~((1'b1 == coef_ch0_V_V_1_vld_in) & (1'b0 == coef_ch0_V_V_1_ack_out)) & ~((1'b0 == coef_ch0_V_V_1_vld_in) & (1'b1 == coef_ch0_V_V_1_ack_out))))) begin
            coef_ch0_V_V_1_state <= 2'd3;
        end else begin
            coef_ch0_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch1_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == coef_ch1_V_V_1_ack_out) & (1'b1 == coef_ch1_V_V_1_vld_out))) begin
            coef_ch1_V_V_1_sel_rd <= ~coef_ch1_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch1_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == coef_ch1_V_V_1_vld_in) & (1'b1 == coef_ch1_V_V_1_ack_in))) begin
            coef_ch1_V_V_1_sel_wr <= ~coef_ch1_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch1_V_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == coef_ch1_V_V_1_vld_in) & (1'b1 == coef_ch1_V_V_1_ack_out) & (2'd3 == coef_ch1_V_V_1_state)) | ((1'b0 == coef_ch1_V_V_1_vld_in) & (2'd2 == coef_ch1_V_V_1_state)))) begin
            coef_ch1_V_V_1_state <= 2'd2;
        end else if ((((1'b1 == coef_ch1_V_V_1_vld_in) & (1'b0 == coef_ch1_V_V_1_ack_out) & (2'd3 == coef_ch1_V_V_1_state)) | ((1'b0 == coef_ch1_V_V_1_ack_out) & (2'd1 == coef_ch1_V_V_1_state)))) begin
            coef_ch1_V_V_1_state <= 2'd1;
        end else if ((((1'b1 == coef_ch1_V_V_1_vld_in) & (2'd2 == coef_ch1_V_V_1_state)) | ((1'b1 == coef_ch1_V_V_1_ack_out) & (2'd1 == coef_ch1_V_V_1_state)) | ((2'd3 == coef_ch1_V_V_1_state) & ~((1'b1 == coef_ch1_V_V_1_vld_in) & (1'b0 == coef_ch1_V_V_1_ack_out)) & ~((1'b0 == coef_ch1_V_V_1_vld_in) & (1'b1 == coef_ch1_V_V_1_ack_out))))) begin
            coef_ch1_V_V_1_state <= 2'd3;
        end else begin
            coef_ch1_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch2_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == coef_ch2_V_V_1_ack_out) & (1'b1 == coef_ch2_V_V_1_vld_out))) begin
            coef_ch2_V_V_1_sel_rd <= ~coef_ch2_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch2_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == coef_ch2_V_V_1_vld_in) & (1'b1 == coef_ch2_V_V_1_ack_in))) begin
            coef_ch2_V_V_1_sel_wr <= ~coef_ch2_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        coef_ch2_V_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == coef_ch2_V_V_1_vld_in) & (1'b1 == coef_ch2_V_V_1_ack_out) & (2'd3 == coef_ch2_V_V_1_state)) | ((1'b0 == coef_ch2_V_V_1_vld_in) & (2'd2 == coef_ch2_V_V_1_state)))) begin
            coef_ch2_V_V_1_state <= 2'd2;
        end else if ((((1'b1 == coef_ch2_V_V_1_vld_in) & (1'b0 == coef_ch2_V_V_1_ack_out) & (2'd3 == coef_ch2_V_V_1_state)) | ((1'b0 == coef_ch2_V_V_1_ack_out) & (2'd1 == coef_ch2_V_V_1_state)))) begin
            coef_ch2_V_V_1_state <= 2'd1;
        end else if ((((1'b1 == coef_ch2_V_V_1_vld_in) & (2'd2 == coef_ch2_V_V_1_state)) | ((1'b1 == coef_ch2_V_V_1_ack_out) & (2'd1 == coef_ch2_V_V_1_state)) | ((2'd3 == coef_ch2_V_V_1_state) & ~((1'b1 == coef_ch2_V_V_1_vld_in) & (1'b0 == coef_ch2_V_V_1_ack_out)) & ~((1'b0 == coef_ch2_V_V_1_vld_in) & (1'b1 == coef_ch2_V_V_1_ack_out))))) begin
            coef_ch2_V_V_1_state <= 2'd3;
        end else begin
            coef_ch2_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
        coef_i_reg_746 <= coef_reg_1489;
    end else if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0))) begin
        coef_i_reg_746 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n))) & (1'd0 == not_or_cond_i_reg_1975))) begin
        num_pulses_scheduled_1_fu_276 <= num_pulses_scheduled_fu_1341_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0) & (1'd1 == exitcond1_i_fu_796_p2))) begin
        num_pulses_scheduled_1_fu_276 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n))) & (1'd0 == not_or_cond_i_reg_1975))) begin
        num_pulses_scheduled_2_fu_272 <= p_1_i_reg_1986;
    end else if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0) & (1'd1 == exitcond1_i_fu_796_p2))) begin
        num_pulses_scheduled_2_fu_272 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        pulse_rep_i_reg_769 <= pulse_rep_reg_1878;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_rep_i_reg_769 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == tmp_5_i_reg_1535) & (1'd0 == tmp_9_i_fu_972_p2))) begin
        seq_idx_1_fu_268 <= seq_idx_fu_999_p2;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0) & (1'd1 == exitcond1_i_fu_796_p2)) | ((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_5_i_fu_902_p2)))) begin
        seq_idx_1_fu_268 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        staggered_prt_index_s_reg_757 <= staggered_prt_index_1_fu_1388_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        staggered_prt_index_s_reg_757 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond2_i_fu_851_p2))) begin
        val_assign_reg_734 <= set_reg_1432;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        val_assign_reg_734 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        cfg_pulse_sequence_l_1_reg_1419[7 : 0] <= cfg_pulse_sequence_l_1_fu_788_p1[7 : 0];
        cfg_pulse_sequence_s_1_reg_1424[7 : 0] <= cfg_pulse_sequence_s_1_fu_792_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cfg_pulse_sequence_p_6_reg_1659 <= cfg_pulse_sequence_p_2_q0;
        pulse_definition_blo_reg_1676 <= cfg_pulse_sequence_b_q0;
        pulse_definition_con_reg_1681 <= cfg_pulse_sequence_c_q0;
        pulse_definition_fil_1_reg_1697 <= cfg_pulse_sequence_f_3_q0;
        pulse_definition_fil_2_reg_1705 <= cfg_pulse_sequence_f_4_q0;
        pulse_definition_fil_reg_1689 <= cfg_pulse_sequence_f_q0;
        pulse_definition_num_reg_1667 <= cfg_pulse_sequence_n_q0;
        pulse_definition_tim_10_reg_1796 <= cfg_pulse_sequence_t_25_q0;
        pulse_definition_tim_11_reg_1804 <= cfg_pulse_sequence_t_26_q0;
        pulse_definition_tim_12_reg_1812 <= cfg_pulse_sequence_t_27_q0;
        pulse_definition_tim_13_reg_1820 <= cfg_pulse_sequence_t_28_q0;
        pulse_definition_tim_14_reg_1828 <= cfg_pulse_sequence_t_29_q0;
        pulse_definition_tim_15_reg_1836 <= cfg_pulse_sequence_t_30_q0;
        pulse_definition_tim_1_reg_1721 <= cfg_pulse_sequence_t_16_q0;
        pulse_definition_tim_2_reg_1730 <= cfg_pulse_sequence_t_17_q0;
        pulse_definition_tim_3_reg_1739 <= cfg_pulse_sequence_t_18_q0;
        pulse_definition_tim_4_reg_1748 <= cfg_pulse_sequence_t_19_q0;
        pulse_definition_tim_5_reg_1756 <= cfg_pulse_sequence_t_20_q0;
        pulse_definition_tim_6_reg_1764 <= cfg_pulse_sequence_t_21_q0;
        pulse_definition_tim_7_reg_1772 <= cfg_pulse_sequence_t_22_q0;
        pulse_definition_tim_8_reg_1780 <= cfg_pulse_sequence_t_23_q0;
        pulse_definition_tim_9_reg_1788 <= cfg_pulse_sequence_t_24_q0;
        pulse_definition_tim_reg_1713 <= cfg_pulse_sequence_t_q0;
        pulse_sequence_index_reg_1844 <= pulse_sequence_index_fu_943_p2;
        tmp_2_i_reg_1852 <= tmp_2_i_fu_948_p2;
        totalTime_2_i_reg_1869 <= totalTime_2_i_fu_966_p2;
        totalTime_i_7_reg_1863 <= totalTime_i_7_fu_960_p2;
        totalTime_i_reg_1857 <= totalTime_i_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == coef_ch0_V_V_1_load_A)) begin
        coef_ch0_V_V_1_payload_A <= coef_ch0_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == coef_ch0_V_V_1_load_B)) begin
        coef_ch0_V_V_1_payload_B <= coef_ch0_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == coef_ch1_V_V_1_load_A)) begin
        coef_ch1_V_V_1_payload_A <= coef_ch1_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == coef_ch1_V_V_1_load_B)) begin
        coef_ch1_V_V_1_payload_B <= coef_ch1_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == coef_ch2_V_V_1_load_A)) begin
        coef_ch2_V_V_1_payload_A <= coef_ch2_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == coef_ch2_V_V_1_load_B)) begin
        coef_ch2_V_V_1_payload_B <= coef_ch2_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coef_reg_1489 <= coef_fu_857_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (pulse_queue_s_V_full_n == 1'b1))) begin
        not_or_cond_i_reg_1975 <= not_or_cond_i_fu_1155_p2;
        p_1_i_reg_1986 <= p_1_i_fu_1166_p3;
        pulse_last_pulse_in_1_reg_1979 <= pulse_last_pulse_in_1_fu_1161_p2;
        pulse_num_samples_1_reg_1964 <= pulse_num_samples_1_fu_1115_p3;
        pulse_num_samples_2_reg_1969 <= pulse_num_samples_2_fu_1129_p3;
        pulse_num_samples_reg_1959 <= pulse_num_samples_fu_1101_p3;
        tmp_8_reg_1991 <= tmp_8_fu_1213_p1;
        tmp_def_block_post_t_reg_1952 <= tmp_def_block_post_t_fu_1089_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        num_pulses_scheduled_5_reg_1942 <= num_pulses_scheduled_5_fu_1075_p2;
        pulse_first_pulse_in_1_reg_1934 <= pulse_first_pulse_in_1_fu_1069_p2;
        tmp_8_i_reg_1947 <= tmp_8_i_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pulse_definition_prt_4_reg_1905 <= pulse_definition_prt_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == tmp_5_i_reg_1535) & (1'd1 == tmp_9_i_fu_972_p2))) begin
        pulse_first_pulse_in_reg_1883 <= pulse_first_pulse_in_fu_983_p2;
        pulse_last_pulse_in_s_reg_1891 <= pulse_last_pulse_in_s_fu_989_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == tmp_5_i_reg_1535))) begin
        pulse_rep_reg_1878 <= pulse_rep_fu_977_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        seq_idx_1_load_reg_1529 <= seq_idx_1_fu_268;
        tmp_5_i_reg_1535 <= tmp_5_i_fu_902_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0))) begin
        set_reg_1432 <= set_fu_802_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n))) & (1'd0 == not_or_cond_i_reg_1975))) begin
        staggered_prt_index_reg_2001 <= staggered_prt_index_fu_1347_p2;
        tmp_num_samples_fu_280 <= pulse_num_samples_2_reg_1969;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_18_1_i_reg_1924 <= tmp_18_1_i_fu_1034_p2;
        tmp_18_2_i_reg_1929 <= tmp_18_2_i_fu_1049_p2;
        tmp_18_i_reg_1919 <= tmp_18_i_fu_1019_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0))) begin
        tmp_2_reg_1481[8 : 4] <= tmp_2_fu_845_p2[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_i_fu_851_p2))) begin
        tmp_3_reg_1494 <= tmp_3_fu_873_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch0_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch1_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cfg_filter_coefs_ch2_ce0 = 1'b1;
    end else begin
        cfg_filter_coefs_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_b_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_c_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_3_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_4_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_f_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_n_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_n_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_p_2_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_p_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_16_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_17_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_18_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_19_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_20_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_21_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_22_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_23_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_24_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_25_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_26_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_27_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_28_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_29_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_30_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cfg_pulse_sequence_t_ce0 = 1'b1;
    end else begin
        cfg_pulse_sequence_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch0_V_V_1_data_in = tmp_V_1_fu_884_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2))) begin
        coef_ch0_V_V_1_data_in = tmp_V_fu_808_p1;
    end else begin
        coef_ch0_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == coef_ch0_V_V_1_sel)) begin
        coef_ch0_V_V_1_data_out = coef_ch0_V_V_1_payload_B;
    end else begin
        coef_ch0_V_V_1_data_out = coef_ch0_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2) & (ap_block_state2_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0)))) begin
        coef_ch0_V_V_1_vld_in = 1'b1;
    end else begin
        coef_ch0_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        coef_ch0_V_V_TDATA_blk_n = coef_ch0_V_V_1_state[1'd1];
    end else begin
        coef_ch0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch1_V_V_1_data_in = tmp_V_2_fu_889_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2))) begin
        coef_ch1_V_V_1_data_in = tmp_V_fu_808_p1;
    end else begin
        coef_ch1_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == coef_ch1_V_V_1_sel)) begin
        coef_ch1_V_V_1_data_out = coef_ch1_V_V_1_payload_B;
    end else begin
        coef_ch1_V_V_1_data_out = coef_ch1_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2) & (ap_block_state2_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0)))) begin
        coef_ch1_V_V_1_vld_in = 1'b1;
    end else begin
        coef_ch1_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        coef_ch1_V_V_TDATA_blk_n = coef_ch1_V_V_1_state[1'd1];
    end else begin
        coef_ch1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        coef_ch2_V_V_1_data_in = tmp_V_3_fu_894_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2))) begin
        coef_ch2_V_V_1_data_in = tmp_V_fu_808_p1;
    end else begin
        coef_ch2_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == coef_ch2_V_V_1_sel)) begin
        coef_ch2_V_V_1_data_out = coef_ch2_V_V_1_payload_B;
    end else begin
        coef_ch2_V_V_1_data_out = coef_ch2_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2) & (ap_block_state2_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0)))) begin
        coef_ch2_V_V_1_vld_in = 1'b1;
    end else begin
        coef_ch2_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        coef_ch2_V_V_TDATA_blk_n = coef_ch2_V_V_1_state[1'd1];
    end else begin
        coef_ch2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_1054_ap_start = 1'b1;
    end else begin
        grp_fu_1054_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_1054_ce = 1'b0;
    end else begin
        grp_fu_1054_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_1058_ap_start = 1'b1;
    end else begin
        grp_fu_1058_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_1058_ce = 1'b0;
    end else begin
        grp_fu_1058_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_1062_ap_start = 1'b1;
    end else begin
        grp_fu_1062_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state50))) begin
        grp_fu_1062_ce = 1'b0;
    end else begin
        grp_fu_1062_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n)))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pulse_definition_prt_address0 = tmp_3_i_fu_994_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_address0 = 64'd0;
    end else begin
        pulse_definition_prt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        pulse_definition_prt_address1 = tmp_11_i_fu_1353_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_address1 = 64'd1;
    end else begin
        pulse_definition_prt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        pulse_definition_prt_ce0 = 1'b1;
    end else begin
        pulse_definition_prt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state49) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n)))))) begin
        pulse_definition_prt_ce1 = 1'b1;
    end else begin
        pulse_definition_prt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_we0 = 1'b1;
    end else begin
        pulse_definition_prt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pulse_definition_prt_we1 = 1'b1;
    end else begin
        pulse_definition_prt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_8_reg_1991)) | (1'b1 == ap_CS_fsm_state51))) begin
        pulse_queue_0_V_blk_n = pulse_queue_0_V_full_n;
    end else begin
        pulse_queue_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n)))) begin
        pulse_queue_0_V_din = 813'd27312187117075883106631072934794271937104930088205959824983071996985496526101020964951786294769886374883040913790702552866360531575272919369168306390347079868805765445689403631464768659094790245289840706092591521717005303961503585448607241732096;
    end else if (((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_8_reg_1991) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n))))) begin
        pulse_queue_0_V_din = tmp_122_fu_1216_p32;
    end else begin
        pulse_queue_0_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n))) | ((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_8_reg_1991) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n)))))) begin
        pulse_queue_0_V_write = 1'b1;
    end else begin
        pulse_queue_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_9_fu_1253_p3)))) begin
        pulse_queue_1_V_blk_n = pulse_queue_1_V_full_n;
    end else begin
        pulse_queue_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n)))) begin
        pulse_queue_1_V_din = 813'd27312187117075883106631072934794271937104930088205959824983071996985496526101020964951786294769886374883040913790702552866360531575272919369168306390347079868805765445689403631464768659094790245289840706092591521717005303961503585448607241732096;
    end else if (((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_9_fu_1253_p3) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n))))) begin
        pulse_queue_1_V_din = tmp_2344_fu_1260_p32;
    end else begin
        pulse_queue_1_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n))) | ((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_9_fu_1253_p3) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n)))))) begin
        pulse_queue_1_V_write = 1'b1;
    end else begin
        pulse_queue_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_10_fu_1297_p3)))) begin
        pulse_queue_2_V_blk_n = pulse_queue_2_V_full_n;
    end else begin
        pulse_queue_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n)))) begin
        pulse_queue_2_V_din = 813'd27312187117075883106631072934794271937104930088205959824983071996985496526101020964951786294769886374883040913790702552866360531575272919369168306390347079868805765445689403631464768659094790245289840706092591521717005303961503585448607241732096;
    end else if (((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_10_fu_1297_p3) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n))))) begin
        pulse_queue_2_V_din = tmp_3512_fu_1304_p32;
    end else begin
        pulse_queue_2_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n))) | ((1'b1 == ap_CS_fsm_state49) & (1'd1 == tmp_10_fu_1297_p3) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n)))))) begin
        pulse_queue_2_V_write = 1'b1;
    end else begin
        pulse_queue_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state48))) begin
        pulse_queue_s_V_blk_n = pulse_queue_s_V_full_n;
    end else begin
        pulse_queue_s_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n)))) begin
        pulse_queue_s_V_din = 813'd27312187117075883106631072934794271937104930088205959824983071996985496526101020964951786294769886374883040913790702552866360531575272919369168306390347079868805765445689403631464768659094790245289840706092591521717005303961503585448607241732096;
    end else if (((1'b1 == ap_CS_fsm_state48) & (pulse_queue_s_V_full_n == 1'b1))) begin
        pulse_queue_s_V_din = tmp176_fu_1173_p32;
    end else begin
        pulse_queue_s_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state48) & (pulse_queue_s_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n))))) begin
        pulse_queue_s_V_write = 1'b1;
    end else begin
        pulse_queue_s_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0) & (1'd1 == exitcond1_i_fu_796_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_i_fu_796_p2) & (ap_block_state2_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond2_i_fu_851_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_5_i_fu_902_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ((1'd0 == tmp_9_i_fu_972_p2) | (1'd0 == tmp_5_i_reg_1535)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (pulse_queue_s_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n))) & (1'd1 == not_or_cond_i_reg_1975))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if (((1'b1 == ap_CS_fsm_state49) & ~(((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n))) & (1'd0 == not_or_cond_i_reg_1975))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & ~((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_io = (((1'd0 == exitcond1_i_fu_796_p2) & (1'b0 == coef_ch0_V_V_1_ack_in)) | ((1'd0 == exitcond1_i_fu_796_p2) & (1'b0 == coef_ch1_V_V_1_ack_in)) | ((1'd0 == exitcond1_i_fu_796_p2) & (1'b0 == coef_ch2_V_V_1_ack_in)));
end

always @ (*) begin
    ap_block_state3_io = ((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in));
end

always @ (*) begin
    ap_block_state49 = (((1'd1 == tmp_8_reg_1991) & (1'b0 == pulse_queue_0_V_full_n)) | ((1'd1 == tmp_9_fu_1253_p3) & (1'b0 == pulse_queue_1_V_full_n)) | ((1'd1 == tmp_10_fu_1297_p3) & (1'b0 == pulse_queue_2_V_full_n)));
end

always @ (*) begin
    ap_block_state51 = ((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in) | (1'b0 == pulse_queue_s_V_full_n) | (1'b0 == pulse_queue_0_V_full_n) | (1'b0 == pulse_queue_1_V_full_n) | (1'b0 == pulse_queue_2_V_full_n));
end

always @ (*) begin
    ap_block_state6_io = ((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in));
end

always @ (*) begin
    ap_block_state7_io = ((1'b0 == coef_ch0_V_V_1_ack_in) | (1'b0 == coef_ch1_V_V_1_ack_in) | (1'b0 == coef_ch2_V_V_1_ack_in));
end

assign ap_ready = internal_ap_ready;

assign cfg_filter_coefs_ch0_address0 = tmp_3_cast_fu_878_p1;

assign cfg_filter_coefs_ch1_address0 = tmp_3_cast_fu_878_p1;

assign cfg_filter_coefs_ch2_address0 = tmp_3_cast_fu_878_p1;

assign cfg_pulse_sequence_b_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_c_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_f_3_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_f_4_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_f_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_l_1_fu_788_p1 = cfg_pulse_sequence_l;

assign cfg_pulse_sequence_n_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_p_2_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_p_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_s_1_fu_792_p1 = cfg_pulse_sequence_s;

assign cfg_pulse_sequence_t_16_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_17_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_18_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_19_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_20_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_21_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_22_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_23_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_24_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_25_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_26_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_27_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_28_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_29_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_30_address0 = tmp_7_i_fu_912_p1;

assign cfg_pulse_sequence_t_address0 = tmp_7_i_fu_912_p1;

assign coef_ch0_V_V_1_ack_in = coef_ch0_V_V_1_state[1'd1];

assign coef_ch0_V_V_1_ack_out = coef_ch0_V_V_TREADY;

assign coef_ch0_V_V_1_load_A = (coef_ch0_V_V_1_state_cmp_full & ~coef_ch0_V_V_1_sel_wr);

assign coef_ch0_V_V_1_load_B = (coef_ch0_V_V_1_sel_wr & coef_ch0_V_V_1_state_cmp_full);

assign coef_ch0_V_V_1_sel = coef_ch0_V_V_1_sel_rd;

assign coef_ch0_V_V_1_state_cmp_full = ((coef_ch0_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign coef_ch0_V_V_1_vld_out = coef_ch0_V_V_1_state[1'd0];

assign coef_ch0_V_V_TDATA = coef_ch0_V_V_1_data_out;

assign coef_ch0_V_V_TVALID = coef_ch0_V_V_1_state[1'd0];

assign coef_ch1_V_V_1_ack_in = coef_ch1_V_V_1_state[1'd1];

assign coef_ch1_V_V_1_ack_out = coef_ch1_V_V_TREADY;

assign coef_ch1_V_V_1_load_A = (coef_ch1_V_V_1_state_cmp_full & ~coef_ch1_V_V_1_sel_wr);

assign coef_ch1_V_V_1_load_B = (coef_ch1_V_V_1_sel_wr & coef_ch1_V_V_1_state_cmp_full);

assign coef_ch1_V_V_1_sel = coef_ch1_V_V_1_sel_rd;

assign coef_ch1_V_V_1_state_cmp_full = ((coef_ch1_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign coef_ch1_V_V_1_vld_out = coef_ch1_V_V_1_state[1'd0];

assign coef_ch1_V_V_TDATA = coef_ch1_V_V_1_data_out;

assign coef_ch1_V_V_TVALID = coef_ch1_V_V_1_state[1'd0];

assign coef_ch2_V_V_1_ack_in = coef_ch2_V_V_1_state[1'd1];

assign coef_ch2_V_V_1_ack_out = coef_ch2_V_V_TREADY;

assign coef_ch2_V_V_1_load_A = (coef_ch2_V_V_1_state_cmp_full & ~coef_ch2_V_V_1_sel_wr);

assign coef_ch2_V_V_1_load_B = (coef_ch2_V_V_1_sel_wr & coef_ch2_V_V_1_state_cmp_full);

assign coef_ch2_V_V_1_sel = coef_ch2_V_V_1_sel_rd;

assign coef_ch2_V_V_1_state_cmp_full = ((coef_ch2_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign coef_ch2_V_V_1_vld_out = coef_ch2_V_V_1_state[1'd0];

assign coef_ch2_V_V_TDATA = coef_ch2_V_V_1_data_out;

assign coef_ch2_V_V_TVALID = coef_ch2_V_V_1_state[1'd0];

assign coef_fu_857_p2 = (coef_i_reg_746 + 6'd1);

assign exitcond1_i_fu_796_p2 = ((val_assign_reg_734 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_851_p2 = ((coef_i_reg_746 == 6'd48) ? 1'b1 : 1'b0);

assign not_or_cond_i_fu_1155_p2 = (rev_fu_1149_p2 & notlhs_i_fu_1137_p2);

assign notlhs_i_fu_1137_p2 = ((cfg_num_pulses_to_ex != 32'd0) ? 1'b1 : 1'b0);

assign num_pulses_scheduled_5_fu_1075_p2 = (32'd1 + num_pulses_scheduled_2_fu_272);

assign num_pulses_scheduled_fu_1341_p2 = (num_pulses_scheduled_1_fu_276 + 32'd1);

assign p_1_i_fu_1166_p3 = ((pulse_last_pulse_in_1_fu_1161_p2[0:0] === 1'b1) ? 32'd0 : num_pulses_scheduled_5_reg_1942);

assign p_shl1_cast_fu_841_p1 = tmp_1_fu_833_p3;

assign pulse_definition_prt_5_fu_1013_p3 = ((tmp_17_i_fu_1009_p2[0:0] === 1'b1) ? pulse_definition_prt_4_reg_1905 : totalTime_i_reg_1857);

assign pulse_definition_prt_6_fu_1028_p3 = ((tmp_17_1_i_fu_1024_p2[0:0] === 1'b1) ? pulse_definition_prt_4_reg_1905 : totalTime_i_7_reg_1863);

assign pulse_definition_prt_7_fu_1043_p3 = ((tmp_17_2_i_fu_1039_p2[0:0] === 1'b1) ? pulse_definition_prt_4_reg_1905 : totalTime_2_i_reg_1869);

assign pulse_first_pulse_in_1_fu_1069_p2 = ((num_pulses_scheduled_2_fu_272 == 32'd0) ? 1'b1 : 1'b0);

assign pulse_first_pulse_in_fu_983_p2 = ((pulse_rep_i_reg_769 == 32'd0) ? 1'b1 : 1'b0);

assign pulse_last_pulse_in_1_fu_1161_p2 = (tmp_8_i_reg_1947 | not_or_cond_i_fu_1155_p2);

assign pulse_last_pulse_in_s_fu_989_p2 = ((pulse_rep_i_reg_769 == tmp_2_i_reg_1852) ? 1'b1 : 1'b0);

assign pulse_num_samples_1_fu_1115_p3 = ((tmp_19_1_i_fu_1109_p2[0:0] === 1'b1) ? 32'd1 : grp_fu_1058_p2);

assign pulse_num_samples_2_fu_1129_p3 = ((tmp_19_2_i_fu_1123_p2[0:0] === 1'b1) ? 32'd1 : grp_fu_1062_p2);

assign pulse_num_samples_fu_1101_p3 = ((tmp_19_i_fu_1095_p2[0:0] === 1'b1) ? 32'd1 : grp_fu_1054_p2);

assign pulse_rep_fu_977_p2 = (pulse_rep_i_reg_769 + 32'd1);

assign pulse_sequence_index_fu_943_p2 = (cfg_pulse_sequence_s + tmp_4_fu_940_p1);

assign rev_fu_1149_p2 = (ult_fu_1143_p2 ^ 1'd1);

assign sel_tmp_fu_1382_p2 = (tmp_10_i_fu_1371_p2 | tmp_12_i_fu_1376_p2);

assign seq_idx_fu_999_p2 = (seq_idx_1_load_reg_1529 + 32'd1);

assign set_fu_802_p2 = (val_assign_reg_734 + 3'd1);

assign staggered_prt_index_1_fu_1388_p3 = ((sel_tmp_fu_1382_p2[0:0] === 1'b1) ? 8'd0 : staggered_prt_index_reg_2001);

assign staggered_prt_index_fu_1347_p2 = (staggered_prt_index_s_reg_757 + 8'd1);

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp176_fu_1173_p32 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_fu_1161_p2}}}, {pulse_first_pulse_in_1_reg_1934}}}, {pulse_last_pulse_in_s_reg_1891}}}, {pulse_first_pulse_in_reg_1883}}}, {tmp_num_samples_fu_280}}}, {pulse_sequence_index_reg_1844}}}, {pulse_definition_tim_15_reg_1836}}}, {pulse_definition_tim_14_reg_1828}}}, {pulse_definition_tim_13_reg_1820}}}, {pulse_definition_tim_12_reg_1812}}}, {pulse_definition_tim_11_reg_1804}}}, {pulse_definition_tim_10_reg_1796}}}, {pulse_definition_tim_9_reg_1788}}}, {pulse_definition_tim_8_reg_1780}}}, {pulse_definition_tim_7_reg_1772}}}, {pulse_definition_tim_6_reg_1764}}}, {pulse_definition_tim_5_reg_1756}}}, {pulse_definition_tim_4_reg_1748}}}, {pulse_definition_tim_3_reg_1739}}}, {pulse_definition_tim_2_reg_1730}}}, {pulse_definition_tim_1_reg_1721}}}, {pulse_definition_tim_reg_1713}}}, {pulse_definition_fil_2_reg_1705}}}, {pulse_definition_fil_1_reg_1697}}}, {pulse_definition_fil_reg_1689}}}, {pulse_definition_con_reg_1681}}}, {tmp_def_block_post_t_fu_1089_p3}}}, {pulse_definition_num_reg_1667}}}, {cfg_pulse_sequence_p_6_reg_1659}}}, {pulse_definition_prt_4_reg_1905}};

assign tmp_10_fu_1297_p3 = cfg_enabled_channel_vector[32'd2];

assign tmp_10_i_fu_1371_p2 = ((staggered_prt_index_reg_2001 == 8'd2) ? 1'b1 : 1'b0);

assign tmp_11_i_fu_1353_p1 = staggered_prt_index_fu_1347_p2;

assign tmp_122_fu_1216_p32 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_1979}}}, {pulse_first_pulse_in_1_reg_1934}}}, {pulse_last_pulse_in_s_reg_1891}}}, {pulse_first_pulse_in_reg_1883}}}, {pulse_num_samples_reg_1959}}}, {pulse_sequence_index_reg_1844}}}, {pulse_definition_tim_15_reg_1836}}}, {pulse_definition_tim_14_reg_1828}}}, {pulse_definition_tim_13_reg_1820}}}, {pulse_definition_tim_12_reg_1812}}}, {pulse_definition_tim_11_reg_1804}}}, {pulse_definition_tim_10_reg_1796}}}, {pulse_definition_tim_9_reg_1788}}}, {pulse_definition_tim_8_reg_1780}}}, {pulse_definition_tim_7_reg_1772}}}, {pulse_definition_tim_6_reg_1764}}}, {pulse_definition_tim_5_reg_1756}}}, {pulse_definition_tim_4_reg_1748}}}, {pulse_definition_tim_3_reg_1739}}}, {pulse_definition_tim_2_reg_1730}}}, {pulse_definition_tim_1_reg_1721}}}, {pulse_definition_tim_reg_1713}}}, {pulse_definition_fil_2_reg_1705}}}, {pulse_definition_fil_1_reg_1697}}}, {pulse_definition_fil_reg_1689}}}, {pulse_definition_con_reg_1681}}}, {tmp_def_block_post_t_reg_1952}}}, {pulse_definition_num_reg_1667}}}, {cfg_pulse_sequence_p_6_reg_1659}}}, {pulse_definition_prt_4_reg_1905}};

assign tmp_12_i_fu_1376_p2 = ((pulse_definition_prt_q1 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_17_1_i_fu_1024_p2 = ((pulse_definition_prt_4_reg_1905 < totalTime_i_7_reg_1863) ? 1'b1 : 1'b0);

assign tmp_17_2_i_fu_1039_p2 = ((pulse_definition_prt_4_reg_1905 < totalTime_2_i_reg_1869) ? 1'b1 : 1'b0);

assign tmp_17_i_fu_1009_p2 = ((pulse_definition_prt_4_reg_1905 < totalTime_i_reg_1857) ? 1'b1 : 1'b0);

assign tmp_18_1_i_fu_1034_p2 = (pulse_definition_prt_6_fu_1028_p3 - pulse_definition_tim_2_reg_1730);

assign tmp_18_2_i_fu_1049_p2 = (pulse_definition_prt_7_fu_1043_p3 - pulse_definition_tim_3_reg_1739);

assign tmp_18_i_fu_1019_p2 = (pulse_definition_prt_5_fu_1013_p3 - pulse_definition_tim_1_reg_1721);

assign tmp_19_1_i_fu_1109_p2 = ((grp_fu_1058_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_19_2_i_fu_1123_p2 = ((grp_fu_1062_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_19_i_fu_1095_p2 = ((grp_fu_1054_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_1_fu_833_p3 = {{val_assign_reg_734}, {4'd0}};

assign tmp_1_i_cast_fu_869_p1 = tmp_i_fu_863_p2;

assign tmp_2344_fu_1260_p32 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_1979}}}, {pulse_first_pulse_in_1_reg_1934}}}, {pulse_last_pulse_in_s_reg_1891}}}, {pulse_first_pulse_in_reg_1883}}}, {pulse_num_samples_1_reg_1964}}}, {pulse_sequence_index_reg_1844}}}, {pulse_definition_tim_15_reg_1836}}}, {pulse_definition_tim_14_reg_1828}}}, {pulse_definition_tim_13_reg_1820}}}, {pulse_definition_tim_12_reg_1812}}}, {pulse_definition_tim_11_reg_1804}}}, {pulse_definition_tim_10_reg_1796}}}, {pulse_definition_tim_9_reg_1788}}}, {pulse_definition_tim_8_reg_1780}}}, {pulse_definition_tim_7_reg_1772}}}, {pulse_definition_tim_6_reg_1764}}}, {pulse_definition_tim_5_reg_1756}}}, {pulse_definition_tim_4_reg_1748}}}, {pulse_definition_tim_3_reg_1739}}}, {pulse_definition_tim_2_reg_1730}}}, {pulse_definition_tim_1_reg_1721}}}, {pulse_definition_tim_reg_1713}}}, {pulse_definition_fil_2_reg_1705}}}, {pulse_definition_fil_1_reg_1697}}}, {pulse_definition_fil_reg_1689}}}, {pulse_definition_con_reg_1681}}}, {tmp_def_block_post_t_reg_1952}}}, {pulse_definition_num_reg_1667}}}, {cfg_pulse_sequence_p_6_reg_1659}}}, {pulse_definition_prt_4_reg_1905}};

assign tmp_2_fu_845_p2 = (tmp_fu_825_p3 - p_shl1_cast_fu_841_p1);

assign tmp_2_i_fu_948_p2 = ($signed(32'd4294967295) + $signed(cfg_pulse_sequence_n_q0));

assign tmp_3512_fu_1304_p32 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1'd0}, {pulse_last_pulse_in_1_reg_1979}}}, {pulse_first_pulse_in_1_reg_1934}}}, {pulse_last_pulse_in_s_reg_1891}}}, {pulse_first_pulse_in_reg_1883}}}, {pulse_num_samples_2_reg_1969}}}, {pulse_sequence_index_reg_1844}}}, {pulse_definition_tim_15_reg_1836}}}, {pulse_definition_tim_14_reg_1828}}}, {pulse_definition_tim_13_reg_1820}}}, {pulse_definition_tim_12_reg_1812}}}, {pulse_definition_tim_11_reg_1804}}}, {pulse_definition_tim_10_reg_1796}}}, {pulse_definition_tim_9_reg_1788}}}, {pulse_definition_tim_8_reg_1780}}}, {pulse_definition_tim_7_reg_1772}}}, {pulse_definition_tim_6_reg_1764}}}, {pulse_definition_tim_5_reg_1756}}}, {pulse_definition_tim_4_reg_1748}}}, {pulse_definition_tim_3_reg_1739}}}, {pulse_definition_tim_2_reg_1730}}}, {pulse_definition_tim_1_reg_1721}}}, {pulse_definition_tim_reg_1713}}}, {pulse_definition_fil_2_reg_1705}}}, {pulse_definition_fil_1_reg_1697}}}, {pulse_definition_fil_reg_1689}}}, {pulse_definition_con_reg_1681}}}, {tmp_def_block_post_t_reg_1952}}}, {pulse_definition_num_reg_1667}}}, {cfg_pulse_sequence_p_6_reg_1659}}}, {pulse_definition_prt_4_reg_1905}};

assign tmp_3_cast_fu_878_p1 = $signed(tmp_3_reg_1494);

assign tmp_3_fu_873_p2 = (tmp_2_reg_1481 + tmp_1_i_cast_fu_869_p1);

assign tmp_3_i_fu_994_p1 = staggered_prt_index_s_reg_757;

assign tmp_4_fu_940_p1 = seq_idx_1_load_reg_1529[7:0];

assign tmp_5_i_fu_902_p2 = ((seq_idx_1_fu_268 < cfg_pulse_sequence_l_1_reg_1419) ? 1'b1 : 1'b0);

assign tmp_6_i_fu_907_p2 = (seq_idx_1_fu_268 + cfg_pulse_sequence_s_1_reg_1424);

assign tmp_7_i_fu_912_p1 = tmp_6_i_fu_907_p2;

assign tmp_8_fu_1213_p1 = cfg_enabled_channel_vector[0:0];

assign tmp_8_i_fu_1081_p2 = ((num_pulses_scheduled_5_fu_1075_p2 == cfg_num_pulses_per_x) ? 1'b1 : 1'b0);

assign tmp_9_fu_1253_p3 = cfg_enabled_channel_vector[32'd1];

assign tmp_9_i_fu_972_p2 = ((pulse_rep_i_reg_769 < pulse_definition_num_reg_1667) ? 1'b1 : 1'b0);

assign tmp_V_1_fu_884_p1 = cfg_filter_coefs_ch0_q0[23:0];

assign tmp_V_2_fu_889_p1 = cfg_filter_coefs_ch1_q0[23:0];

assign tmp_V_3_fu_894_p1 = cfg_filter_coefs_ch2_q0[23:0];

assign tmp_V_fu_808_p1 = val_assign_reg_734;

assign tmp_def_block_post_t_fu_1089_p3 = ((pulse_last_pulse_in_s_reg_1891[0:0] === 1'b1) ? pulse_definition_blo_reg_1676 : 32'd0);

assign tmp_fu_825_p3 = {{val_assign_reg_734}, {6'd0}};

assign tmp_i_fu_863_p2 = ($signed(6'd47) - $signed(coef_i_reg_746));

assign totalTime_2_i_fu_966_p2 = (cfg_pulse_sequence_t_18_q0 + cfg_pulse_sequence_t_26_q0);

assign totalTime_i_7_fu_960_p2 = (cfg_pulse_sequence_t_17_q0 + cfg_pulse_sequence_t_25_q0);

assign totalTime_i_fu_954_p2 = (cfg_pulse_sequence_t_16_q0 + cfg_pulse_sequence_t_24_q0);

assign ult_fu_1143_p2 = ((num_pulses_scheduled_1_fu_276 < cfg_num_pulses_to_ex) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    cfg_pulse_sequence_l_1_reg_1419[31:8] <= 24'b000000000000000000000000;
    cfg_pulse_sequence_s_1_reg_1424[31:8] <= 24'b000000000000000000000000;
    tmp_2_reg_1481[3:0] <= 4'b0000;
end

endmodule //scheduler_parser
