-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hcr_controller is
generic (
    C_S_AXI_CFG_BUS_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_CFG_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_cfg_bus_AWVALID : IN STD_LOGIC;
    s_axi_cfg_bus_AWREADY : OUT STD_LOGIC;
    s_axi_cfg_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_cfg_bus_WVALID : IN STD_LOGIC;
    s_axi_cfg_bus_WREADY : OUT STD_LOGIC;
    s_axi_cfg_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_BUS_DATA_WIDTH-1 downto 0);
    s_axi_cfg_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_cfg_bus_ARVALID : IN STD_LOGIC;
    s_axi_cfg_bus_ARREADY : OUT STD_LOGIC;
    s_axi_cfg_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_cfg_bus_RVALID : OUT STD_LOGIC;
    s_axi_cfg_bus_RREADY : IN STD_LOGIC;
    s_axi_cfg_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CFG_BUS_DATA_WIDTH-1 downto 0);
    s_axi_cfg_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_cfg_bus_BVALID : OUT STD_LOGIC;
    s_axi_cfg_bus_BREADY : IN STD_LOGIC;
    s_axi_cfg_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    coef_ch0_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    coef_ch1_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    coef_ch2_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    mt_pulse_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    control_flags_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    filter_select_ch0_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    filter_select_ch1_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    filter_select_ch2_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    pulse_metadata_ch0_V_TDATA : OUT STD_LOGIC_VECTOR (823 downto 0);
    pulse_metadata_ch1_V_TDATA : OUT STD_LOGIC_VECTOR (823 downto 0);
    pulse_metadata_ch2_V_TDATA : OUT STD_LOGIC_VECTOR (823 downto 0);
    pps_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    pps_ce0 : OUT STD_LOGIC;
    pps_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    pps_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    pps_we0 : OUT STD_LOGIC;
    coef_ch0_V_V_TVALID : OUT STD_LOGIC;
    coef_ch0_V_V_TREADY : IN STD_LOGIC;
    coef_ch1_V_V_TVALID : OUT STD_LOGIC;
    coef_ch1_V_V_TREADY : IN STD_LOGIC;
    coef_ch2_V_V_TVALID : OUT STD_LOGIC;
    coef_ch2_V_V_TREADY : IN STD_LOGIC;
    mt_pulse_V_ap_vld : OUT STD_LOGIC;
    control_flags_V_ap_vld : OUT STD_LOGIC;
    filter_select_ch0_V_ap_vld : OUT STD_LOGIC;
    filter_select_ch1_V_ap_vld : OUT STD_LOGIC;
    filter_select_ch2_V_ap_vld : OUT STD_LOGIC;
    pulse_metadata_ch0_V_TVALID : OUT STD_LOGIC;
    pulse_metadata_ch0_V_TREADY : IN STD_LOGIC;
    pulse_metadata_ch1_V_TVALID : OUT STD_LOGIC;
    pulse_metadata_ch1_V_TREADY : IN STD_LOGIC;
    pulse_metadata_ch2_V_TVALID : OUT STD_LOGIC;
    pulse_metadata_ch2_V_TREADY : IN STD_LOGIC );
end;


architecture behav of hcr_controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hcr_controller,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku060-ffva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.041000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=102,HLS_SYN_DSP=0,HLS_SYN_FF=7036,HLS_SYN_LUT=9452,HLS_VERSION=2019_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv824_lc_2 : STD_LOGIC_VECTOR (823 downto
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal cfg_pulse_sequence_start_index : STD_LOGIC_VECTOR (7 downto 0);
    signal cfg_pulse_sequence_length : STD_LOGIC_VECTOR (7 downto 0);
    signal cfg_num_pulses_to_execute : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_total_decimation : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_post_decimation : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_num_pulses_per_xfer : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_enabled_channel_vector : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_prt_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_prt_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_num_pulses_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_block_post_time_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_control_flags_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_filter_select_ch0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_filter_select_ch1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_filter_select_ch2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_offset_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_offset_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_offset_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_offset_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_offset_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_offset_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_offset_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_offset_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_width_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_width_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_width_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_width_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_width_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_width_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_width_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_timer_width_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_filter_coefs_ch0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_filter_coefs_ch1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_filter_coefs_ch2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal scheduler_parser_U0_ap_start : STD_LOGIC;
    signal scheduler_parser_U0_start_full_n : STD_LOGIC;
    signal scheduler_parser_U0_ap_done : STD_LOGIC;
    signal scheduler_parser_U0_ap_continue : STD_LOGIC;
    signal scheduler_parser_U0_ap_idle : STD_LOGIC;
    signal scheduler_parser_U0_ap_ready : STD_LOGIC;
    signal scheduler_parser_U0_start_out : STD_LOGIC;
    signal scheduler_parser_U0_start_write : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_p_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_p_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_p_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_p_2_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_n_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_n_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_b_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_b_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_c_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_c_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_f_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_f_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_f_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_f_3_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_f_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_f_4_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_16_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_16_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_17_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_17_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_18_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_18_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_19_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_19_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_20_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_20_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_21_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_21_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_22_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_22_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_23_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_23_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_24_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_24_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_25_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_25_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_26_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_26_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_27_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_27_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_28_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_28_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_29_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_29_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_pulse_sequence_t_30_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scheduler_parser_U0_cfg_pulse_sequence_t_30_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_filter_coefs_ch0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal scheduler_parser_U0_cfg_filter_coefs_ch0_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_filter_coefs_ch1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal scheduler_parser_U0_cfg_filter_coefs_ch1_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_cfg_filter_coefs_ch2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal scheduler_parser_U0_cfg_filter_coefs_ch2_ce0 : STD_LOGIC;
    signal scheduler_parser_U0_coef_ch0_V_V_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal scheduler_parser_U0_coef_ch0_V_V_TVALID : STD_LOGIC;
    signal scheduler_parser_U0_coef_ch1_V_V_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal scheduler_parser_U0_coef_ch1_V_V_TVALID : STD_LOGIC;
    signal scheduler_parser_U0_coef_ch2_V_V_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal scheduler_parser_U0_coef_ch2_V_V_TVALID : STD_LOGIC;
    signal scheduler_parser_U0_pulse_queue_0_V_din : STD_LOGIC_VECTOR (820 downto 0);
    signal scheduler_parser_U0_pulse_queue_0_V_write : STD_LOGIC;
    signal scheduler_parser_U0_pulse_queue_1_V_din : STD_LOGIC_VECTOR (820 downto 0);
    signal scheduler_parser_U0_pulse_queue_1_V_write : STD_LOGIC;
    signal scheduler_parser_U0_pulse_queue_2_V_din : STD_LOGIC_VECTOR (820 downto 0);
    signal scheduler_parser_U0_pulse_queue_2_V_write : STD_LOGIC;
    signal scheduler_parser_U0_pulse_queue_s_V_din : STD_LOGIC_VECTOR (820 downto 0);
    signal scheduler_parser_U0_pulse_queue_s_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal scheduler_cycle_exac_U0_ap_start : STD_LOGIC;
    signal scheduler_cycle_exac_U0_ap_done : STD_LOGIC;
    signal scheduler_cycle_exac_U0_ap_continue : STD_LOGIC;
    signal scheduler_cycle_exac_U0_ap_idle : STD_LOGIC;
    signal scheduler_cycle_exac_U0_ap_ready : STD_LOGIC;
    signal scheduler_cycle_exac_U0_pps_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal scheduler_cycle_exac_U0_pps_ce0 : STD_LOGIC;
    signal scheduler_cycle_exac_U0_pulse_queue_V_read : STD_LOGIC;
    signal scheduler_cycle_exac_U0_mt_pulse_V : STD_LOGIC_VECTOR (7 downto 0);
    signal scheduler_cycle_exac_U0_mt_pulse_V_ap_vld : STD_LOGIC;
    signal scheduler_cycle_exac_U0_control_flags_V : STD_LOGIC_VECTOR (31 downto 0);
    signal scheduler_cycle_exac_U0_control_flags_V_ap_vld : STD_LOGIC;
    signal scheduler_cycle_exac_U0_filter_select_ch0_V : STD_LOGIC_VECTOR (1 downto 0);
    signal scheduler_cycle_exac_U0_filter_select_ch0_V_ap_vld : STD_LOGIC;
    signal scheduler_cycle_exac_U0_filter_select_ch1_V : STD_LOGIC_VECTOR (1 downto 0);
    signal scheduler_cycle_exac_U0_filter_select_ch1_V_ap_vld : STD_LOGIC;
    signal scheduler_cycle_exac_U0_filter_select_ch2_V : STD_LOGIC_VECTOR (1 downto 0);
    signal scheduler_cycle_exac_U0_filter_select_ch2_V_ap_vld : STD_LOGIC;
    signal output_fifo70_U0_ap_start : STD_LOGIC;
    signal output_fifo70_U0_ap_done : STD_LOGIC;
    signal output_fifo70_U0_ap_continue : STD_LOGIC;
    signal output_fifo70_U0_ap_idle : STD_LOGIC;
    signal output_fifo70_U0_ap_ready : STD_LOGIC;
    signal output_fifo70_U0_pulse_queue_ch0_V_read : STD_LOGIC;
    signal output_fifo70_U0_pulse_metadata_ch0_V_TDATA : STD_LOGIC_VECTOR (823 downto 0);
    signal output_fifo70_U0_pulse_metadata_ch0_V_TVALID : STD_LOGIC;
    signal output_fifo71_U0_ap_start : STD_LOGIC;
    signal output_fifo71_U0_ap_done : STD_LOGIC;
    signal output_fifo71_U0_ap_continue : STD_LOGIC;
    signal output_fifo71_U0_ap_idle : STD_LOGIC;
    signal output_fifo71_U0_ap_ready : STD_LOGIC;
    signal output_fifo71_U0_pulse_queue_ch0_V_read : STD_LOGIC;
    signal output_fifo71_U0_pulse_metadata_ch0_V_TDATA : STD_LOGIC_VECTOR (823 downto 0);
    signal output_fifo71_U0_pulse_metadata_ch0_V_TVALID : STD_LOGIC;
    signal output_fifo_U0_ap_start : STD_LOGIC;
    signal output_fifo_U0_ap_done : STD_LOGIC;
    signal output_fifo_U0_ap_continue : STD_LOGIC;
    signal output_fifo_U0_ap_idle : STD_LOGIC;
    signal output_fifo_U0_ap_ready : STD_LOGIC;
    signal output_fifo_U0_in_V_read : STD_LOGIC;
    signal output_fifo_U0_out_V_TDATA : STD_LOGIC_VECTOR (823 downto 0);
    signal output_fifo_U0_out_V_TVALID : STD_LOGIC;
    signal pulse_queue_ch0_V_full_n : STD_LOGIC;
    signal pulse_queue_ch0_V_dout : STD_LOGIC_VECTOR (820 downto 0);
    signal pulse_queue_ch0_V_empty_n : STD_LOGIC;
    signal pulse_queue_ch1_V_full_n : STD_LOGIC;
    signal pulse_queue_ch1_V_dout : STD_LOGIC_VECTOR (820 downto 0);
    signal pulse_queue_ch1_V_empty_n : STD_LOGIC;
    signal pulse_queue_ch2_V_full_n : STD_LOGIC;
    signal pulse_queue_ch2_V_dout : STD_LOGIC_VECTOR (820 downto 0);
    signal pulse_queue_ch2_V_empty_n : STD_LOGIC;
    signal pulse_queue_schedule_1_full_n : STD_LOGIC;
    signal pulse_queue_schedule_1_dout : STD_LOGIC_VECTOR (820 downto 0);
    signal pulse_queue_schedule_1_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_scheduler_parser_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_scheduler_parser_U0_ap_ready : STD_LOGIC;
    signal scheduler_parser_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_scheduler_cycle_exac_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_scheduler_cycle_exac_U0_ap_ready : STD_LOGIC;
    signal scheduler_cycle_exac_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_output_fifo70_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_output_fifo70_U0_full_n : STD_LOGIC;
    signal start_for_output_fifo70_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_output_fifo70_U0_empty_n : STD_LOGIC;
    signal start_for_output_fifo71_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_output_fifo71_U0_full_n : STD_LOGIC;
    signal start_for_output_fifo71_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_output_fifo71_U0_empty_n : STD_LOGIC;
    signal start_for_output_fifo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_output_fifo_U0_full_n : STD_LOGIC;
    signal start_for_output_fifo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_output_fifo_U0_empty_n : STD_LOGIC;
    signal scheduler_cycle_exac_U0_start_full_n : STD_LOGIC;
    signal scheduler_cycle_exac_U0_start_write : STD_LOGIC;
    signal output_fifo70_U0_start_full_n : STD_LOGIC;
    signal output_fifo70_U0_start_write : STD_LOGIC;
    signal output_fifo71_U0_start_full_n : STD_LOGIC;
    signal output_fifo71_U0_start_write : STD_LOGIC;
    signal output_fifo_U0_start_full_n : STD_LOGIC;
    signal output_fifo_U0_start_write : STD_LOGIC;

    component scheduler_parser IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        cfg_pulse_sequence_s : IN STD_LOGIC_VECTOR (7 downto 0);
        cfg_pulse_sequence_l : IN STD_LOGIC_VECTOR (7 downto 0);
        cfg_num_pulses_to_ex : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_total_decimation : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_post_decimation : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_num_pulses_per_x : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_enabled_channel_vector : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_p_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_p_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_p_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_p_2_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_p_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_n_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_n_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_n_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_b_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_b_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_c_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_c_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_f_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_f_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_f_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_f_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_f_3_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_f_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_f_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_f_4_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_f_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_16_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_16_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_16_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_17_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_17_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_17_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_18_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_18_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_19_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_19_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_19_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_20_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_20_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_20_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_21_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_21_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_22_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_22_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_23_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_23_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_24_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_24_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_25_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_25_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_26_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_26_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_27_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_27_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_27_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_28_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_28_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_28_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_29_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_29_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_29_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_t_30_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_t_30_ce0 : OUT STD_LOGIC;
        cfg_pulse_sequence_t_30_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_filter_coefs_ch0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cfg_filter_coefs_ch0_ce0 : OUT STD_LOGIC;
        cfg_filter_coefs_ch0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_filter_coefs_ch1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cfg_filter_coefs_ch1_ce0 : OUT STD_LOGIC;
        cfg_filter_coefs_ch1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cfg_filter_coefs_ch2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cfg_filter_coefs_ch2_ce0 : OUT STD_LOGIC;
        cfg_filter_coefs_ch2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        coef_ch0_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        coef_ch0_V_V_TVALID : OUT STD_LOGIC;
        coef_ch0_V_V_TREADY : IN STD_LOGIC;
        coef_ch1_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        coef_ch1_V_V_TVALID : OUT STD_LOGIC;
        coef_ch1_V_V_TREADY : IN STD_LOGIC;
        coef_ch2_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        coef_ch2_V_V_TVALID : OUT STD_LOGIC;
        coef_ch2_V_V_TREADY : IN STD_LOGIC;
        pulse_queue_0_V_din : OUT STD_LOGIC_VECTOR (820 downto 0);
        pulse_queue_0_V_full_n : IN STD_LOGIC;
        pulse_queue_0_V_write : OUT STD_LOGIC;
        pulse_queue_1_V_din : OUT STD_LOGIC_VECTOR (820 downto 0);
        pulse_queue_1_V_full_n : IN STD_LOGIC;
        pulse_queue_1_V_write : OUT STD_LOGIC;
        pulse_queue_2_V_din : OUT STD_LOGIC_VECTOR (820 downto 0);
        pulse_queue_2_V_full_n : IN STD_LOGIC;
        pulse_queue_2_V_write : OUT STD_LOGIC;
        pulse_queue_s_V_din : OUT STD_LOGIC_VECTOR (820 downto 0);
        pulse_queue_s_V_full_n : IN STD_LOGIC;
        pulse_queue_s_V_write : OUT STD_LOGIC );
    end component;


    component scheduler_cycle_exac IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pps_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        pps_ce0 : OUT STD_LOGIC;
        pps_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        pulse_queue_V_dout : IN STD_LOGIC_VECTOR (820 downto 0);
        pulse_queue_V_empty_n : IN STD_LOGIC;
        pulse_queue_V_read : OUT STD_LOGIC;
        mt_pulse_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mt_pulse_V_ap_vld : OUT STD_LOGIC;
        control_flags_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        control_flags_V_ap_vld : OUT STD_LOGIC;
        filter_select_ch0_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        filter_select_ch0_V_ap_vld : OUT STD_LOGIC;
        filter_select_ch1_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        filter_select_ch1_V_ap_vld : OUT STD_LOGIC;
        filter_select_ch2_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        filter_select_ch2_V_ap_vld : OUT STD_LOGIC );
    end component;


    component output_fifo70 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pulse_queue_ch0_V_dout : IN STD_LOGIC_VECTOR (820 downto 0);
        pulse_queue_ch0_V_empty_n : IN STD_LOGIC;
        pulse_queue_ch0_V_read : OUT STD_LOGIC;
        pulse_metadata_ch0_V_TDATA : OUT STD_LOGIC_VECTOR (823 downto 0);
        pulse_metadata_ch0_V_TVALID : OUT STD_LOGIC;
        pulse_metadata_ch0_V_TREADY : IN STD_LOGIC );
    end component;


    component output_fifo71 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pulse_queue_ch0_V_dout : IN STD_LOGIC_VECTOR (820 downto 0);
        pulse_queue_ch0_V_empty_n : IN STD_LOGIC;
        pulse_queue_ch0_V_read : OUT STD_LOGIC;
        pulse_metadata_ch0_V_TDATA : OUT STD_LOGIC_VECTOR (823 downto 0);
        pulse_metadata_ch0_V_TVALID : OUT STD_LOGIC;
        pulse_metadata_ch0_V_TREADY : IN STD_LOGIC );
    end component;


    component output_fifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (820 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC;
        out_V_TDATA : OUT STD_LOGIC_VECTOR (823 downto 0);
        out_V_TVALID : OUT STD_LOGIC;
        out_V_TREADY : IN STD_LOGIC );
    end component;


    component fifo_w821_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (820 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (820 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w821_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (820 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (820 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_output_dEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_output_eOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_output_fYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hcr_controller_cfg_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        cfg_pulse_sequence_start_index : OUT STD_LOGIC_VECTOR (7 downto 0);
        cfg_pulse_sequence_length : OUT STD_LOGIC_VECTOR (7 downto 0);
        cfg_num_pulses_to_execute : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_total_decimation : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_post_decimation : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_num_pulses_per_xfer : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_enabled_channel_vector : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_prt_0_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_prt_0_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_prt_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_prt_1_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_prt_1_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_prt_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_num_pulses_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_num_pulses_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_num_pulses_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_block_post_time_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_block_post_time_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_block_post_time_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_control_flags_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_control_flags_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_control_flags_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_filter_select_ch0_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_filter_select_ch0_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_filter_select_ch0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_filter_select_ch1_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_filter_select_ch1_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_filter_select_ch1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_filter_select_ch2_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_filter_select_ch2_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_filter_select_ch2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_offset_0_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_offset_0_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_offset_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_offset_1_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_offset_1_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_offset_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_offset_2_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_offset_2_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_offset_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_offset_3_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_offset_3_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_offset_3_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_offset_4_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_offset_4_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_offset_4_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_offset_5_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_offset_5_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_offset_5_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_offset_6_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_offset_6_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_offset_6_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_offset_7_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_offset_7_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_offset_7_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_width_0_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_width_0_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_width_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_width_1_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_width_1_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_width_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_width_2_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_width_2_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_width_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_width_3_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_width_3_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_width_3_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_width_4_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_width_4_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_width_4_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_width_5_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_width_5_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_width_5_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_width_6_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_width_6_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_width_6_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_pulse_sequence_timer_width_7_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        cfg_pulse_sequence_timer_width_7_ce0 : IN STD_LOGIC;
        cfg_pulse_sequence_timer_width_7_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_filter_coefs_ch0_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cfg_filter_coefs_ch0_ce0 : IN STD_LOGIC;
        cfg_filter_coefs_ch0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_filter_coefs_ch1_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cfg_filter_coefs_ch1_ce0 : IN STD_LOGIC;
        cfg_filter_coefs_ch1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cfg_filter_coefs_ch2_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cfg_filter_coefs_ch2_ce0 : IN STD_LOGIC;
        cfg_filter_coefs_ch2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hcr_controller_cfg_bus_s_axi_U : component hcr_controller_cfg_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CFG_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CFG_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_cfg_bus_AWVALID,
        AWREADY => s_axi_cfg_bus_AWREADY,
        AWADDR => s_axi_cfg_bus_AWADDR,
        WVALID => s_axi_cfg_bus_WVALID,
        WREADY => s_axi_cfg_bus_WREADY,
        WDATA => s_axi_cfg_bus_WDATA,
        WSTRB => s_axi_cfg_bus_WSTRB,
        ARVALID => s_axi_cfg_bus_ARVALID,
        ARREADY => s_axi_cfg_bus_ARREADY,
        ARADDR => s_axi_cfg_bus_ARADDR,
        RVALID => s_axi_cfg_bus_RVALID,
        RREADY => s_axi_cfg_bus_RREADY,
        RDATA => s_axi_cfg_bus_RDATA,
        RRESP => s_axi_cfg_bus_RRESP,
        BVALID => s_axi_cfg_bus_BVALID,
        BREADY => s_axi_cfg_bus_BREADY,
        BRESP => s_axi_cfg_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        cfg_pulse_sequence_start_index => cfg_pulse_sequence_start_index,
        cfg_pulse_sequence_length => cfg_pulse_sequence_length,
        cfg_num_pulses_to_execute => cfg_num_pulses_to_execute,
        cfg_total_decimation => cfg_total_decimation,
        cfg_post_decimation => cfg_post_decimation,
        cfg_num_pulses_per_xfer => cfg_num_pulses_per_xfer,
        cfg_enabled_channel_vector => cfg_enabled_channel_vector,
        cfg_pulse_sequence_prt_0_address0 => scheduler_parser_U0_cfg_pulse_sequence_p_address0,
        cfg_pulse_sequence_prt_0_ce0 => scheduler_parser_U0_cfg_pulse_sequence_p_ce0,
        cfg_pulse_sequence_prt_0_q0 => cfg_pulse_sequence_prt_0_q0,
        cfg_pulse_sequence_prt_1_address0 => scheduler_parser_U0_cfg_pulse_sequence_p_2_address0,
        cfg_pulse_sequence_prt_1_ce0 => scheduler_parser_U0_cfg_pulse_sequence_p_2_ce0,
        cfg_pulse_sequence_prt_1_q0 => cfg_pulse_sequence_prt_1_q0,
        cfg_pulse_sequence_num_pulses_address0 => scheduler_parser_U0_cfg_pulse_sequence_n_address0,
        cfg_pulse_sequence_num_pulses_ce0 => scheduler_parser_U0_cfg_pulse_sequence_n_ce0,
        cfg_pulse_sequence_num_pulses_q0 => cfg_pulse_sequence_num_pulses_q0,
        cfg_pulse_sequence_block_post_time_address0 => scheduler_parser_U0_cfg_pulse_sequence_b_address0,
        cfg_pulse_sequence_block_post_time_ce0 => scheduler_parser_U0_cfg_pulse_sequence_b_ce0,
        cfg_pulse_sequence_block_post_time_q0 => cfg_pulse_sequence_block_post_time_q0,
        cfg_pulse_sequence_control_flags_address0 => scheduler_parser_U0_cfg_pulse_sequence_c_address0,
        cfg_pulse_sequence_control_flags_ce0 => scheduler_parser_U0_cfg_pulse_sequence_c_ce0,
        cfg_pulse_sequence_control_flags_q0 => cfg_pulse_sequence_control_flags_q0,
        cfg_pulse_sequence_filter_select_ch0_address0 => scheduler_parser_U0_cfg_pulse_sequence_f_address0,
        cfg_pulse_sequence_filter_select_ch0_ce0 => scheduler_parser_U0_cfg_pulse_sequence_f_ce0,
        cfg_pulse_sequence_filter_select_ch0_q0 => cfg_pulse_sequence_filter_select_ch0_q0,
        cfg_pulse_sequence_filter_select_ch1_address0 => scheduler_parser_U0_cfg_pulse_sequence_f_3_address0,
        cfg_pulse_sequence_filter_select_ch1_ce0 => scheduler_parser_U0_cfg_pulse_sequence_f_3_ce0,
        cfg_pulse_sequence_filter_select_ch1_q0 => cfg_pulse_sequence_filter_select_ch1_q0,
        cfg_pulse_sequence_filter_select_ch2_address0 => scheduler_parser_U0_cfg_pulse_sequence_f_4_address0,
        cfg_pulse_sequence_filter_select_ch2_ce0 => scheduler_parser_U0_cfg_pulse_sequence_f_4_ce0,
        cfg_pulse_sequence_filter_select_ch2_q0 => cfg_pulse_sequence_filter_select_ch2_q0,
        cfg_pulse_sequence_timer_offset_0_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_address0,
        cfg_pulse_sequence_timer_offset_0_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_ce0,
        cfg_pulse_sequence_timer_offset_0_q0 => cfg_pulse_sequence_timer_offset_0_q0,
        cfg_pulse_sequence_timer_offset_1_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_16_address0,
        cfg_pulse_sequence_timer_offset_1_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_16_ce0,
        cfg_pulse_sequence_timer_offset_1_q0 => cfg_pulse_sequence_timer_offset_1_q0,
        cfg_pulse_sequence_timer_offset_2_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_17_address0,
        cfg_pulse_sequence_timer_offset_2_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_17_ce0,
        cfg_pulse_sequence_timer_offset_2_q0 => cfg_pulse_sequence_timer_offset_2_q0,
        cfg_pulse_sequence_timer_offset_3_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_18_address0,
        cfg_pulse_sequence_timer_offset_3_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_18_ce0,
        cfg_pulse_sequence_timer_offset_3_q0 => cfg_pulse_sequence_timer_offset_3_q0,
        cfg_pulse_sequence_timer_offset_4_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_19_address0,
        cfg_pulse_sequence_timer_offset_4_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_19_ce0,
        cfg_pulse_sequence_timer_offset_4_q0 => cfg_pulse_sequence_timer_offset_4_q0,
        cfg_pulse_sequence_timer_offset_5_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_20_address0,
        cfg_pulse_sequence_timer_offset_5_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_20_ce0,
        cfg_pulse_sequence_timer_offset_5_q0 => cfg_pulse_sequence_timer_offset_5_q0,
        cfg_pulse_sequence_timer_offset_6_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_21_address0,
        cfg_pulse_sequence_timer_offset_6_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_21_ce0,
        cfg_pulse_sequence_timer_offset_6_q0 => cfg_pulse_sequence_timer_offset_6_q0,
        cfg_pulse_sequence_timer_offset_7_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_22_address0,
        cfg_pulse_sequence_timer_offset_7_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_22_ce0,
        cfg_pulse_sequence_timer_offset_7_q0 => cfg_pulse_sequence_timer_offset_7_q0,
        cfg_pulse_sequence_timer_width_0_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_23_address0,
        cfg_pulse_sequence_timer_width_0_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_23_ce0,
        cfg_pulse_sequence_timer_width_0_q0 => cfg_pulse_sequence_timer_width_0_q0,
        cfg_pulse_sequence_timer_width_1_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_24_address0,
        cfg_pulse_sequence_timer_width_1_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_24_ce0,
        cfg_pulse_sequence_timer_width_1_q0 => cfg_pulse_sequence_timer_width_1_q0,
        cfg_pulse_sequence_timer_width_2_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_25_address0,
        cfg_pulse_sequence_timer_width_2_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_25_ce0,
        cfg_pulse_sequence_timer_width_2_q0 => cfg_pulse_sequence_timer_width_2_q0,
        cfg_pulse_sequence_timer_width_3_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_26_address0,
        cfg_pulse_sequence_timer_width_3_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_26_ce0,
        cfg_pulse_sequence_timer_width_3_q0 => cfg_pulse_sequence_timer_width_3_q0,
        cfg_pulse_sequence_timer_width_4_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_27_address0,
        cfg_pulse_sequence_timer_width_4_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_27_ce0,
        cfg_pulse_sequence_timer_width_4_q0 => cfg_pulse_sequence_timer_width_4_q0,
        cfg_pulse_sequence_timer_width_5_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_28_address0,
        cfg_pulse_sequence_timer_width_5_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_28_ce0,
        cfg_pulse_sequence_timer_width_5_q0 => cfg_pulse_sequence_timer_width_5_q0,
        cfg_pulse_sequence_timer_width_6_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_29_address0,
        cfg_pulse_sequence_timer_width_6_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_29_ce0,
        cfg_pulse_sequence_timer_width_6_q0 => cfg_pulse_sequence_timer_width_6_q0,
        cfg_pulse_sequence_timer_width_7_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_30_address0,
        cfg_pulse_sequence_timer_width_7_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_30_ce0,
        cfg_pulse_sequence_timer_width_7_q0 => cfg_pulse_sequence_timer_width_7_q0,
        cfg_filter_coefs_ch0_address0 => scheduler_parser_U0_cfg_filter_coefs_ch0_address0,
        cfg_filter_coefs_ch0_ce0 => scheduler_parser_U0_cfg_filter_coefs_ch0_ce0,
        cfg_filter_coefs_ch0_q0 => cfg_filter_coefs_ch0_q0,
        cfg_filter_coefs_ch1_address0 => scheduler_parser_U0_cfg_filter_coefs_ch1_address0,
        cfg_filter_coefs_ch1_ce0 => scheduler_parser_U0_cfg_filter_coefs_ch1_ce0,
        cfg_filter_coefs_ch1_q0 => cfg_filter_coefs_ch1_q0,
        cfg_filter_coefs_ch2_address0 => scheduler_parser_U0_cfg_filter_coefs_ch2_address0,
        cfg_filter_coefs_ch2_ce0 => scheduler_parser_U0_cfg_filter_coefs_ch2_ce0,
        cfg_filter_coefs_ch2_q0 => cfg_filter_coefs_ch2_q0);

    scheduler_parser_U0 : component scheduler_parser
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => scheduler_parser_U0_ap_start,
        start_full_n => scheduler_parser_U0_start_full_n,
        ap_done => scheduler_parser_U0_ap_done,
        ap_continue => scheduler_parser_U0_ap_continue,
        ap_idle => scheduler_parser_U0_ap_idle,
        ap_ready => scheduler_parser_U0_ap_ready,
        start_out => scheduler_parser_U0_start_out,
        start_write => scheduler_parser_U0_start_write,
        cfg_pulse_sequence_s => cfg_pulse_sequence_start_index,
        cfg_pulse_sequence_l => cfg_pulse_sequence_length,
        cfg_num_pulses_to_ex => cfg_num_pulses_to_execute,
        cfg_total_decimation => cfg_total_decimation,
        cfg_post_decimation => cfg_post_decimation,
        cfg_num_pulses_per_x => cfg_num_pulses_per_xfer,
        cfg_enabled_channel_vector => cfg_enabled_channel_vector,
        cfg_pulse_sequence_p_address0 => scheduler_parser_U0_cfg_pulse_sequence_p_address0,
        cfg_pulse_sequence_p_ce0 => scheduler_parser_U0_cfg_pulse_sequence_p_ce0,
        cfg_pulse_sequence_p_q0 => cfg_pulse_sequence_prt_0_q0,
        cfg_pulse_sequence_p_2_address0 => scheduler_parser_U0_cfg_pulse_sequence_p_2_address0,
        cfg_pulse_sequence_p_2_ce0 => scheduler_parser_U0_cfg_pulse_sequence_p_2_ce0,
        cfg_pulse_sequence_p_2_q0 => cfg_pulse_sequence_prt_1_q0,
        cfg_pulse_sequence_n_address0 => scheduler_parser_U0_cfg_pulse_sequence_n_address0,
        cfg_pulse_sequence_n_ce0 => scheduler_parser_U0_cfg_pulse_sequence_n_ce0,
        cfg_pulse_sequence_n_q0 => cfg_pulse_sequence_num_pulses_q0,
        cfg_pulse_sequence_b_address0 => scheduler_parser_U0_cfg_pulse_sequence_b_address0,
        cfg_pulse_sequence_b_ce0 => scheduler_parser_U0_cfg_pulse_sequence_b_ce0,
        cfg_pulse_sequence_b_q0 => cfg_pulse_sequence_block_post_time_q0,
        cfg_pulse_sequence_c_address0 => scheduler_parser_U0_cfg_pulse_sequence_c_address0,
        cfg_pulse_sequence_c_ce0 => scheduler_parser_U0_cfg_pulse_sequence_c_ce0,
        cfg_pulse_sequence_c_q0 => cfg_pulse_sequence_control_flags_q0,
        cfg_pulse_sequence_f_address0 => scheduler_parser_U0_cfg_pulse_sequence_f_address0,
        cfg_pulse_sequence_f_ce0 => scheduler_parser_U0_cfg_pulse_sequence_f_ce0,
        cfg_pulse_sequence_f_q0 => cfg_pulse_sequence_filter_select_ch0_q0,
        cfg_pulse_sequence_f_3_address0 => scheduler_parser_U0_cfg_pulse_sequence_f_3_address0,
        cfg_pulse_sequence_f_3_ce0 => scheduler_parser_U0_cfg_pulse_sequence_f_3_ce0,
        cfg_pulse_sequence_f_3_q0 => cfg_pulse_sequence_filter_select_ch1_q0,
        cfg_pulse_sequence_f_4_address0 => scheduler_parser_U0_cfg_pulse_sequence_f_4_address0,
        cfg_pulse_sequence_f_4_ce0 => scheduler_parser_U0_cfg_pulse_sequence_f_4_ce0,
        cfg_pulse_sequence_f_4_q0 => cfg_pulse_sequence_filter_select_ch2_q0,
        cfg_pulse_sequence_t_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_address0,
        cfg_pulse_sequence_t_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_ce0,
        cfg_pulse_sequence_t_q0 => cfg_pulse_sequence_timer_offset_0_q0,
        cfg_pulse_sequence_t_16_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_16_address0,
        cfg_pulse_sequence_t_16_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_16_ce0,
        cfg_pulse_sequence_t_16_q0 => cfg_pulse_sequence_timer_offset_1_q0,
        cfg_pulse_sequence_t_17_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_17_address0,
        cfg_pulse_sequence_t_17_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_17_ce0,
        cfg_pulse_sequence_t_17_q0 => cfg_pulse_sequence_timer_offset_2_q0,
        cfg_pulse_sequence_t_18_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_18_address0,
        cfg_pulse_sequence_t_18_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_18_ce0,
        cfg_pulse_sequence_t_18_q0 => cfg_pulse_sequence_timer_offset_3_q0,
        cfg_pulse_sequence_t_19_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_19_address0,
        cfg_pulse_sequence_t_19_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_19_ce0,
        cfg_pulse_sequence_t_19_q0 => cfg_pulse_sequence_timer_offset_4_q0,
        cfg_pulse_sequence_t_20_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_20_address0,
        cfg_pulse_sequence_t_20_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_20_ce0,
        cfg_pulse_sequence_t_20_q0 => cfg_pulse_sequence_timer_offset_5_q0,
        cfg_pulse_sequence_t_21_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_21_address0,
        cfg_pulse_sequence_t_21_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_21_ce0,
        cfg_pulse_sequence_t_21_q0 => cfg_pulse_sequence_timer_offset_6_q0,
        cfg_pulse_sequence_t_22_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_22_address0,
        cfg_pulse_sequence_t_22_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_22_ce0,
        cfg_pulse_sequence_t_22_q0 => cfg_pulse_sequence_timer_offset_7_q0,
        cfg_pulse_sequence_t_23_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_23_address0,
        cfg_pulse_sequence_t_23_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_23_ce0,
        cfg_pulse_sequence_t_23_q0 => cfg_pulse_sequence_timer_width_0_q0,
        cfg_pulse_sequence_t_24_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_24_address0,
        cfg_pulse_sequence_t_24_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_24_ce0,
        cfg_pulse_sequence_t_24_q0 => cfg_pulse_sequence_timer_width_1_q0,
        cfg_pulse_sequence_t_25_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_25_address0,
        cfg_pulse_sequence_t_25_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_25_ce0,
        cfg_pulse_sequence_t_25_q0 => cfg_pulse_sequence_timer_width_2_q0,
        cfg_pulse_sequence_t_26_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_26_address0,
        cfg_pulse_sequence_t_26_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_26_ce0,
        cfg_pulse_sequence_t_26_q0 => cfg_pulse_sequence_timer_width_3_q0,
        cfg_pulse_sequence_t_27_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_27_address0,
        cfg_pulse_sequence_t_27_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_27_ce0,
        cfg_pulse_sequence_t_27_q0 => cfg_pulse_sequence_timer_width_4_q0,
        cfg_pulse_sequence_t_28_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_28_address0,
        cfg_pulse_sequence_t_28_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_28_ce0,
        cfg_pulse_sequence_t_28_q0 => cfg_pulse_sequence_timer_width_5_q0,
        cfg_pulse_sequence_t_29_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_29_address0,
        cfg_pulse_sequence_t_29_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_29_ce0,
        cfg_pulse_sequence_t_29_q0 => cfg_pulse_sequence_timer_width_6_q0,
        cfg_pulse_sequence_t_30_address0 => scheduler_parser_U0_cfg_pulse_sequence_t_30_address0,
        cfg_pulse_sequence_t_30_ce0 => scheduler_parser_U0_cfg_pulse_sequence_t_30_ce0,
        cfg_pulse_sequence_t_30_q0 => cfg_pulse_sequence_timer_width_7_q0,
        cfg_filter_coefs_ch0_address0 => scheduler_parser_U0_cfg_filter_coefs_ch0_address0,
        cfg_filter_coefs_ch0_ce0 => scheduler_parser_U0_cfg_filter_coefs_ch0_ce0,
        cfg_filter_coefs_ch0_q0 => cfg_filter_coefs_ch0_q0,
        cfg_filter_coefs_ch1_address0 => scheduler_parser_U0_cfg_filter_coefs_ch1_address0,
        cfg_filter_coefs_ch1_ce0 => scheduler_parser_U0_cfg_filter_coefs_ch1_ce0,
        cfg_filter_coefs_ch1_q0 => cfg_filter_coefs_ch1_q0,
        cfg_filter_coefs_ch2_address0 => scheduler_parser_U0_cfg_filter_coefs_ch2_address0,
        cfg_filter_coefs_ch2_ce0 => scheduler_parser_U0_cfg_filter_coefs_ch2_ce0,
        cfg_filter_coefs_ch2_q0 => cfg_filter_coefs_ch2_q0,
        coef_ch0_V_V_TDATA => scheduler_parser_U0_coef_ch0_V_V_TDATA,
        coef_ch0_V_V_TVALID => scheduler_parser_U0_coef_ch0_V_V_TVALID,
        coef_ch0_V_V_TREADY => coef_ch0_V_V_TREADY,
        coef_ch1_V_V_TDATA => scheduler_parser_U0_coef_ch1_V_V_TDATA,
        coef_ch1_V_V_TVALID => scheduler_parser_U0_coef_ch1_V_V_TVALID,
        coef_ch1_V_V_TREADY => coef_ch1_V_V_TREADY,
        coef_ch2_V_V_TDATA => scheduler_parser_U0_coef_ch2_V_V_TDATA,
        coef_ch2_V_V_TVALID => scheduler_parser_U0_coef_ch2_V_V_TVALID,
        coef_ch2_V_V_TREADY => coef_ch2_V_V_TREADY,
        pulse_queue_0_V_din => scheduler_parser_U0_pulse_queue_0_V_din,
        pulse_queue_0_V_full_n => pulse_queue_ch0_V_full_n,
        pulse_queue_0_V_write => scheduler_parser_U0_pulse_queue_0_V_write,
        pulse_queue_1_V_din => scheduler_parser_U0_pulse_queue_1_V_din,
        pulse_queue_1_V_full_n => pulse_queue_ch1_V_full_n,
        pulse_queue_1_V_write => scheduler_parser_U0_pulse_queue_1_V_write,
        pulse_queue_2_V_din => scheduler_parser_U0_pulse_queue_2_V_din,
        pulse_queue_2_V_full_n => pulse_queue_ch2_V_full_n,
        pulse_queue_2_V_write => scheduler_parser_U0_pulse_queue_2_V_write,
        pulse_queue_s_V_din => scheduler_parser_U0_pulse_queue_s_V_din,
        pulse_queue_s_V_full_n => pulse_queue_schedule_1_full_n,
        pulse_queue_s_V_write => scheduler_parser_U0_pulse_queue_s_V_write);

    scheduler_cycle_exac_U0 : component scheduler_cycle_exac
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => scheduler_cycle_exac_U0_ap_start,
        ap_done => scheduler_cycle_exac_U0_ap_done,
        ap_continue => scheduler_cycle_exac_U0_ap_continue,
        ap_idle => scheduler_cycle_exac_U0_ap_idle,
        ap_ready => scheduler_cycle_exac_U0_ap_ready,
        pps_address0 => scheduler_cycle_exac_U0_pps_address0,
        pps_ce0 => scheduler_cycle_exac_U0_pps_ce0,
        pps_q0 => pps_q0,
        pulse_queue_V_dout => pulse_queue_schedule_1_dout,
        pulse_queue_V_empty_n => pulse_queue_schedule_1_empty_n,
        pulse_queue_V_read => scheduler_cycle_exac_U0_pulse_queue_V_read,
        mt_pulse_V => scheduler_cycle_exac_U0_mt_pulse_V,
        mt_pulse_V_ap_vld => scheduler_cycle_exac_U0_mt_pulse_V_ap_vld,
        control_flags_V => scheduler_cycle_exac_U0_control_flags_V,
        control_flags_V_ap_vld => scheduler_cycle_exac_U0_control_flags_V_ap_vld,
        filter_select_ch0_V => scheduler_cycle_exac_U0_filter_select_ch0_V,
        filter_select_ch0_V_ap_vld => scheduler_cycle_exac_U0_filter_select_ch0_V_ap_vld,
        filter_select_ch1_V => scheduler_cycle_exac_U0_filter_select_ch1_V,
        filter_select_ch1_V_ap_vld => scheduler_cycle_exac_U0_filter_select_ch1_V_ap_vld,
        filter_select_ch2_V => scheduler_cycle_exac_U0_filter_select_ch2_V,
        filter_select_ch2_V_ap_vld => scheduler_cycle_exac_U0_filter_select_ch2_V_ap_vld);

    output_fifo70_U0 : component output_fifo70
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => output_fifo70_U0_ap_start,
        ap_done => output_fifo70_U0_ap_done,
        ap_continue => output_fifo70_U0_ap_continue,
        ap_idle => output_fifo70_U0_ap_idle,
        ap_ready => output_fifo70_U0_ap_ready,
        pulse_queue_ch0_V_dout => pulse_queue_ch0_V_dout,
        pulse_queue_ch0_V_empty_n => pulse_queue_ch0_V_empty_n,
        pulse_queue_ch0_V_read => output_fifo70_U0_pulse_queue_ch0_V_read,
        pulse_metadata_ch0_V_TDATA => output_fifo70_U0_pulse_metadata_ch0_V_TDATA,
        pulse_metadata_ch0_V_TVALID => output_fifo70_U0_pulse_metadata_ch0_V_TVALID,
        pulse_metadata_ch0_V_TREADY => pulse_metadata_ch0_V_TREADY);

    output_fifo71_U0 : component output_fifo71
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => output_fifo71_U0_ap_start,
        ap_done => output_fifo71_U0_ap_done,
        ap_continue => output_fifo71_U0_ap_continue,
        ap_idle => output_fifo71_U0_ap_idle,
        ap_ready => output_fifo71_U0_ap_ready,
        pulse_queue_ch0_V_dout => pulse_queue_ch1_V_dout,
        pulse_queue_ch0_V_empty_n => pulse_queue_ch1_V_empty_n,
        pulse_queue_ch0_V_read => output_fifo71_U0_pulse_queue_ch0_V_read,
        pulse_metadata_ch0_V_TDATA => output_fifo71_U0_pulse_metadata_ch0_V_TDATA,
        pulse_metadata_ch0_V_TVALID => output_fifo71_U0_pulse_metadata_ch0_V_TVALID,
        pulse_metadata_ch0_V_TREADY => pulse_metadata_ch1_V_TREADY);

    output_fifo_U0 : component output_fifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => output_fifo_U0_ap_start,
        ap_done => output_fifo_U0_ap_done,
        ap_continue => output_fifo_U0_ap_continue,
        ap_idle => output_fifo_U0_ap_idle,
        ap_ready => output_fifo_U0_ap_ready,
        in_V_dout => pulse_queue_ch2_V_dout,
        in_V_empty_n => pulse_queue_ch2_V_empty_n,
        in_V_read => output_fifo_U0_in_V_read,
        out_V_TDATA => output_fifo_U0_out_V_TDATA,
        out_V_TVALID => output_fifo_U0_out_V_TVALID,
        out_V_TREADY => pulse_metadata_ch2_V_TREADY);

    pulse_queue_ch0_V_U : component fifo_w821_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scheduler_parser_U0_pulse_queue_0_V_din,
        if_full_n => pulse_queue_ch0_V_full_n,
        if_write => scheduler_parser_U0_pulse_queue_0_V_write,
        if_dout => pulse_queue_ch0_V_dout,
        if_empty_n => pulse_queue_ch0_V_empty_n,
        if_read => output_fifo70_U0_pulse_queue_ch0_V_read);

    pulse_queue_ch1_V_U : component fifo_w821_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scheduler_parser_U0_pulse_queue_1_V_din,
        if_full_n => pulse_queue_ch1_V_full_n,
        if_write => scheduler_parser_U0_pulse_queue_1_V_write,
        if_dout => pulse_queue_ch1_V_dout,
        if_empty_n => pulse_queue_ch1_V_empty_n,
        if_read => output_fifo71_U0_pulse_queue_ch0_V_read);

    pulse_queue_ch2_V_U : component fifo_w821_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scheduler_parser_U0_pulse_queue_2_V_din,
        if_full_n => pulse_queue_ch2_V_full_n,
        if_write => scheduler_parser_U0_pulse_queue_2_V_write,
        if_dout => pulse_queue_ch2_V_dout,
        if_empty_n => pulse_queue_ch2_V_empty_n,
        if_read => output_fifo_U0_in_V_read);

    pulse_queue_schedule_1_U : component fifo_w821_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scheduler_parser_U0_pulse_queue_s_V_din,
        if_full_n => pulse_queue_schedule_1_full_n,
        if_write => scheduler_parser_U0_pulse_queue_s_V_write,
        if_dout => pulse_queue_schedule_1_dout,
        if_empty_n => pulse_queue_schedule_1_empty_n,
        if_read => scheduler_cycle_exac_U0_pulse_queue_V_read);

    start_for_output_dEe_U : component start_for_output_dEe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_output_fifo70_U0_din,
        if_full_n => start_for_output_fifo70_U0_full_n,
        if_write => scheduler_parser_U0_start_write,
        if_dout => start_for_output_fifo70_U0_dout,
        if_empty_n => start_for_output_fifo70_U0_empty_n,
        if_read => output_fifo70_U0_ap_ready);

    start_for_output_eOg_U : component start_for_output_eOg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_output_fifo71_U0_din,
        if_full_n => start_for_output_fifo71_U0_full_n,
        if_write => scheduler_parser_U0_start_write,
        if_dout => start_for_output_fifo71_U0_dout,
        if_empty_n => start_for_output_fifo71_U0_empty_n,
        if_read => output_fifo71_U0_ap_ready);

    start_for_output_fYi_U : component start_for_output_fYi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_output_fifo_U0_din,
        if_full_n => start_for_output_fifo_U0_full_n,
        if_write => scheduler_parser_U0_start_write,
        if_dout => start_for_output_fifo_U0_dout,
        if_empty_n => start_for_output_fifo_U0_empty_n,
        if_read => output_fifo_U0_ap_ready);





    ap_sync_reg_scheduler_cycle_exac_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_scheduler_cycle_exac_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_scheduler_cycle_exac_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_scheduler_cycle_exac_U0_ap_ready <= ap_sync_scheduler_cycle_exac_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_scheduler_parser_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_scheduler_parser_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_scheduler_parser_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_scheduler_parser_U0_ap_ready <= ap_sync_scheduler_parser_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    scheduler_cycle_exac_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (scheduler_cycle_exac_U0_ap_ready = ap_const_logic_0))) then 
                scheduler_cycle_exac_U0_ap_ready_count <= std_logic_vector(unsigned(scheduler_cycle_exac_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((scheduler_cycle_exac_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                scheduler_cycle_exac_U0_ap_ready_count <= std_logic_vector(unsigned(scheduler_cycle_exac_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    scheduler_parser_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (scheduler_parser_U0_ap_ready = ap_const_logic_0))) then 
                scheduler_parser_U0_ap_ready_count <= std_logic_vector(unsigned(scheduler_parser_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((scheduler_parser_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                scheduler_parser_U0_ap_ready_count <= std_logic_vector(unsigned(scheduler_parser_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= ap_sync_done;
    ap_idle <= (scheduler_parser_U0_ap_idle and scheduler_cycle_exac_U0_ap_idle and output_fifo_U0_ap_idle and output_fifo71_U0_ap_idle and output_fifo70_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (scheduler_parser_U0_ap_done and scheduler_cycle_exac_U0_ap_done and output_fifo_U0_ap_done and output_fifo71_U0_ap_done and output_fifo70_U0_ap_done);
    ap_sync_ready <= (ap_sync_scheduler_parser_U0_ap_ready and ap_sync_scheduler_cycle_exac_U0_ap_ready);
    ap_sync_scheduler_cycle_exac_U0_ap_ready <= (scheduler_cycle_exac_U0_ap_ready or ap_sync_reg_scheduler_cycle_exac_U0_ap_ready);
    ap_sync_scheduler_parser_U0_ap_ready <= (scheduler_parser_U0_ap_ready or ap_sync_reg_scheduler_parser_U0_ap_ready);
    coef_ch0_V_V_TDATA <= scheduler_parser_U0_coef_ch0_V_V_TDATA;
    coef_ch0_V_V_TVALID <= scheduler_parser_U0_coef_ch0_V_V_TVALID;
    coef_ch1_V_V_TDATA <= scheduler_parser_U0_coef_ch1_V_V_TDATA;
    coef_ch1_V_V_TVALID <= scheduler_parser_U0_coef_ch1_V_V_TVALID;
    coef_ch2_V_V_TDATA <= scheduler_parser_U0_coef_ch2_V_V_TDATA;
    coef_ch2_V_V_TVALID <= scheduler_parser_U0_coef_ch2_V_V_TVALID;
    control_flags_V <= scheduler_cycle_exac_U0_control_flags_V;
    control_flags_V_ap_vld <= scheduler_cycle_exac_U0_control_flags_V_ap_vld;
    filter_select_ch0_V <= scheduler_cycle_exac_U0_filter_select_ch0_V;
    filter_select_ch0_V_ap_vld <= scheduler_cycle_exac_U0_filter_select_ch0_V_ap_vld;
    filter_select_ch1_V <= scheduler_cycle_exac_U0_filter_select_ch1_V;
    filter_select_ch1_V_ap_vld <= scheduler_cycle_exac_U0_filter_select_ch1_V_ap_vld;
    filter_select_ch2_V <= scheduler_cycle_exac_U0_filter_select_ch2_V;
    filter_select_ch2_V_ap_vld <= scheduler_cycle_exac_U0_filter_select_ch2_V_ap_vld;
    mt_pulse_V <= scheduler_cycle_exac_U0_mt_pulse_V;
    mt_pulse_V_ap_vld <= scheduler_cycle_exac_U0_mt_pulse_V_ap_vld;
    output_fifo70_U0_ap_continue <= ap_sync_done;
    output_fifo70_U0_ap_start <= start_for_output_fifo70_U0_empty_n;
    output_fifo70_U0_start_full_n <= ap_const_logic_1;
    output_fifo70_U0_start_write <= ap_const_logic_0;
    output_fifo71_U0_ap_continue <= ap_sync_done;
    output_fifo71_U0_ap_start <= start_for_output_fifo71_U0_empty_n;
    output_fifo71_U0_start_full_n <= ap_const_logic_1;
    output_fifo71_U0_start_write <= ap_const_logic_0;
    output_fifo_U0_ap_continue <= ap_sync_done;
    output_fifo_U0_ap_start <= start_for_output_fifo_U0_empty_n;
    output_fifo_U0_start_full_n <= ap_const_logic_1;
    output_fifo_U0_start_write <= ap_const_logic_0;
    pps_address0 <= scheduler_cycle_exac_U0_pps_address0;
    pps_ce0 <= scheduler_cycle_exac_U0_pps_ce0;
    pps_d0 <= ap_const_lv1_0;
    pps_we0 <= ap_const_logic_0;
    pulse_metadata_ch0_V_TDATA <= output_fifo70_U0_pulse_metadata_ch0_V_TDATA;
    pulse_metadata_ch0_V_TVALID <= output_fifo70_U0_pulse_metadata_ch0_V_TVALID;
    pulse_metadata_ch1_V_TDATA <= output_fifo71_U0_pulse_metadata_ch0_V_TDATA;
    pulse_metadata_ch1_V_TVALID <= output_fifo71_U0_pulse_metadata_ch0_V_TVALID;
    pulse_metadata_ch2_V_TDATA <= output_fifo_U0_out_V_TDATA;
    pulse_metadata_ch2_V_TVALID <= output_fifo_U0_out_V_TVALID;
    scheduler_cycle_exac_U0_ap_continue <= ap_sync_done;
    scheduler_cycle_exac_U0_ap_start <= ((ap_sync_reg_scheduler_cycle_exac_U0_ap_ready xor ap_const_logic_1) and ap_start);
    scheduler_cycle_exac_U0_start_full_n <= ap_const_logic_1;
    scheduler_cycle_exac_U0_start_write <= ap_const_logic_0;
    scheduler_parser_U0_ap_continue <= ap_sync_done;
    scheduler_parser_U0_ap_start <= ((ap_sync_reg_scheduler_parser_U0_ap_ready xor ap_const_logic_1) and ap_start);
    scheduler_parser_U0_start_full_n <= (start_for_output_fifo_U0_full_n and start_for_output_fifo71_U0_full_n and start_for_output_fifo70_U0_full_n);
    start_for_output_fifo70_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_output_fifo71_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_output_fifo_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
