-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scheduler_parser is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    cfg_pulse_sequence_s : IN STD_LOGIC_VECTOR (7 downto 0);
    cfg_pulse_sequence_l : IN STD_LOGIC_VECTOR (7 downto 0);
    cfg_num_pulses_to_ex : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_decimation : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_num_pulses_per_x : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_p_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_p_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_p_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_p_2_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_p_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_n_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_n_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_n_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_b_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_b_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_c_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_c_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_f_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_f_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_f_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_f_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_f_3_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_f_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_f_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_f_4_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_f_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_16_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_16_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_16_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_17_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_17_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_17_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_18_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_18_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_19_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_19_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_19_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_20_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_20_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_20_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_21_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_21_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_22_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_22_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_23_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_23_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_24_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_24_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_25_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_25_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_26_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_26_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_27_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_27_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_27_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_28_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_28_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_28_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_29_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_29_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_29_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_pulse_sequence_t_30_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cfg_pulse_sequence_t_30_ce0 : OUT STD_LOGIC;
    cfg_pulse_sequence_t_30_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_filter_coefs_ch0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    cfg_filter_coefs_ch0_ce0 : OUT STD_LOGIC;
    cfg_filter_coefs_ch0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_filter_coefs_ch1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    cfg_filter_coefs_ch1_ce0 : OUT STD_LOGIC;
    cfg_filter_coefs_ch1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_filter_coefs_ch2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    cfg_filter_coefs_ch2_ce0 : OUT STD_LOGIC;
    cfg_filter_coefs_ch2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coef_ch0_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    coef_ch0_V_V_TVALID : OUT STD_LOGIC;
    coef_ch0_V_V_TREADY : IN STD_LOGIC;
    coef_ch1_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    coef_ch1_V_V_TVALID : OUT STD_LOGIC;
    coef_ch1_V_V_TREADY : IN STD_LOGIC;
    coef_ch2_V_V_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    coef_ch2_V_V_TVALID : OUT STD_LOGIC;
    coef_ch2_V_V_TREADY : IN STD_LOGIC;
    pulse_queue_0_V_din : OUT STD_LOGIC_VECTOR (812 downto 0);
    pulse_queue_0_V_full_n : IN STD_LOGIC;
    pulse_queue_0_V_write : OUT STD_LOGIC;
    pulse_queue_1_V_din : OUT STD_LOGIC_VECTOR (812 downto 0);
    pulse_queue_1_V_full_n : IN STD_LOGIC;
    pulse_queue_1_V_write : OUT STD_LOGIC;
    pulse_queue_2_V_din : OUT STD_LOGIC_VECTOR (812 downto 0);
    pulse_queue_2_V_full_n : IN STD_LOGIC;
    pulse_queue_2_V_write : OUT STD_LOGIC;
    pulse_queue_s_V_din : OUT STD_LOGIC_VECTOR (812 downto 0);
    pulse_queue_s_V_full_n : IN STD_LOGIC;
    pulse_queue_s_V_write : OUT STD_LOGIC );
end;


architecture behav of scheduler_parser is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv813_lc_1 : STD_LOGIC_VECTOR (812 downto
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal coef_ch0_V_V_1_data_in : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch0_V_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch0_V_V_1_vld_in : STD_LOGIC;
    signal coef_ch0_V_V_1_vld_out : STD_LOGIC;
    signal coef_ch0_V_V_1_ack_in : STD_LOGIC;
    signal coef_ch0_V_V_1_ack_out : STD_LOGIC;
    signal coef_ch0_V_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch0_V_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch0_V_V_1_sel_rd : STD_LOGIC := '0';
    signal coef_ch0_V_V_1_sel_wr : STD_LOGIC := '0';
    signal coef_ch0_V_V_1_sel : STD_LOGIC;
    signal coef_ch0_V_V_1_load_A : STD_LOGIC;
    signal coef_ch0_V_V_1_load_B : STD_LOGIC;
    signal coef_ch0_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal coef_ch0_V_V_1_state_cmp_full : STD_LOGIC;
    signal coef_ch1_V_V_1_data_in : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch1_V_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch1_V_V_1_vld_in : STD_LOGIC;
    signal coef_ch1_V_V_1_vld_out : STD_LOGIC;
    signal coef_ch1_V_V_1_ack_in : STD_LOGIC;
    signal coef_ch1_V_V_1_ack_out : STD_LOGIC;
    signal coef_ch1_V_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch1_V_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch1_V_V_1_sel_rd : STD_LOGIC := '0';
    signal coef_ch1_V_V_1_sel_wr : STD_LOGIC := '0';
    signal coef_ch1_V_V_1_sel : STD_LOGIC;
    signal coef_ch1_V_V_1_load_A : STD_LOGIC;
    signal coef_ch1_V_V_1_load_B : STD_LOGIC;
    signal coef_ch1_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal coef_ch1_V_V_1_state_cmp_full : STD_LOGIC;
    signal coef_ch2_V_V_1_data_in : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch2_V_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch2_V_V_1_vld_in : STD_LOGIC;
    signal coef_ch2_V_V_1_vld_out : STD_LOGIC;
    signal coef_ch2_V_V_1_ack_in : STD_LOGIC;
    signal coef_ch2_V_V_1_ack_out : STD_LOGIC;
    signal coef_ch2_V_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch2_V_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal coef_ch2_V_V_1_sel_rd : STD_LOGIC := '0';
    signal coef_ch2_V_V_1_sel_wr : STD_LOGIC := '0';
    signal coef_ch2_V_V_1_sel : STD_LOGIC;
    signal coef_ch2_V_V_1_load_A : STD_LOGIC;
    signal coef_ch2_V_V_1_load_B : STD_LOGIC;
    signal coef_ch2_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal coef_ch2_V_V_1_state_cmp_full : STD_LOGIC;
    signal coef_ch0_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal coef_ch1_V_V_TDATA_blk_n : STD_LOGIC;
    signal coef_ch2_V_V_TDATA_blk_n : STD_LOGIC;
    signal pulse_queue_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal pulse_queue_1_V_blk_n : STD_LOGIC;
    signal pulse_queue_2_V_blk_n : STD_LOGIC;
    signal pulse_queue_s_V_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal cfg_pulse_sequence_l_1_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_l_1_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_s_1_fu_779_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cfg_pulse_sequence_s_1_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal set_fu_789_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal set_reg_1326 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_V_fu_795_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_832_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_reg_1375 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal coef_1_fu_844_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal coef_1_reg_1383 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_17_fu_860_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_reg_1388 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_V_1_fu_871_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal tmp_V_2_fu_876_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_3_fu_881_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal seq_idx_load_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_5_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1429 : STD_LOGIC_VECTOR (0 downto 0);
    signal cfg_pulse_sequence_p_6_reg_1553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal pulse_definition_num_reg_1560 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_blo_reg_1568 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_con_reg_1573 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_fil_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_fil_1_reg_1587 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_fil_2_reg_1594 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_reg_1601 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_1_reg_1608 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_2_reg_1616 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_3_reg_1623 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_4_reg_1630 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_5_reg_1638 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_6_reg_1645 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_7_reg_1652 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_8_reg_1659 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_9_reg_1666 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_10_reg_1673 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_11_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_12_reg_1687 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_13_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_14_reg_1701 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_tim_15_reg_1708 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_sequence_index_fu_930_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pulse_sequence_index_reg_1715 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1722 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalTime_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalTime_reg_1727 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalTime_2_fu_947_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalTime_2_reg_1733 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_rep_1_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_rep_1_reg_1742 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal pulse_first_pulse_in_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_first_pulse_in_reg_1747 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_last_pulse_in_s_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_last_pulse_in_s_reg_1754 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_definition_prt_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_definition_prt_4_reg_1767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_14_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1778 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_17_2_fu_1015_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_2_reg_1783 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ns_reg_1788 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ns_2_reg_1794 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_first_pulse_in_1_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_first_pulse_in_1_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_pulses_scheduled_5_fu_1037_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pulses_scheduled_5_reg_1807 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1812 : STD_LOGIC_VECTOR (0 downto 0);
    signal staggered_prt_index_2_fu_1247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal staggered_prt_index_2_reg_1820 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state49 : BOOLEAN;
    signal not_or_cond_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal staggered_prt_index_1_fu_1290_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal pulse_definition_prt_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_definition_prt_ce0 : STD_LOGIC;
    signal pulse_definition_prt_we0 : STD_LOGIC;
    signal pulse_definition_prt_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_definition_prt_ce1 : STD_LOGIC;
    signal pulse_definition_prt_we1 : STD_LOGIC;
    signal pulse_definition_prt_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_reg_724 : STD_LOGIC_VECTOR (2 downto 0);
    signal coef_reg_736 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal staggered_prt_index_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal pulse_rep_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state51 : BOOLEAN;
    signal tmp176_fu_1120_p32 : STD_LOGIC_VECTOR (812 downto 0);
    signal tmp_122_fu_1160_p32 : STD_LOGIC_VECTOR (812 downto 0);
    signal tmp_3512_fu_1201_p32 : STD_LOGIC_VECTOR (812 downto 0);
    signal seq_idx_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal seq_idx_1_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pulses_scheduled_3_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_1113_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pulses_scheduled_1_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pulses_scheduled_fu_1241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_num_samples_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_num_samples_1_fu_1077_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_820_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_812_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_828_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_cast_fu_856_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_927_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_definition_prt_5_fu_994_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_definition_prt_6_fu_1009_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_15_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_2_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_last_pulse_in_1_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_def_block_post_t_fu_1054_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_num_samples_fu_1065_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1020_ap_start : STD_LOGIC;
    signal grp_fu_1020_ap_done : STD_LOGIC;
    signal grp_fu_1024_ap_start : STD_LOGIC;
    signal grp_fu_1024_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);

    component hcr_controller_udcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scheduler_parser_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pulse_definition_prt_U : component scheduler_parser_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pulse_definition_prt_address0,
        ce0 => pulse_definition_prt_ce0,
        we0 => pulse_definition_prt_we0,
        d0 => cfg_pulse_sequence_p_q0,
        q0 => pulse_definition_prt_q0,
        address1 => pulse_definition_prt_address1,
        ce1 => pulse_definition_prt_ce1,
        we1 => pulse_definition_prt_we1,
        d1 => cfg_pulse_sequence_p_2_q0,
        q1 => pulse_definition_prt_q1);

    hcr_controller_udcud_U1 : component hcr_controller_udcud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1020_ap_start,
        done => grp_fu_1020_ap_done,
        din0 => tmp_14_reg_1778,
        din1 => cfg_decimation,
        ce => ap_const_logic_1,
        dout => grp_fu_1020_p2);

    hcr_controller_udcud_U2 : component hcr_controller_udcud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1024_ap_start,
        done => grp_fu_1024_ap_done,
        din0 => tmp_17_2_reg_1783,
        din1 => cfg_decimation,
        ce => ap_const_logic_1,
        dout => grp_fu_1024_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    coef_ch0_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch0_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = coef_ch0_V_V_1_ack_out) and (ap_const_logic_1 = coef_ch0_V_V_1_vld_out))) then 
                                        coef_ch0_V_V_1_sel_rd <= not(coef_ch0_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    coef_ch0_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch0_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = coef_ch0_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch0_V_V_1_ack_in))) then 
                                        coef_ch0_V_V_1_sel_wr <= not(coef_ch0_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    coef_ch0_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch0_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = coef_ch0_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch0_V_V_1_ack_out) and (coef_ch0_V_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = coef_ch0_V_V_1_vld_in) and (coef_ch0_V_V_1_state = ap_const_lv2_2)))) then 
                    coef_ch0_V_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = coef_ch0_V_V_1_vld_in) and (ap_const_logic_0 = coef_ch0_V_V_1_ack_out) and (coef_ch0_V_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = coef_ch0_V_V_1_ack_out) and (coef_ch0_V_V_1_state = ap_const_lv2_1)))) then 
                    coef_ch0_V_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = coef_ch0_V_V_1_vld_in) and (coef_ch0_V_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = coef_ch0_V_V_1_ack_out) and (coef_ch0_V_V_1_state = ap_const_lv2_1)) or ((coef_ch0_V_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = coef_ch0_V_V_1_vld_in) and (ap_const_logic_0 = coef_ch0_V_V_1_ack_out))) and not(((ap_const_logic_0 = coef_ch0_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch0_V_V_1_ack_out)))))) then 
                    coef_ch0_V_V_1_state <= ap_const_lv2_3;
                else 
                    coef_ch0_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    coef_ch1_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch1_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = coef_ch1_V_V_1_ack_out) and (ap_const_logic_1 = coef_ch1_V_V_1_vld_out))) then 
                                        coef_ch1_V_V_1_sel_rd <= not(coef_ch1_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    coef_ch1_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch1_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = coef_ch1_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch1_V_V_1_ack_in))) then 
                                        coef_ch1_V_V_1_sel_wr <= not(coef_ch1_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    coef_ch1_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch1_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = coef_ch1_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch1_V_V_1_ack_out) and (ap_const_lv2_3 = coef_ch1_V_V_1_state)) or ((ap_const_logic_0 = coef_ch1_V_V_1_vld_in) and (ap_const_lv2_2 = coef_ch1_V_V_1_state)))) then 
                    coef_ch1_V_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = coef_ch1_V_V_1_vld_in) and (ap_const_logic_0 = coef_ch1_V_V_1_ack_out) and (ap_const_lv2_3 = coef_ch1_V_V_1_state)) or ((ap_const_logic_0 = coef_ch1_V_V_1_ack_out) and (ap_const_lv2_1 = coef_ch1_V_V_1_state)))) then 
                    coef_ch1_V_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = coef_ch1_V_V_1_vld_in) and (ap_const_lv2_2 = coef_ch1_V_V_1_state)) or ((ap_const_logic_1 = coef_ch1_V_V_1_ack_out) and (ap_const_lv2_1 = coef_ch1_V_V_1_state)) or ((ap_const_lv2_3 = coef_ch1_V_V_1_state) and not(((ap_const_logic_1 = coef_ch1_V_V_1_vld_in) and (ap_const_logic_0 = coef_ch1_V_V_1_ack_out))) and not(((ap_const_logic_0 = coef_ch1_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch1_V_V_1_ack_out)))))) then 
                    coef_ch1_V_V_1_state <= ap_const_lv2_3;
                else 
                    coef_ch1_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    coef_ch2_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch2_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = coef_ch2_V_V_1_ack_out) and (ap_const_logic_1 = coef_ch2_V_V_1_vld_out))) then 
                                        coef_ch2_V_V_1_sel_rd <= not(coef_ch2_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    coef_ch2_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch2_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = coef_ch2_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch2_V_V_1_ack_in))) then 
                                        coef_ch2_V_V_1_sel_wr <= not(coef_ch2_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    coef_ch2_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                coef_ch2_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = coef_ch2_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch2_V_V_1_ack_out) and (ap_const_lv2_3 = coef_ch2_V_V_1_state)) or ((ap_const_logic_0 = coef_ch2_V_V_1_vld_in) and (ap_const_lv2_2 = coef_ch2_V_V_1_state)))) then 
                    coef_ch2_V_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = coef_ch2_V_V_1_vld_in) and (ap_const_logic_0 = coef_ch2_V_V_1_ack_out) and (ap_const_lv2_3 = coef_ch2_V_V_1_state)) or ((ap_const_logic_0 = coef_ch2_V_V_1_ack_out) and (ap_const_lv2_1 = coef_ch2_V_V_1_state)))) then 
                    coef_ch2_V_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = coef_ch2_V_V_1_vld_in) and (ap_const_lv2_2 = coef_ch2_V_V_1_state)) or ((ap_const_logic_1 = coef_ch2_V_V_1_ack_out) and (ap_const_lv2_1 = coef_ch2_V_V_1_state)) or ((ap_const_lv2_3 = coef_ch2_V_V_1_state) and not(((ap_const_logic_1 = coef_ch2_V_V_1_vld_in) and (ap_const_logic_0 = coef_ch2_V_V_1_ack_out))) and not(((ap_const_logic_0 = coef_ch2_V_V_1_vld_in) and (ap_const_logic_1 = coef_ch2_V_V_1_ack_out)))))) then 
                    coef_ch2_V_V_1_state <= ap_const_lv2_3;
                else 
                    coef_ch2_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = start_control_reg)) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    coef_reg_736_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then 
                coef_reg_736 <= coef_1_reg_1383;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0))) then 
                coef_reg_736 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    num_pulses_scheduled_1_fu_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))) and (ap_const_lv1_0 = not_or_cond_fu_1102_p2))) then 
                num_pulses_scheduled_1_fu_272 <= num_pulses_scheduled_fu_1241_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond1_fu_783_p2))) then 
                num_pulses_scheduled_1_fu_272 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    num_pulses_scheduled_3_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))) and (ap_const_lv1_0 = not_or_cond_fu_1102_p2))) then 
                num_pulses_scheduled_3_fu_268 <= p_1_fu_1113_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond1_fu_783_p2))) then 
                num_pulses_scheduled_3_fu_268 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pulse_rep_reg_759_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                pulse_rep_reg_759 <= pulse_rep_1_reg_1742;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                pulse_rep_reg_759 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    seq_idx_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_5_reg_1429) and (ap_const_lv1_0 = tmp_9_fu_953_p2))) then 
                seq_idx_fu_264 <= seq_idx_1_fu_980_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond1_fu_783_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_5_fu_889_p2)))) then 
                seq_idx_fu_264 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    staggered_prt_index_reg_747_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                staggered_prt_index_reg_747 <= staggered_prt_index_1_fu_1290_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                staggered_prt_index_reg_747 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    val_assign_reg_724_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_fu_838_p2))) then 
                val_assign_reg_724 <= set_reg_1326;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
                val_assign_reg_724 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then
                    cfg_pulse_sequence_l_1_reg_1313(7 downto 0) <= cfg_pulse_sequence_l_1_fu_775_p1(7 downto 0);
                    cfg_pulse_sequence_s_1_reg_1318(7 downto 0) <= cfg_pulse_sequence_s_1_fu_779_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                cfg_pulse_sequence_p_6_reg_1553 <= cfg_pulse_sequence_p_2_q0;
                pulse_definition_blo_reg_1568 <= cfg_pulse_sequence_b_q0;
                pulse_definition_con_reg_1573 <= cfg_pulse_sequence_c_q0;
                pulse_definition_fil_1_reg_1587 <= cfg_pulse_sequence_f_3_q0;
                pulse_definition_fil_2_reg_1594 <= cfg_pulse_sequence_f_4_q0;
                pulse_definition_fil_reg_1580 <= cfg_pulse_sequence_f_q0;
                pulse_definition_num_reg_1560 <= cfg_pulse_sequence_n_q0;
                pulse_definition_tim_10_reg_1673 <= cfg_pulse_sequence_t_25_q0;
                pulse_definition_tim_11_reg_1680 <= cfg_pulse_sequence_t_26_q0;
                pulse_definition_tim_12_reg_1687 <= cfg_pulse_sequence_t_27_q0;
                pulse_definition_tim_13_reg_1694 <= cfg_pulse_sequence_t_28_q0;
                pulse_definition_tim_14_reg_1701 <= cfg_pulse_sequence_t_29_q0;
                pulse_definition_tim_15_reg_1708 <= cfg_pulse_sequence_t_30_q0;
                pulse_definition_tim_1_reg_1608 <= cfg_pulse_sequence_t_16_q0;
                pulse_definition_tim_2_reg_1616 <= cfg_pulse_sequence_t_17_q0;
                pulse_definition_tim_3_reg_1623 <= cfg_pulse_sequence_t_18_q0;
                pulse_definition_tim_4_reg_1630 <= cfg_pulse_sequence_t_19_q0;
                pulse_definition_tim_5_reg_1638 <= cfg_pulse_sequence_t_20_q0;
                pulse_definition_tim_6_reg_1645 <= cfg_pulse_sequence_t_21_q0;
                pulse_definition_tim_7_reg_1652 <= cfg_pulse_sequence_t_22_q0;
                pulse_definition_tim_8_reg_1659 <= cfg_pulse_sequence_t_23_q0;
                pulse_definition_tim_9_reg_1666 <= cfg_pulse_sequence_t_24_q0;
                pulse_definition_tim_reg_1601 <= cfg_pulse_sequence_t_q0;
                pulse_sequence_index_reg_1715 <= pulse_sequence_index_fu_930_p2;
                tmp_2_reg_1722 <= tmp_2_fu_935_p2;
                totalTime_2_reg_1733 <= totalTime_2_fu_947_p2;
                totalTime_reg_1727 <= totalTime_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                coef_1_reg_1383 <= coef_1_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = coef_ch0_V_V_1_load_A)) then
                coef_ch0_V_V_1_payload_A <= coef_ch0_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = coef_ch0_V_V_1_load_B)) then
                coef_ch0_V_V_1_payload_B <= coef_ch0_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = coef_ch1_V_V_1_load_A)) then
                coef_ch1_V_V_1_payload_A <= coef_ch1_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = coef_ch1_V_V_1_load_B)) then
                coef_ch1_V_V_1_payload_B <= coef_ch1_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = coef_ch2_V_V_1_load_A)) then
                coef_ch2_V_V_1_payload_A <= coef_ch2_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = coef_ch2_V_V_1_load_B)) then
                coef_ch2_V_V_1_payload_B <= coef_ch2_V_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                ns_2_reg_1794 <= grp_fu_1024_p2;
                ns_reg_1788 <= grp_fu_1020_p2;
                num_pulses_scheduled_5_reg_1807 <= num_pulses_scheduled_5_fu_1037_p2;
                pulse_first_pulse_in_1_reg_1800 <= pulse_first_pulse_in_1_fu_1031_p2;
                tmp_8_reg_1812 <= tmp_8_fu_1043_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                pulse_definition_prt_4_reg_1767 <= pulse_definition_prt_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_5_reg_1429) and (ap_const_lv1_1 = tmp_9_fu_953_p2))) then
                pulse_first_pulse_in_reg_1747 <= pulse_first_pulse_in_fu_964_p2;
                pulse_last_pulse_in_s_reg_1754 <= pulse_last_pulse_in_s_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_5_reg_1429))) then
                pulse_rep_1_reg_1742 <= pulse_rep_1_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                seq_idx_load_reg_1423 <= seq_idx_fu_264;
                tmp_5_reg_1429 <= tmp_5_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0))) then
                set_reg_1326 <= set_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))) and (ap_const_lv1_0 = not_or_cond_fu_1102_p2))) then
                staggered_prt_index_2_reg_1820 <= staggered_prt_index_2_fu_1247_p2;
                tmp_num_samples_fu_276 <= pulse_num_samples_1_fu_1077_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_14_reg_1778 <= tmp_14_fu_1000_p2;
                tmp_17_2_reg_1783 <= tmp_17_2_fu_1015_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0))) then
                    tmp_16_reg_1375(8 downto 4) <= tmp_16_fu_832_p2(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_838_p2))) then
                tmp_17_reg_1388 <= tmp_17_fu_860_p2;
            end if;
        end if;
    end process;
    cfg_pulse_sequence_l_1_reg_1313(31 downto 8) <= "000000000000000000000000";
    cfg_pulse_sequence_s_1_reg_1318(31 downto 8) <= "000000000000000000000000";
    tmp_16_reg_1375(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_block_state2_io, ap_block_state3_io, ap_CS_fsm_state4, exitcond2_fu_838_p2, ap_block_state6_io, ap_CS_fsm_state8, tmp_5_fu_889_p2, tmp_5_reg_1429, ap_CS_fsm_state10, tmp_9_fu_953_p2, not_or_cond_fu_1102_p2, ap_block_state7_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond1_fu_783_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2) and (ap_block_state2_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_fu_838_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_5_fu_889_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((ap_const_lv1_0 = tmp_9_fu_953_p2) or (ap_const_lv1_0 = tmp_5_reg_1429)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))) and (ap_const_lv1_1 = not_or_cond_fu_1102_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))) and (ap_const_lv1_0 = not_or_cond_fu_1102_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_io_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, exitcond1_fu_783_p2)
    begin
                ap_block_state2_io <= (((ap_const_lv1_0 = exitcond1_fu_783_p2) and (ap_const_logic_0 = coef_ch0_V_V_1_ack_in)) or ((ap_const_lv1_0 = exitcond1_fu_783_p2) and (ap_const_logic_0 = coef_ch1_V_V_1_ack_in)) or ((ap_const_lv1_0 = exitcond1_fu_783_p2) and (ap_const_logic_0 = coef_ch2_V_V_1_ack_in)));
    end process;


    ap_block_state3_io_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in));
    end process;


    ap_block_state49_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n)
    begin
                ap_block_state49 <= ((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n));
    end process;


    ap_block_state51_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n)
    begin
                ap_block_state51 <= ((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n));
    end process;


    ap_block_state6_io_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in)
    begin
                ap_block_state6_io <= ((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in));
    end process;


    ap_block_state7_io_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in)
    begin
                ap_block_state7_io <= ((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(ap_done_reg, coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    cfg_filter_coefs_ch0_address0 <= tmp_18_cast_fu_865_p1(8 - 1 downto 0);

    cfg_filter_coefs_ch0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cfg_filter_coefs_ch0_ce0 <= ap_const_logic_1;
        else 
            cfg_filter_coefs_ch0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_filter_coefs_ch1_address0 <= tmp_18_cast_fu_865_p1(8 - 1 downto 0);

    cfg_filter_coefs_ch1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cfg_filter_coefs_ch1_ce0 <= ap_const_logic_1;
        else 
            cfg_filter_coefs_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_filter_coefs_ch2_address0 <= tmp_18_cast_fu_865_p1(8 - 1 downto 0);

    cfg_filter_coefs_ch2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cfg_filter_coefs_ch2_ce0 <= ap_const_logic_1;
        else 
            cfg_filter_coefs_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_b_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_b_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_b_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_c_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_c_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_c_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_f_3_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_f_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_f_3_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_f_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_f_4_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_f_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_f_4_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_f_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_f_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_f_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_f_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_l_1_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cfg_pulse_sequence_l),32));
    cfg_pulse_sequence_n_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_n_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_n_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_n_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_p_2_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_p_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_p_2_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_p_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_p_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_p_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_p_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_s_1_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cfg_pulse_sequence_s),32));
    cfg_pulse_sequence_t_16_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_16_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_16_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_17_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_17_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_17_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_18_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_18_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_18_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_19_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_19_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_19_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_20_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_20_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_20_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_21_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_21_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_21_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_22_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_22_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_22_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_23_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_23_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_23_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_24_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_24_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_24_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_25_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_25_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_25_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_26_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_26_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_26_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_27_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_27_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_27_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_28_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_28_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_28_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_29_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_29_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_29_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_30_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_30_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_30_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cfg_pulse_sequence_t_address0 <= tmp_7_fu_899_p1(5 - 1 downto 0);

    cfg_pulse_sequence_t_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cfg_pulse_sequence_t_ce0 <= ap_const_logic_1;
        else 
            cfg_pulse_sequence_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coef_1_fu_844_p2 <= std_logic_vector(unsigned(coef_reg_736) + unsigned(ap_const_lv6_1));
    coef_ch0_V_V_1_ack_in <= coef_ch0_V_V_1_state(1);
    coef_ch0_V_V_1_ack_out <= coef_ch0_V_V_TREADY;

    coef_ch0_V_V_1_data_in_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state6, tmp_V_fu_795_p1, tmp_V_1_fu_871_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            coef_ch0_V_V_1_data_in <= tmp_V_1_fu_871_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2))) then 
            coef_ch0_V_V_1_data_in <= tmp_V_fu_795_p1;
        else 
            coef_ch0_V_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    coef_ch0_V_V_1_data_out_assign_proc : process(coef_ch0_V_V_1_payload_A, coef_ch0_V_V_1_payload_B, coef_ch0_V_V_1_sel)
    begin
        if ((ap_const_logic_1 = coef_ch0_V_V_1_sel)) then 
            coef_ch0_V_V_1_data_out <= coef_ch0_V_V_1_payload_B;
        else 
            coef_ch0_V_V_1_data_out <= coef_ch0_V_V_1_payload_A;
        end if; 
    end process;

    coef_ch0_V_V_1_load_A <= (coef_ch0_V_V_1_state_cmp_full and not(coef_ch0_V_V_1_sel_wr));
    coef_ch0_V_V_1_load_B <= (coef_ch0_V_V_1_sel_wr and coef_ch0_V_V_1_state_cmp_full);
    coef_ch0_V_V_1_sel <= coef_ch0_V_V_1_sel_rd;
    coef_ch0_V_V_1_state_cmp_full <= '0' when (coef_ch0_V_V_1_state = ap_const_lv2_1) else '1';

    coef_ch0_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state6, ap_block_state2_io, ap_block_state6_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2) and (ap_block_state2_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_io = ap_const_boolean_0)))) then 
            coef_ch0_V_V_1_vld_in <= ap_const_logic_1;
        else 
            coef_ch0_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    coef_ch0_V_V_1_vld_out <= coef_ch0_V_V_1_state(0);
    coef_ch0_V_V_TDATA <= coef_ch0_V_V_1_data_out;

    coef_ch0_V_V_TDATA_blk_n_assign_proc : process(coef_ch0_V_V_1_state, ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2)) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            coef_ch0_V_V_TDATA_blk_n <= coef_ch0_V_V_1_state(1);
        else 
            coef_ch0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    coef_ch0_V_V_TVALID <= coef_ch0_V_V_1_state(0);
    coef_ch1_V_V_1_ack_in <= coef_ch1_V_V_1_state(1);
    coef_ch1_V_V_1_ack_out <= coef_ch1_V_V_TREADY;

    coef_ch1_V_V_1_data_in_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state6, tmp_V_fu_795_p1, tmp_V_2_fu_876_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            coef_ch1_V_V_1_data_in <= tmp_V_2_fu_876_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2))) then 
            coef_ch1_V_V_1_data_in <= tmp_V_fu_795_p1;
        else 
            coef_ch1_V_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    coef_ch1_V_V_1_data_out_assign_proc : process(coef_ch1_V_V_1_payload_A, coef_ch1_V_V_1_payload_B, coef_ch1_V_V_1_sel)
    begin
        if ((ap_const_logic_1 = coef_ch1_V_V_1_sel)) then 
            coef_ch1_V_V_1_data_out <= coef_ch1_V_V_1_payload_B;
        else 
            coef_ch1_V_V_1_data_out <= coef_ch1_V_V_1_payload_A;
        end if; 
    end process;

    coef_ch1_V_V_1_load_A <= (coef_ch1_V_V_1_state_cmp_full and not(coef_ch1_V_V_1_sel_wr));
    coef_ch1_V_V_1_load_B <= (coef_ch1_V_V_1_sel_wr and coef_ch1_V_V_1_state_cmp_full);
    coef_ch1_V_V_1_sel <= coef_ch1_V_V_1_sel_rd;
    coef_ch1_V_V_1_state_cmp_full <= '0' when (coef_ch1_V_V_1_state = ap_const_lv2_1) else '1';

    coef_ch1_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state6, ap_block_state2_io, ap_block_state6_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2) and (ap_block_state2_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_io = ap_const_boolean_0)))) then 
            coef_ch1_V_V_1_vld_in <= ap_const_logic_1;
        else 
            coef_ch1_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    coef_ch1_V_V_1_vld_out <= coef_ch1_V_V_1_state(0);
    coef_ch1_V_V_TDATA <= coef_ch1_V_V_1_data_out;

    coef_ch1_V_V_TDATA_blk_n_assign_proc : process(coef_ch1_V_V_1_state, ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2)) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            coef_ch1_V_V_TDATA_blk_n <= coef_ch1_V_V_1_state(1);
        else 
            coef_ch1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    coef_ch1_V_V_TVALID <= coef_ch1_V_V_1_state(0);
    coef_ch2_V_V_1_ack_in <= coef_ch2_V_V_1_state(1);
    coef_ch2_V_V_1_ack_out <= coef_ch2_V_V_TREADY;

    coef_ch2_V_V_1_data_in_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state6, tmp_V_fu_795_p1, tmp_V_3_fu_881_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            coef_ch2_V_V_1_data_in <= tmp_V_3_fu_881_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2))) then 
            coef_ch2_V_V_1_data_in <= tmp_V_fu_795_p1;
        else 
            coef_ch2_V_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    coef_ch2_V_V_1_data_out_assign_proc : process(coef_ch2_V_V_1_payload_A, coef_ch2_V_V_1_payload_B, coef_ch2_V_V_1_sel)
    begin
        if ((ap_const_logic_1 = coef_ch2_V_V_1_sel)) then 
            coef_ch2_V_V_1_data_out <= coef_ch2_V_V_1_payload_B;
        else 
            coef_ch2_V_V_1_data_out <= coef_ch2_V_V_1_payload_A;
        end if; 
    end process;

    coef_ch2_V_V_1_load_A <= (coef_ch2_V_V_1_state_cmp_full and not(coef_ch2_V_V_1_sel_wr));
    coef_ch2_V_V_1_load_B <= (coef_ch2_V_V_1_sel_wr and coef_ch2_V_V_1_state_cmp_full);
    coef_ch2_V_V_1_sel <= coef_ch2_V_V_1_sel_rd;
    coef_ch2_V_V_1_state_cmp_full <= '0' when (coef_ch2_V_V_1_state = ap_const_lv2_1) else '1';

    coef_ch2_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state6, ap_block_state2_io, ap_block_state6_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2) and (ap_block_state2_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_io = ap_const_boolean_0)))) then 
            coef_ch2_V_V_1_vld_in <= ap_const_logic_1;
        else 
            coef_ch2_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    coef_ch2_V_V_1_vld_out <= coef_ch2_V_V_1_state(0);
    coef_ch2_V_V_TDATA <= coef_ch2_V_V_1_data_out;

    coef_ch2_V_V_TDATA_blk_n_assign_proc : process(coef_ch2_V_V_1_state, ap_CS_fsm_state2, exitcond1_fu_783_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_783_p2)) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            coef_ch2_V_V_TDATA_blk_n <= coef_ch2_V_V_1_state(1);
        else 
            coef_ch2_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    coef_ch2_V_V_TVALID <= coef_ch2_V_V_1_state(0);
    exitcond1_fu_783_p2 <= "1" when (val_assign_reg_724 = ap_const_lv3_4) else "0";
    exitcond2_fu_838_p2 <= "1" when (coef_reg_736 = ap_const_lv6_30) else "0";

    grp_fu_1020_ap_start_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_1020_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1020_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1024_ap_start_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_1024_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1024_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    not_or_cond_fu_1102_p2 <= (rev_fu_1096_p2 and notlhs_fu_1084_p2);
    notlhs_fu_1084_p2 <= "0" when (cfg_num_pulses_to_ex = ap_const_lv32_0) else "1";
    num_pulses_scheduled_5_fu_1037_p2 <= std_logic_vector(unsigned(num_pulses_scheduled_3_fu_268) + unsigned(ap_const_lv32_1));
    num_pulses_scheduled_fu_1241_p2 <= std_logic_vector(unsigned(num_pulses_scheduled_1_fu_272) + unsigned(ap_const_lv32_1));
    p_1_fu_1113_p3 <= 
        ap_const_lv32_0 when (pulse_last_pulse_in_1_fu_1108_p2(0) = '1') else 
        num_pulses_scheduled_5_reg_1807;
    p_shl1_cast_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_820_p3),9));
    pulse_definition_prt_5_fu_994_p3 <= 
        pulse_definition_prt_4_reg_1767 when (tmp_13_fu_990_p2(0) = '1') else 
        totalTime_reg_1727;
    pulse_definition_prt_6_fu_1009_p3 <= 
        pulse_definition_prt_4_reg_1767 when (tmp_15_2_fu_1005_p2(0) = '1') else 
        totalTime_2_reg_1733;

    pulse_definition_prt_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_3_fu_975_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pulse_definition_prt_address0 <= tmp_3_fu_975_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pulse_definition_prt_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            pulse_definition_prt_address0 <= "X";
        end if; 
    end process;


    pulse_definition_prt_address1_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state9, tmp_11_fu_1253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            pulse_definition_prt_address1 <= tmp_11_fu_1253_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pulse_definition_prt_address1 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            pulse_definition_prt_address1 <= "X";
        end if; 
    end process;


    pulse_definition_prt_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            pulse_definition_prt_ce0 <= ap_const_logic_1;
        else 
            pulse_definition_prt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pulse_definition_prt_ce1_assign_proc : process(pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))))) then 
            pulse_definition_prt_ce1 <= ap_const_logic_1;
        else 
            pulse_definition_prt_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pulse_definition_prt_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pulse_definition_prt_we0 <= ap_const_logic_1;
        else 
            pulse_definition_prt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pulse_definition_prt_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pulse_definition_prt_we1 <= ap_const_logic_1;
        else 
            pulse_definition_prt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    pulse_first_pulse_in_1_fu_1031_p2 <= "1" when (num_pulses_scheduled_3_fu_268 = ap_const_lv32_0) else "0";
    pulse_first_pulse_in_fu_964_p2 <= "1" when (pulse_rep_reg_759 = ap_const_lv32_0) else "0";
    pulse_last_pulse_in_1_fu_1108_p2 <= (tmp_8_reg_1812 or not_or_cond_fu_1102_p2);
    pulse_last_pulse_in_s_fu_970_p2 <= "1" when (pulse_rep_reg_759 = tmp_2_reg_1722) else "0";
    pulse_num_samples_1_fu_1077_p3 <= 
        ap_const_lv32_1 when (tmp_18_2_fu_1072_p2(0) = '1') else 
        ns_2_reg_1794;
    pulse_num_samples_fu_1065_p3 <= 
        ap_const_lv32_1 when (tmp_15_fu_1060_p2(0) = '1') else 
        ns_reg_1788;

    pulse_queue_0_V_blk_n_assign_proc : process(pulse_queue_0_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pulse_queue_0_V_blk_n <= pulse_queue_0_V_full_n;
        else 
            pulse_queue_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_0_V_din_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51, tmp_122_fu_1160_p32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            pulse_queue_0_V_din <= ap_const_lv813_lc_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            pulse_queue_0_V_din <= tmp_122_fu_1160_p32;
        else 
            pulse_queue_0_V_din
        end if; 
    end process;


    pulse_queue_0_V_write_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))) or ((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))))) then 
            pulse_queue_0_V_write <= ap_const_logic_1;
        else 
            pulse_queue_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pulse_queue_1_V_blk_n_assign_proc : process(pulse_queue_1_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pulse_queue_1_V_blk_n <= pulse_queue_1_V_full_n;
        else 
            pulse_queue_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_1_V_din_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51, tmp_122_fu_1160_p32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            pulse_queue_1_V_din <= ap_const_lv813_lc_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            pulse_queue_1_V_din <= tmp_122_fu_1160_p32;
        else 
            pulse_queue_1_V_din
        end if; 
    end process;


    pulse_queue_1_V_write_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))) or ((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))))) then 
            pulse_queue_1_V_write <= ap_const_logic_1;
        else 
            pulse_queue_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pulse_queue_2_V_blk_n_assign_proc : process(pulse_queue_2_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pulse_queue_2_V_blk_n <= pulse_queue_2_V_full_n;
        else 
            pulse_queue_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_2_V_din_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51, tmp_3512_fu_1201_p32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            pulse_queue_2_V_din <= ap_const_lv813_lc_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            pulse_queue_2_V_din <= tmp_3512_fu_1201_p32;
        else 
            pulse_queue_2_V_din
        end if; 
    end process;


    pulse_queue_2_V_write_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))) or ((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))))) then 
            pulse_queue_2_V_write <= ap_const_logic_1;
        else 
            pulse_queue_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pulse_queue_s_V_blk_n_assign_proc : process(pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pulse_queue_s_V_blk_n <= pulse_queue_s_V_full_n;
        else 
            pulse_queue_s_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_s_V_din_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51, tmp176_fu_1120_p32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            pulse_queue_s_V_din <= ap_const_lv813_lc_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n))))) then 
            pulse_queue_s_V_din <= tmp176_fu_1120_p32;
        else 
            pulse_queue_s_V_din
        end if; 
    end process;


    pulse_queue_s_V_write_assign_proc : process(coef_ch0_V_V_1_ack_in, coef_ch1_V_V_1_ack_in, coef_ch2_V_V_1_ack_in, pulse_queue_0_V_full_n, pulse_queue_1_V_full_n, pulse_queue_2_V_full_n, pulse_queue_s_V_full_n, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))) or ((ap_const_logic_1 = ap_CS_fsm_state51) and not(((ap_const_logic_0 = coef_ch0_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch1_V_V_1_ack_in) or (ap_const_logic_0 = coef_ch2_V_V_1_ack_in) or (ap_const_logic_0 = pulse_queue_s_V_full_n) or (ap_const_logic_0 = pulse_queue_0_V_full_n) or (ap_const_logic_0 = pulse_queue_1_V_full_n) or (ap_const_logic_0 = pulse_queue_2_V_full_n)))))) then 
            pulse_queue_s_V_write <= ap_const_logic_1;
        else 
            pulse_queue_s_V_write <= ap_const_logic_0;
        end if; 
    end process;

    pulse_rep_1_fu_958_p2 <= std_logic_vector(unsigned(pulse_rep_reg_759) + unsigned(ap_const_lv32_1));
    pulse_sequence_index_fu_930_p2 <= std_logic_vector(unsigned(cfg_pulse_sequence_s) + unsigned(tmp_fu_927_p1));

    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev_fu_1096_p2 <= (ult_fu_1090_p2 xor ap_const_lv1_1);
    sel_tmp_fu_1284_p2 <= (tmp_10_fu_1273_p2 or tmp_12_fu_1278_p2);
    seq_idx_1_fu_980_p2 <= std_logic_vector(unsigned(seq_idx_load_reg_1423) + unsigned(ap_const_lv32_1));
    set_fu_789_p2 <= std_logic_vector(unsigned(val_assign_reg_724) + unsigned(ap_const_lv3_1));
    staggered_prt_index_1_fu_1290_p3 <= 
        ap_const_lv8_0 when (sel_tmp_fu_1284_p2(0) = '1') else 
        staggered_prt_index_2_reg_1820;
    staggered_prt_index_2_fu_1247_p2 <= std_logic_vector(unsigned(staggered_prt_index_reg_747) + unsigned(ap_const_lv8_1));
    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
    tmp176_fu_1120_p32 <= ((((((((((((((((((((((((((((((ap_const_lv1_0 & pulse_last_pulse_in_1_fu_1108_p2) & pulse_first_pulse_in_1_reg_1800) & pulse_last_pulse_in_s_reg_1754) & pulse_first_pulse_in_reg_1747) & tmp_num_samples_fu_276) & pulse_sequence_index_reg_1715) & pulse_definition_tim_15_reg_1708) & pulse_definition_tim_14_reg_1701) & pulse_definition_tim_13_reg_1694) & pulse_definition_tim_12_reg_1687) & pulse_definition_tim_11_reg_1680) & pulse_definition_tim_10_reg_1673) & pulse_definition_tim_9_reg_1666) & pulse_definition_tim_8_reg_1659) & pulse_definition_tim_7_reg_1652) & pulse_definition_tim_6_reg_1645) & pulse_definition_tim_5_reg_1638) & pulse_definition_tim_4_reg_1630) & pulse_definition_tim_3_reg_1623) & pulse_definition_tim_2_reg_1616) & pulse_definition_tim_1_reg_1608) & pulse_definition_tim_reg_1601) & pulse_definition_fil_2_reg_1594) & pulse_definition_fil_1_reg_1587) & pulse_definition_fil_reg_1580) & pulse_definition_con_reg_1573) & tmp_def_block_post_t_fu_1054_p3) & pulse_definition_num_reg_1560) & cfg_pulse_sequence_p_6_reg_1553) & pulse_definition_prt_4_reg_1767);
    tmp_10_fu_1273_p2 <= "1" when (staggered_prt_index_2_reg_1820 = ap_const_lv8_2) else "0";
    tmp_11_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(staggered_prt_index_2_fu_1247_p2),64));
    tmp_122_fu_1160_p32 <= ((((((((((((((((((((((((((((((ap_const_lv1_0 & pulse_last_pulse_in_1_fu_1108_p2) & pulse_first_pulse_in_1_reg_1800) & pulse_last_pulse_in_s_reg_1754) & pulse_first_pulse_in_reg_1747) & pulse_num_samples_fu_1065_p3) & pulse_sequence_index_reg_1715) & pulse_definition_tim_15_reg_1708) & pulse_definition_tim_14_reg_1701) & pulse_definition_tim_13_reg_1694) & pulse_definition_tim_12_reg_1687) & pulse_definition_tim_11_reg_1680) & pulse_definition_tim_10_reg_1673) & pulse_definition_tim_9_reg_1666) & pulse_definition_tim_8_reg_1659) & pulse_definition_tim_7_reg_1652) & pulse_definition_tim_6_reg_1645) & pulse_definition_tim_5_reg_1638) & pulse_definition_tim_4_reg_1630) & pulse_definition_tim_3_reg_1623) & pulse_definition_tim_2_reg_1616) & pulse_definition_tim_1_reg_1608) & pulse_definition_tim_reg_1601) & pulse_definition_fil_2_reg_1594) & pulse_definition_fil_1_reg_1587) & pulse_definition_fil_reg_1580) & pulse_definition_con_reg_1573) & tmp_def_block_post_t_fu_1054_p3) & pulse_definition_num_reg_1560) & cfg_pulse_sequence_p_6_reg_1553) & pulse_definition_prt_4_reg_1767);
    tmp_12_fu_1278_p2 <= "1" when (pulse_definition_prt_q1 = ap_const_lv32_0) else "0";
    tmp_13_fu_990_p2 <= "1" when (unsigned(pulse_definition_prt_4_reg_1767) < unsigned(totalTime_reg_1727)) else "0";
    tmp_14_fu_1000_p2 <= std_logic_vector(unsigned(pulse_definition_prt_5_fu_994_p3) - unsigned(pulse_definition_tim_1_reg_1608));
    tmp_15_2_fu_1005_p2 <= "1" when (unsigned(pulse_definition_prt_4_reg_1767) < unsigned(totalTime_2_reg_1733)) else "0";
    tmp_15_fu_1060_p2 <= "1" when (ns_reg_1788 = ap_const_lv32_0) else "0";
    tmp_16_fu_832_p2 <= std_logic_vector(unsigned(tmp_4_fu_812_p3) - unsigned(p_shl1_cast_fu_828_p1));
    tmp_17_2_fu_1015_p2 <= std_logic_vector(unsigned(pulse_definition_prt_6_fu_1009_p3) - unsigned(pulse_definition_tim_4_reg_1630));
    tmp_17_fu_860_p2 <= std_logic_vector(unsigned(tmp_16_reg_1375) + unsigned(tmp_1_cast_fu_856_p1));
    tmp_18_2_fu_1072_p2 <= "1" when (ns_2_reg_1794 = ap_const_lv32_0) else "0";
        tmp_18_cast_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_1388),64));

    tmp_1_cast_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_850_p2),9));
    tmp_1_fu_820_p3 <= (val_assign_reg_724 & ap_const_lv4_0);
    tmp_2_fu_935_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(cfg_pulse_sequence_n_q0));
    tmp_3512_fu_1201_p32 <= ((((((((((((((((((((((((((((((ap_const_lv1_0 & pulse_last_pulse_in_1_fu_1108_p2) & pulse_first_pulse_in_1_reg_1800) & pulse_last_pulse_in_s_reg_1754) & pulse_first_pulse_in_reg_1747) & pulse_num_samples_1_fu_1077_p3) & pulse_sequence_index_reg_1715) & pulse_definition_tim_15_reg_1708) & pulse_definition_tim_14_reg_1701) & pulse_definition_tim_13_reg_1694) & pulse_definition_tim_12_reg_1687) & pulse_definition_tim_11_reg_1680) & pulse_definition_tim_10_reg_1673) & pulse_definition_tim_9_reg_1666) & pulse_definition_tim_8_reg_1659) & pulse_definition_tim_7_reg_1652) & pulse_definition_tim_6_reg_1645) & pulse_definition_tim_5_reg_1638) & pulse_definition_tim_4_reg_1630) & pulse_definition_tim_3_reg_1623) & pulse_definition_tim_2_reg_1616) & pulse_definition_tim_1_reg_1608) & pulse_definition_tim_reg_1601) & pulse_definition_fil_2_reg_1594) & pulse_definition_fil_1_reg_1587) & pulse_definition_fil_reg_1580) & pulse_definition_con_reg_1573) & tmp_def_block_post_t_fu_1054_p3) & pulse_definition_num_reg_1560) & cfg_pulse_sequence_p_6_reg_1553) & pulse_definition_prt_4_reg_1767);
    tmp_3_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(staggered_prt_index_reg_747),64));
    tmp_4_fu_812_p3 <= (val_assign_reg_724 & ap_const_lv6_0);
    tmp_5_fu_889_p2 <= "1" when (unsigned(seq_idx_fu_264) < unsigned(cfg_pulse_sequence_l_1_reg_1313)) else "0";
    tmp_6_fu_894_p2 <= std_logic_vector(unsigned(seq_idx_fu_264) + unsigned(cfg_pulse_sequence_s_1_reg_1318));
    tmp_7_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_894_p2),64));
    tmp_8_fu_1043_p2 <= "1" when (num_pulses_scheduled_5_fu_1037_p2 = cfg_num_pulses_per_x) else "0";
    tmp_9_fu_953_p2 <= "1" when (unsigned(pulse_rep_reg_759) < unsigned(pulse_definition_num_reg_1560)) else "0";
    tmp_V_1_fu_871_p1 <= cfg_filter_coefs_ch0_q0(24 - 1 downto 0);
    tmp_V_2_fu_876_p1 <= cfg_filter_coefs_ch1_q0(24 - 1 downto 0);
    tmp_V_3_fu_881_p1 <= cfg_filter_coefs_ch2_q0(24 - 1 downto 0);
    tmp_V_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_724),24));
    tmp_def_block_post_t_fu_1054_p3 <= 
        pulse_definition_blo_reg_1568 when (pulse_last_pulse_in_s_reg_1754(0) = '1') else 
        ap_const_lv32_0;
    tmp_fu_927_p1 <= seq_idx_load_reg_1423(8 - 1 downto 0);
    tmp_s_fu_850_p2 <= std_logic_vector(signed(ap_const_lv6_2F) - signed(coef_reg_736));
    totalTime_2_fu_947_p2 <= std_logic_vector(unsigned(cfg_pulse_sequence_t_19_q0) + unsigned(cfg_pulse_sequence_t_27_q0));
    totalTime_fu_941_p2 <= std_logic_vector(unsigned(cfg_pulse_sequence_t_16_q0) + unsigned(cfg_pulse_sequence_t_24_q0));
    ult_fu_1090_p2 <= "1" when (unsigned(num_pulses_scheduled_1_fu_272) < unsigned(cfg_num_pulses_to_ex)) else "0";
end behav;
