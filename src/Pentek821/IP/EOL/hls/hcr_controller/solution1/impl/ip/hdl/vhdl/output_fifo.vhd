-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity output_fifo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_dout : IN STD_LOGIC_VECTOR (820 downto 0);
    in_V_empty_n : IN STD_LOGIC;
    in_V_read : OUT STD_LOGIC;
    out_V_TDATA : OUT STD_LOGIC_VECTOR (823 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of output_fifo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_334 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal pulse_terminate_fu_65_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal regslice_both_out_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal trunc_ln176_fu_73_p1 : STD_LOGIC_VECTOR (819 downto 0);
    signal tmp_1_fu_77_p3 : STD_LOGIC_VECTOR (820 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal out_V_TDATA_int : STD_LOGIC_VECTOR (823 downto 0);
    signal out_V_TVALID_int : STD_LOGIC;
    signal out_V_TREADY_int : STD_LOGIC;
    signal regslice_both_out_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_out_V_U : component regslice_both
    generic map (
        DataWidth => 824)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => out_V_TDATA_int,
        vld_in => out_V_TVALID_int,
        ack_in => out_V_TREADY_int,
        data_out => out_V_TDATA,
        vld_out => regslice_both_out_V_U_vld_out,
        ack_out => out_V_TREADY,
        apdone_blk => regslice_both_out_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((in_V_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_V_U_apdone_blk = ap_const_logic_1))) and (pulse_terminate_fu_65_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_V_empty_n, ap_CS_fsm_state2, pulse_terminate_fu_65_p3, ap_CS_fsm_state3, regslice_both_out_V_U_apdone_blk, ap_block_state2_io, out_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((in_V_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_V_U_apdone_blk = ap_const_logic_1))) and (pulse_terminate_fu_65_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((in_V_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_V_U_apdone_blk = ap_const_logic_1))) and (pulse_terminate_fu_65_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (out_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(in_V_empty_n, regslice_both_out_V_U_apdone_blk)
    begin
                ap_block_state2 <= ((in_V_empty_n = ap_const_logic_0) or (regslice_both_out_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state2_io_assign_proc : process(pulse_terminate_fu_65_p3, out_V_TREADY_int)
    begin
                ap_block_state2_io <= ((pulse_terminate_fu_65_p3 = ap_const_lv1_0) and (out_V_TREADY_int = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_V_empty_n, ap_CS_fsm_state2, pulse_terminate_fu_65_p3, regslice_both_out_V_U_apdone_blk, ap_block_state2_io)
    begin
        if ((not(((in_V_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_V_U_apdone_blk = ap_const_logic_1))) and (pulse_terminate_fu_65_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(in_V_empty_n, ap_CS_fsm_state2, pulse_terminate_fu_65_p3, regslice_both_out_V_U_apdone_blk, ap_block_state2_io)
    begin
        if ((not(((in_V_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_V_U_apdone_blk = ap_const_logic_1))) and (pulse_terminate_fu_65_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    in_V_blk_n_assign_proc : process(in_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_V_blk_n <= in_V_empty_n;
        else 
            in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_read_assign_proc : process(in_V_empty_n, ap_CS_fsm_state2, regslice_both_out_V_U_apdone_blk, ap_block_state2_io)
    begin
        if ((not(((in_V_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_read <= ap_const_logic_1;
        else 
            in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, pulse_terminate_fu_65_p3, ap_CS_fsm_state3, out_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((pulse_terminate_fu_65_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_V_TDATA_blk_n <= out_V_TREADY_int;
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_V_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_77_p3),824));

    out_V_TVALID <= regslice_both_out_V_U_vld_out;

    out_V_TVALID_int_assign_proc : process(in_V_empty_n, ap_CS_fsm_state2, pulse_terminate_fu_65_p3, regslice_both_out_V_U_apdone_blk, ap_block_state2_io)
    begin
        if ((not(((in_V_empty_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_out_V_U_apdone_blk = ap_const_logic_1))) and (pulse_terminate_fu_65_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_V_TVALID_int <= ap_const_logic_1;
        else 
            out_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    pulse_terminate_fu_65_p3 <= in_V_dout(820 downto 820);
    tmp_1_fu_77_p3 <= (ap_const_lv1_0 & trunc_ln176_fu_73_p1);
    trunc_ln176_fu_73_p1 <= in_V_dout(820 - 1 downto 0);
end behav;
