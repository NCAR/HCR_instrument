-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scheduler_cycle_exac is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pps_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    pps_ce0 : OUT STD_LOGIC;
    pps_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    pulse_queue_V_dout : IN STD_LOGIC_VECTOR (820 downto 0);
    pulse_queue_V_empty_n : IN STD_LOGIC;
    pulse_queue_V_read : OUT STD_LOGIC;
    mt_pulse_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    mt_pulse_V_ap_vld : OUT STD_LOGIC;
    control_flags_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    control_flags_V_ap_vld : OUT STD_LOGIC;
    filter_select_ch0_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    filter_select_ch0_V_ap_vld : OUT STD_LOGIC;
    filter_select_ch1_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    filter_select_ch1_V_ap_vld : OUT STD_LOGIC;
    filter_select_ch2_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    filter_select_ch2_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of scheduler_cycle_exac is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_334 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pulse_queue_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal tmp_s_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_rec_reg_339 : STD_LOGIC_VECTOR (63 downto 0);
    signal got_pps_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal prt_clock_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_nbreadreq_fu_278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_rec_fu_410_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal got_pps_phi_fu_355_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_s_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp1_iter1_tmp_s_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_def_control_fl_reg_1452 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_filter_sel_reg_1457 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_filter_sel_1_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_filter_sel_2_reg_1467 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_terminate_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal pulse_terminate_reg_1472 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_pulse_terminate_reg_1472 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_2_fu_934_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_2_reg_1476 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_2_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_2_reg_1482 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_3_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_3_reg_1487 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_3_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_3_reg_1492 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_4_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_4_reg_1497 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_4_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_4_reg_1502 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_5_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_5_reg_1507 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_5_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_5_reg_1512 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_6_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_6_reg_1517 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_6_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_6_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_7_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_7_reg_1527 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_7_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_7_reg_1532 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1537 : STD_LOGIC_VECTOR (0 downto 0);
    signal prt_clock_2_fu_1068_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal p_066_2_fu_1290_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_predicate_tran7to9_state6 : BOOLEAN;
    signal ap_condition_pp1_exit_iter1_state7 : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal prt_clock_phi_fu_367_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_phi_fu_379_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_p_066_1_reg_386 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_066_1_phi_fu_390_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_precharge_reg_pp1_iter0_prt_clock_1_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal prt_clock_1_phi_fu_402_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_0_6_s_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_block_post_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_0_3_s_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_0_4_s_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_0_5_s_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_prt_0_fu_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_prt_0_1_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_offs_fu_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_offs_1_fu_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_offs_2_fu_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_offs_3_fu_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_offs_4_fu_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_offs_5_fu_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_offs_6_fu_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_offs_7_fu_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_widt_fu_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_widt_1_fu_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_widt_2_fu_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_widt_3_fu_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_widt_4_fu_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_widt_5_fu_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_widt_6_fu_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal pulse_def_timer_widt_7_fu_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_066_4_7_fu_1267_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0_flag00001001 : BOOLEAN;
    signal tmp_3_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_816_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_826_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_846_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_066_4_fu_856_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_1_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_870_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_1_fu_888_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_1_fu_880_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_1_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_900_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_066_4_1_fu_910_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_2_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_924_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_2_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_3_fu_960_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_4_fu_978_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_5_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_6_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_7_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal prt_clock_3_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1089_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_066_4_2_fu_1098_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1104_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_3_fu_1114_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_1121_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_066_4_3_fu_1131_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1138_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_4_fu_1148_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_1155_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_066_4_4_fu_1165_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_1172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_5_fu_1182_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_1189_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_066_4_5_fu_1199_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1206_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_6_fu_1216_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_1223_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_066_4_6_fu_1233_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_1240_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_7_fu_1250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_1257_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_237 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_4_nbreadreq_fu_278_p3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 xor ap_const_logic_1);
                elsif ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_4_nbreadreq_fu_278_p3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_tran7to9_state6))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state7)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state7))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_237 = ap_const_boolean_1)) then
                if (((tmp_s_fu_422_p2 = ap_const_lv1_1) and (pulse_terminate_fu_642_p3 = ap_const_lv1_0))) then 
                    ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386 <= ap_phi_precharge_reg_pp1_iter0_p_066_1_reg_386;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_237 = ap_const_boolean_1)) then
                if (((tmp_s_fu_422_p2 = ap_const_lv1_1) and (pulse_terminate_fu_642_p3 = ap_const_lv1_0))) then 
                    ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398 <= ap_phi_precharge_reg_pp1_iter0_prt_clock_1_reg_398;
                end if;
            end if; 
        end if;
    end process;

    got_pps_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_4_nbreadreq_fu_278_p3))) then 
                got_pps_reg_351 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = got_pps_reg_351))) then 
                got_pps_reg_351 <= phitmp_fu_416_p2;
            end if; 
        end if;
    end process;

    p_0_rec_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_4_nbreadreq_fu_278_p3))) then 
                p_0_rec_reg_339 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = got_pps_phi_fu_355_p4))) then 
                p_0_rec_reg_339 <= p_rec_fu_410_p2;
            end if; 
        end if;
    end process;

    prt_clock_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                prt_clock_reg_363 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and ((tmp_s_reg_1448 = ap_const_lv1_0) or (pulse_terminate_reg_1472 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                prt_clock_reg_363 <= prt_clock_2_fu_1068_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_pulse_terminate_reg_1472 <= pulse_terminate_reg_1472;
                ap_reg_pp1_iter1_tmp_s_reg_1448 <= tmp_s_reg_1448;
                tmp_s_reg_1448 <= tmp_s_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and ((tmp_s_reg_1448 = ap_const_lv1_0) or (pulse_terminate_reg_1472 = ap_const_lv1_0)))) then
                p_Val2_1_2_reg_1476 <= p_Val2_1_2_fu_934_p3;
                tmp_35_3_reg_1487 <= tmp_35_3_fu_954_p2;
                tmp_35_4_reg_1497 <= tmp_35_4_fu_972_p2;
                tmp_35_5_reg_1507 <= tmp_35_5_fu_990_p2;
                tmp_35_6_reg_1517 <= tmp_35_6_fu_1008_p2;
                tmp_35_7_reg_1527 <= tmp_35_7_fu_1026_p2;
                tmp_37_2_reg_1482 <= tmp_37_2_fu_948_p2;
                tmp_37_3_reg_1492 <= tmp_37_3_fu_966_p2;
                tmp_37_4_reg_1502 <= tmp_37_4_fu_984_p2;
                tmp_37_5_reg_1512 <= tmp_37_5_fu_1002_p2;
                tmp_37_6_reg_1522 <= tmp_37_6_fu_1020_p2;
                tmp_37_7_reg_1532 <= tmp_37_7_fu_1038_p2;
                tmp_8_reg_1537 <= tmp_8_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and ((ap_reg_pp1_iter1_tmp_s_reg_1448 = ap_const_lv1_0) or (ap_reg_pp1_iter1_pulse_terminate_reg_1472 = ap_const_lv1_0)))) then
                p_s_reg_375 <= p_066_2_fu_1290_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (pulse_terminate_reg_1472 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_1 = tmp_s_reg_1448))) then
                pulse_0_3_s_fu_198 <= pulse_def_control_fl_reg_1452;
                pulse_0_4_s_fu_202 <= pulse_def_filter_sel_reg_1457;
                pulse_0_5_s_fu_206 <= pulse_def_filter_sel_1_reg_1462;
                pulse_0_6_s_fu_190 <= pulse_def_filter_sel_2_reg_1467;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_s_fu_422_p2 = ap_const_lv1_1) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (pulse_terminate_fu_642_p3 = ap_const_lv1_0))) then
                pulse_def_block_post_fu_194 <= pulse_queue_V_dout(127 downto 96);
                pulse_def_prt_0_fu_210 <= pulse_def_prt_0_1_fu_428_p1;
                pulse_def_timer_offs_1_fu_218 <= pulse_queue_V_dout(319 downto 288);
                pulse_def_timer_offs_2_fu_222 <= pulse_queue_V_dout(351 downto 320);
                pulse_def_timer_offs_3_fu_226 <= pulse_queue_V_dout(383 downto 352);
                pulse_def_timer_offs_4_fu_230 <= pulse_queue_V_dout(415 downto 384);
                pulse_def_timer_offs_5_fu_234 <= pulse_queue_V_dout(447 downto 416);
                pulse_def_timer_offs_6_fu_238 <= pulse_queue_V_dout(479 downto 448);
                pulse_def_timer_offs_7_fu_242 <= pulse_queue_V_dout(511 downto 480);
                pulse_def_timer_offs_fu_214 <= pulse_queue_V_dout(287 downto 256);
                pulse_def_timer_widt_1_fu_250 <= pulse_queue_V_dout(575 downto 544);
                pulse_def_timer_widt_2_fu_254 <= pulse_queue_V_dout(607 downto 576);
                pulse_def_timer_widt_3_fu_258 <= pulse_queue_V_dout(639 downto 608);
                pulse_def_timer_widt_4_fu_262 <= pulse_queue_V_dout(671 downto 640);
                pulse_def_timer_widt_5_fu_266 <= pulse_queue_V_dout(703 downto 672);
                pulse_def_timer_widt_6_fu_270 <= pulse_queue_V_dout(735 downto 704);
                pulse_def_timer_widt_7_fu_274 <= pulse_queue_V_dout(767 downto 736);
                pulse_def_timer_widt_fu_246 <= pulse_queue_V_dout(543 downto 512);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_s_fu_422_p2 = ap_const_lv1_1) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                pulse_def_control_fl_reg_1452 <= pulse_queue_V_dout(159 downto 128);
                pulse_def_filter_sel_1_reg_1462 <= pulse_queue_V_dout(223 downto 192);
                pulse_def_filter_sel_2_reg_1467 <= pulse_queue_V_dout(255 downto 224);
                pulse_def_filter_sel_reg_1457 <= pulse_queue_V_dout(191 downto 160);
                pulse_terminate_reg_1472 <= pulse_queue_V_dout(820 downto 820);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_4_nbreadreq_fu_278_p3, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, got_pps_phi_fu_355_p4, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_flag00011011, ap_block_pp1_stage0_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_4_nbreadreq_fu_278_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (got_pps_phi_fu_355_p4 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (got_pps_phi_fu_355_p4 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_flag00001001_assign_proc : process(pulse_queue_V_empty_n, ap_enable_reg_pp1_iter0, tmp_s_fu_422_p2)
    begin
                ap_block_pp1_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_s_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_0 = pulse_queue_V_empty_n));
    end process;


    ap_block_pp1_stage0_flag00011001_assign_proc : process(pulse_queue_V_empty_n, ap_enable_reg_pp1_iter0, tmp_s_fu_422_p2)
    begin
                ap_block_pp1_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_s_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_0 = pulse_queue_V_empty_n));
    end process;


    ap_block_pp1_stage0_flag00011011_assign_proc : process(pulse_queue_V_empty_n, ap_enable_reg_pp1_iter0, tmp_s_fu_422_p2)
    begin
                ap_block_pp1_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_s_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_0 = pulse_queue_V_empty_n));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter0_assign_proc : process(pulse_queue_V_empty_n, tmp_s_fu_422_p2)
    begin
                ap_block_state6_pp1_stage0_iter0 <= ((tmp_s_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_0 = pulse_queue_V_empty_n));
    end process;

        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_237_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_flag00011001)
    begin
                ap_condition_237 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(got_pps_phi_fu_355_p4)
    begin
        if ((got_pps_phi_fu_355_p4 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter1_state7_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_condition_pp1_exit_iter1_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_precharge_reg_pp1_iter0_p_066_1_reg_386 <= "XXXXXXXX";
    ap_phi_precharge_reg_pp1_iter0_prt_clock_1_reg_398 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_tran7to9_state6_assign_proc : process(tmp_s_fu_422_p2, pulse_terminate_fu_642_p3)
    begin
                ap_predicate_tran7to9_state6 <= ((tmp_s_fu_422_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = pulse_terminate_fu_642_p3));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    control_flags_V <= pulse_0_3_s_fu_198;

    control_flags_V_ap_vld_assign_proc : process(ap_reg_pp1_iter1_tmp_s_reg_1448, ap_reg_pp1_iter1_pulse_terminate_reg_1472, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and ((ap_reg_pp1_iter1_tmp_s_reg_1448 = ap_const_lv1_0) or (ap_reg_pp1_iter1_pulse_terminate_reg_1472 = ap_const_lv1_0)) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0))) then 
            control_flags_V_ap_vld <= ap_const_logic_1;
        else 
            control_flags_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    filter_select_ch0_V <= pulse_0_4_s_fu_202(2 - 1 downto 0);

    filter_select_ch0_V_ap_vld_assign_proc : process(ap_reg_pp1_iter1_tmp_s_reg_1448, ap_reg_pp1_iter1_pulse_terminate_reg_1472, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and ((ap_reg_pp1_iter1_tmp_s_reg_1448 = ap_const_lv1_0) or (ap_reg_pp1_iter1_pulse_terminate_reg_1472 = ap_const_lv1_0)) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0))) then 
            filter_select_ch0_V_ap_vld <= ap_const_logic_1;
        else 
            filter_select_ch0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    filter_select_ch1_V <= pulse_0_5_s_fu_206(2 - 1 downto 0);

    filter_select_ch1_V_ap_vld_assign_proc : process(ap_reg_pp1_iter1_tmp_s_reg_1448, ap_reg_pp1_iter1_pulse_terminate_reg_1472, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and ((ap_reg_pp1_iter1_tmp_s_reg_1448 = ap_const_lv1_0) or (ap_reg_pp1_iter1_pulse_terminate_reg_1472 = ap_const_lv1_0)) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0))) then 
            filter_select_ch1_V_ap_vld <= ap_const_logic_1;
        else 
            filter_select_ch1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    filter_select_ch2_V <= pulse_0_6_s_fu_190(2 - 1 downto 0);

    filter_select_ch2_V_ap_vld_assign_proc : process(ap_reg_pp1_iter1_tmp_s_reg_1448, ap_reg_pp1_iter1_pulse_terminate_reg_1472, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and ((ap_reg_pp1_iter1_tmp_s_reg_1448 = ap_const_lv1_0) or (ap_reg_pp1_iter1_pulse_terminate_reg_1472 = ap_const_lv1_0)) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0))) then 
            filter_select_ch2_V_ap_vld <= ap_const_logic_1;
        else 
            filter_select_ch2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    got_pps_phi_fu_355_p4_assign_proc : process(got_pps_reg_351, ap_CS_fsm_pp0_stage0, phitmp_fu_416_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = got_pps_reg_351) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            got_pps_phi_fu_355_p4 <= phitmp_fu_416_p2;
        else 
            got_pps_phi_fu_355_p4 <= got_pps_reg_351;
        end if; 
    end process;

    mt_pulse_V <= p_066_4_7_fu_1267_p3;

    mt_pulse_V_ap_vld_assign_proc : process(ap_reg_pp1_iter1_tmp_s_reg_1448, ap_reg_pp1_iter1_pulse_terminate_reg_1472, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and ((ap_reg_pp1_iter1_tmp_s_reg_1448 = ap_const_lv1_0) or (ap_reg_pp1_iter1_pulse_terminate_reg_1472 = ap_const_lv1_0)) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0))) then 
            mt_pulse_V_ap_vld <= ap_const_logic_1;
        else 
            mt_pulse_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_066_1_phi_fu_390_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00000000, tmp_s_reg_1448, ap_enable_reg_pp1_iter1, p_s_phi_fu_379_p4, ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (tmp_s_reg_1448 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            p_066_1_phi_fu_390_p4 <= p_s_phi_fu_379_p4;
        else 
            p_066_1_phi_fu_390_p4 <= ap_phi_precharge_reg_pp1_iter1_p_066_1_reg_386;
        end if; 
    end process;

    p_066_2_fu_1290_p3 <= 
        ap_const_lv8_0 when (tmp_8_reg_1537(0) = '1') else 
        p_066_4_7_fu_1267_p3;
    p_066_4_1_fu_910_p3 <= 
        tmp_19_fu_900_p4 when (tmp_37_1_fu_894_p2(0) = '1') else 
        p_Val2_1_1_fu_880_p3;
    p_066_4_2_fu_1098_p3 <= 
        tmp_21_fu_1089_p4 when (tmp_37_2_reg_1482(0) = '1') else 
        p_Val2_1_2_reg_1476;
    p_066_4_3_fu_1131_p3 <= 
        tmp_23_fu_1121_p4 when (tmp_37_3_reg_1492(0) = '1') else 
        p_Val2_1_3_fu_1114_p3;
    p_066_4_4_fu_1165_p3 <= 
        tmp_25_fu_1155_p4 when (tmp_37_4_reg_1502(0) = '1') else 
        p_Val2_1_4_fu_1148_p3;
    p_066_4_5_fu_1199_p3 <= 
        tmp_27_fu_1189_p4 when (tmp_37_5_reg_1512(0) = '1') else 
        p_Val2_1_5_fu_1182_p3;
    p_066_4_6_fu_1233_p3 <= 
        tmp_29_fu_1223_p4 when (tmp_37_6_reg_1522(0) = '1') else 
        p_Val2_1_6_fu_1216_p3;
    p_066_4_7_fu_1267_p3 <= 
        tmp_31_fu_1257_p4 when (tmp_37_7_reg_1532(0) = '1') else 
        p_Val2_1_7_fu_1250_p3;
    p_066_4_fu_856_p3 <= 
        tmp_17_fu_846_p4 when (tmp_6_fu_840_p2(0) = '1') else 
        p_Val2_1_fu_826_p3;
    p_Val2_1_1_fu_880_p3 <= 
        tmp_18_fu_870_p4 when (tmp_35_1_fu_864_p2(0) = '1') else 
        p_066_4_fu_856_p3;
    p_Val2_1_2_fu_934_p3 <= 
        tmp_20_fu_924_p4 when (tmp_35_2_fu_918_p2(0) = '1') else 
        p_066_4_1_fu_910_p3;
    p_Val2_1_3_fu_1114_p3 <= 
        tmp_22_fu_1104_p4 when (tmp_35_3_reg_1487(0) = '1') else 
        p_066_4_2_fu_1098_p3;
    p_Val2_1_4_fu_1148_p3 <= 
        tmp_24_fu_1138_p4 when (tmp_35_4_reg_1497(0) = '1') else 
        p_066_4_3_fu_1131_p3;
    p_Val2_1_5_fu_1182_p3 <= 
        tmp_26_fu_1172_p4 when (tmp_35_5_reg_1507(0) = '1') else 
        p_066_4_4_fu_1165_p3;
    p_Val2_1_6_fu_1216_p3 <= 
        tmp_28_fu_1206_p4 when (tmp_35_6_reg_1517(0) = '1') else 
        p_066_4_5_fu_1199_p3;
    p_Val2_1_7_fu_1250_p3 <= 
        tmp_30_fu_1240_p4 when (tmp_35_7_reg_1527(0) = '1') else 
        p_066_4_6_fu_1233_p3;
    p_Val2_1_fu_826_p3 <= 
        tmp_16_fu_816_p4 when (tmp_3_fu_810_p2(0) = '1') else 
        p_066_1_phi_fu_390_p4;
    p_rec_fu_410_p2 <= std_logic_vector(unsigned(p_0_rec_reg_339) + unsigned(ap_const_lv64_1));

    p_s_phi_fu_379_p4_assign_proc : process(ap_block_pp1_stage0_flag00000000, p_s_reg_375, ap_reg_pp1_iter1_tmp_s_reg_1448, ap_reg_pp1_iter1_pulse_terminate_reg_1472, p_066_2_fu_1290_p3, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and ((ap_reg_pp1_iter1_tmp_s_reg_1448 = ap_const_lv1_0) or (ap_reg_pp1_iter1_pulse_terminate_reg_1472 = ap_const_lv1_0)))) then 
            p_s_phi_fu_379_p4 <= p_066_2_fu_1290_p3;
        else 
            p_s_phi_fu_379_p4 <= p_s_reg_375;
        end if; 
    end process;

    phitmp_fu_416_p2 <= (pps_q0 xor ap_const_lv1_1);
    pps_address0 <= p_0_rec_reg_339(1 - 1 downto 0);

    pps_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            pps_ce0 <= ap_const_logic_1;
        else 
            pps_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prt_clock_1_phi_fu_402_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00000000, prt_clock_reg_363, tmp_s_reg_1448, ap_enable_reg_pp1_iter1, ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (tmp_s_reg_1448 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            prt_clock_1_phi_fu_402_p4 <= prt_clock_reg_363;
        else 
            prt_clock_1_phi_fu_402_p4 <= ap_phi_precharge_reg_pp1_iter1_prt_clock_1_reg_398;
        end if; 
    end process;

    prt_clock_2_fu_1068_p3 <= 
        ap_const_lv32_0 when (tmp_10_fu_1062_p2(0) = '1') else 
        prt_clock_3_fu_1044_p2;
    prt_clock_3_fu_1044_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(prt_clock_1_phi_fu_402_p4));

    prt_clock_phi_fu_367_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00000000, prt_clock_reg_363, tmp_s_reg_1448, pulse_terminate_reg_1472, prt_clock_2_fu_1068_p3, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and ((tmp_s_reg_1448 = ap_const_lv1_0) or (pulse_terminate_reg_1472 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            prt_clock_phi_fu_367_p4 <= prt_clock_2_fu_1068_p3;
        else 
            prt_clock_phi_fu_367_p4 <= prt_clock_reg_363;
        end if; 
    end process;

    pulse_def_prt_0_1_fu_428_p1 <= pulse_queue_V_dout(32 - 1 downto 0);

    pulse_queue_V_blk_n_assign_proc : process(pulse_queue_V_empty_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_flag00000000, tmp_s_fu_422_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (tmp_s_fu_422_p2 = ap_const_lv1_1))) then 
            pulse_queue_V_blk_n <= pulse_queue_V_empty_n;
        else 
            pulse_queue_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pulse_queue_V_read_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_s_fu_422_p2, ap_block_pp1_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (tmp_s_fu_422_p2 = ap_const_lv1_1) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then 
            pulse_queue_V_read <= ap_const_logic_1;
        else 
            pulse_queue_V_read <= ap_const_logic_0;
        end if; 
    end process;

    pulse_terminate_fu_642_p3 <= pulse_queue_V_dout(820 downto 820);
    tmp_10_fu_1062_p2 <= "1" when (prt_clock_3_fu_1044_p2 = tmp_9_fu_1056_p2) else "0";
    
    tmp_16_fu_816_p4_proc : process(p_066_1_phi_fu_390_p4)
    begin
        tmp_16_fu_816_p4 <= p_066_1_phi_fu_390_p4;
        tmp_16_fu_816_p4(0) <= ap_const_lv1_1(0);
    end process;

    
    tmp_17_fu_846_p4_proc : process(p_Val2_1_fu_826_p3)
    begin
        tmp_17_fu_846_p4 <= p_Val2_1_fu_826_p3;
        tmp_17_fu_846_p4(0) <= ap_const_lv1_0(0);
    end process;

    
    tmp_18_fu_870_p4_proc : process(p_066_4_fu_856_p3)
    begin
        tmp_18_fu_870_p4 <= p_066_4_fu_856_p3;
        tmp_18_fu_870_p4(1) <= ap_const_lv1_1(0);
    end process;

    
    tmp_19_fu_900_p4_proc : process(p_Val2_1_1_fu_880_p3)
    begin
        tmp_19_fu_900_p4 <= p_Val2_1_1_fu_880_p3;
        tmp_19_fu_900_p4(1) <= ap_const_lv1_0(0);
    end process;

    
    tmp_20_fu_924_p4_proc : process(p_066_4_1_fu_910_p3)
    begin
        tmp_20_fu_924_p4 <= p_066_4_1_fu_910_p3;
        tmp_20_fu_924_p4(2) <= ap_const_lv1_1(0);
    end process;

    
    tmp_21_fu_1089_p4_proc : process(p_Val2_1_2_reg_1476)
    begin
        tmp_21_fu_1089_p4 <= p_Val2_1_2_reg_1476;
        tmp_21_fu_1089_p4(2) <= ap_const_lv1_0(0);
    end process;

    
    tmp_22_fu_1104_p4_proc : process(p_066_4_2_fu_1098_p3)
    begin
        tmp_22_fu_1104_p4 <= p_066_4_2_fu_1098_p3;
        tmp_22_fu_1104_p4(3) <= ap_const_lv1_1(0);
    end process;

    
    tmp_23_fu_1121_p4_proc : process(p_Val2_1_3_fu_1114_p3)
    begin
        tmp_23_fu_1121_p4 <= p_Val2_1_3_fu_1114_p3;
        tmp_23_fu_1121_p4(3) <= ap_const_lv1_0(0);
    end process;

    
    tmp_24_fu_1138_p4_proc : process(p_066_4_3_fu_1131_p3)
    begin
        tmp_24_fu_1138_p4 <= p_066_4_3_fu_1131_p3;
        tmp_24_fu_1138_p4(4) <= ap_const_lv1_1(0);
    end process;

    
    tmp_25_fu_1155_p4_proc : process(p_Val2_1_4_fu_1148_p3)
    begin
        tmp_25_fu_1155_p4 <= p_Val2_1_4_fu_1148_p3;
        tmp_25_fu_1155_p4(4) <= ap_const_lv1_0(0);
    end process;

    
    tmp_26_fu_1172_p4_proc : process(p_066_4_4_fu_1165_p3)
    begin
        tmp_26_fu_1172_p4 <= p_066_4_4_fu_1165_p3;
        tmp_26_fu_1172_p4(5) <= ap_const_lv1_1(0);
    end process;

    
    tmp_27_fu_1189_p4_proc : process(p_Val2_1_5_fu_1182_p3)
    begin
        tmp_27_fu_1189_p4 <= p_Val2_1_5_fu_1182_p3;
        tmp_27_fu_1189_p4(5) <= ap_const_lv1_0(0);
    end process;

    
    tmp_28_fu_1206_p4_proc : process(p_066_4_5_fu_1199_p3)
    begin
        tmp_28_fu_1206_p4 <= p_066_4_5_fu_1199_p3;
        tmp_28_fu_1206_p4(6) <= ap_const_lv1_1(0);
    end process;

    
    tmp_29_fu_1223_p4_proc : process(p_Val2_1_6_fu_1216_p3)
    begin
        tmp_29_fu_1223_p4 <= p_Val2_1_6_fu_1216_p3;
        tmp_29_fu_1223_p4(6) <= ap_const_lv1_0(0);
    end process;

    
    tmp_30_fu_1240_p4_proc : process(p_066_4_6_fu_1233_p3)
    begin
        tmp_30_fu_1240_p4 <= p_066_4_6_fu_1233_p3;
        tmp_30_fu_1240_p4(7) <= ap_const_lv1_1(0);
    end process;

    
    tmp_31_fu_1257_p4_proc : process(p_Val2_1_7_fu_1250_p3)
    begin
        tmp_31_fu_1257_p4 <= p_Val2_1_7_fu_1250_p3;
        tmp_31_fu_1257_p4(7) <= ap_const_lv1_0(0);
    end process;

    tmp_35_1_fu_864_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = pulse_def_timer_offs_1_fu_218) else "0";
    tmp_35_2_fu_918_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = pulse_def_timer_offs_2_fu_222) else "0";
    tmp_35_3_fu_954_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = pulse_def_timer_offs_3_fu_226) else "0";
    tmp_35_4_fu_972_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = pulse_def_timer_offs_4_fu_230) else "0";
    tmp_35_5_fu_990_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = pulse_def_timer_offs_5_fu_234) else "0";
    tmp_35_6_fu_1008_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = pulse_def_timer_offs_6_fu_238) else "0";
    tmp_35_7_fu_1026_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = pulse_def_timer_offs_7_fu_242) else "0";
    tmp_36_1_fu_888_p2 <= std_logic_vector(unsigned(pulse_def_timer_widt_1_fu_250) + unsigned(pulse_def_timer_offs_1_fu_218));
    tmp_36_2_fu_942_p2 <= std_logic_vector(unsigned(pulse_def_timer_widt_2_fu_254) + unsigned(pulse_def_timer_offs_2_fu_222));
    tmp_36_3_fu_960_p2 <= std_logic_vector(unsigned(pulse_def_timer_widt_3_fu_258) + unsigned(pulse_def_timer_offs_3_fu_226));
    tmp_36_4_fu_978_p2 <= std_logic_vector(unsigned(pulse_def_timer_widt_4_fu_262) + unsigned(pulse_def_timer_offs_4_fu_230));
    tmp_36_5_fu_996_p2 <= std_logic_vector(unsigned(pulse_def_timer_widt_5_fu_266) + unsigned(pulse_def_timer_offs_5_fu_234));
    tmp_36_6_fu_1014_p2 <= std_logic_vector(unsigned(pulse_def_timer_widt_6_fu_270) + unsigned(pulse_def_timer_offs_6_fu_238));
    tmp_36_7_fu_1032_p2 <= std_logic_vector(unsigned(pulse_def_timer_widt_7_fu_274) + unsigned(pulse_def_timer_offs_7_fu_242));
    tmp_37_1_fu_894_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = tmp_36_1_fu_888_p2) else "0";
    tmp_37_2_fu_948_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = tmp_36_2_fu_942_p2) else "0";
    tmp_37_3_fu_966_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = tmp_36_3_fu_960_p2) else "0";
    tmp_37_4_fu_984_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = tmp_36_4_fu_978_p2) else "0";
    tmp_37_5_fu_1002_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = tmp_36_5_fu_996_p2) else "0";
    tmp_37_6_fu_1020_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = tmp_36_6_fu_1014_p2) else "0";
    tmp_37_7_fu_1038_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = tmp_36_7_fu_1032_p2) else "0";
    tmp_3_fu_810_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = pulse_def_timer_offs_fu_214) else "0";
    tmp_4_nbreadreq_fu_278_p3 <= (0=>pulse_queue_V_empty_n, others=>'-');
    tmp_5_fu_834_p2 <= std_logic_vector(unsigned(pulse_def_timer_widt_fu_246) + unsigned(pulse_def_timer_offs_fu_214));
    tmp_6_fu_840_p2 <= "1" when (prt_clock_1_phi_fu_402_p4 = tmp_5_fu_834_p2) else "0";
    tmp_8_fu_1050_p2 <= "1" when (prt_clock_3_fu_1044_p2 = pulse_def_prt_0_fu_210) else "0";
    tmp_9_fu_1056_p2 <= std_logic_vector(unsigned(pulse_def_block_post_fu_194) + unsigned(pulse_def_prt_0_fu_210));
    tmp_s_fu_422_p2 <= "1" when (prt_clock_phi_fu_367_p4 = ap_const_lv32_0) else "0";
end behav;
