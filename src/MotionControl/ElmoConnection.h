/*
 * ElmoConnection.h
 *
 *  Created on: Feb 26, 2014
 *      Author: burghart
 */

#ifndef ELMOCONNECTION_H_
#define ELMOCONNECTION_H_

#include <inttypes.h>
#include <QObject>
#include <QMetaType>

/// @brief Interface class providing a connection for sending commands to 
/// an Elmo servo drive. Classes which use this interface must provide 
/// implementation for the pure virtual functions below, and MUST ALSO 
/// emit the Qt signals defined in the "signals:" section.
class ElmoConnection: public QObject {
    Q_OBJECT
public:
    virtual ~ElmoConnection();

    /// @brief Return the nickname associated with the drive.
    /// @return the nickname associated with the drive.
    virtual std::string driveName() const = 0;
    
    /// @brief Execute the given SimplIQ command cmd on the servo drive.
    /// @param cmd the two-letter Elmo SimplIQ command (or legal 
    /// "XQ##<function>") command to execute 
    /// @param index the command index (set to zero if the SimplIQ command is 
    ///     not indexed).
    /// @return true iff command execution was initiated
    virtual bool execElmoCmd(std::string cmd, uint16_t index) = 0;
    
    /// @brief Execute the given SimpleIQ non-indexed command cmd on the
    /// servo drive. This is equivalent to execElmoCmd(cmd, 0).
    /// @return true iff command execution was initiated
    virtual bool execElmoCmd(std::string cmd) { return(execElmoCmd(cmd, 0)); }
    
    /// @brief Execute the given SimplIQ assignment for command cmd on the 
    /// servo drive. If the index is zero, "<cmd>=<value>" will be 
    /// executed, otherwise "<cmd>[<index>]=<value>".
    ///
    /// @param cmd the two-letter Elmo SimplIQ command to execute
    /// @param index the command index (set to zero if the SimplIQ command is 
    ///     not indexed).
    /// @param value the integer value to be assigned to "<cmd>" (or 
    ///     "<cmd>[<index>]")
    /// @return true iff command execution was initiated
    virtual bool execElmoAssignCmd(std::string cmd, uint16_t index, int value) = 0;
    
    /// @brief Return true iff the object is ready to execute commands via the
    /// execElmoCmd() method.
    /// @return true iff the object is ready to execute commands via the
    /// execElmoCmd() method.
    virtual bool readyToExec() const = 0;
    
    /// @brief Force reinitialization of the connection.
    virtual void reinitialize() = 0;

    /// @brief Enumeration for the types of reply which can be received 
    /// when executing Elmo commands.
    typedef enum {
        IntReply,   ///< integer command reply
        FloatReply, ///< floating-point command reply
        ErrorReply, ///< error code generated by the command
        EmptyReply  ///< reply is an empty acknowledgment
    } ReplyType;
    
signals:
    /// @brief Signal to be emitted when the "readyToExec" state changes.
    /// @param newState true iff the connection is now ready to accept 
    ///     execElmoCmd() calls
    void readyToExecChanged(bool newState);

    /// @brief Signal emitted when a reply to an executed command is received.
    /// @param cmd the command which returned the value, e.g., "SR" or "HM[3]"
    /// @param replyType the type for the reply
    /// @param iVal the returned integer value if replyType is IntReply, or the
    ///     returned error code if replyType is ErrorReply. Error code may be
    ///     a positive integer error code returned by the drive, as documented 
    ///     for the "EC" command in the SimplIQ Command Reference Manual, or 
    ///     may be -1 for internal parsing errors. 
    /// @param fVal the returned floating-point value if replyType is FloatReply
    void replyFromExec(std::string cmd, ElmoConnection::ReplyType replyType, 
            int iVal, float fVal);
protected:
    // Default constructor
    ElmoConnection() {
        // Register types we use in signals as QMetaType-s.
        qRegisterMetaType<std::string>("std::string");
        qRegisterMetaType<ReplyType>("ElmoConnection::ReplyType");
    }
};

#endif /* ELMOCONNECTION_H_ */
