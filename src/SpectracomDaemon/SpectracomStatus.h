/*
 * SpectracomStatus.h
 *
 *  Created on: Aug 31, 2012
 *      Author: burghart
 */

#ifndef SPECTRACOMSTATUS_H_
#define SPECTRACOMSTATUS_H_

#include <ctime>
#include <exception>
#include <string>
#include <stdint.h>
#include <xmlrpc-c/base.hpp>
#include <boost/serialization/nvp.hpp>
#include <boost/serialization/version.hpp>

/// @brief Class to represent HCR Spectracom SecureSync status.
class SpectracomStatus {
public:
    /// @brief Default constructor. Status time is set to current time,
    /// the device is marked as not responding. Other values are set to
    /// generally indicate badness.
    /// @param hostName the name or IP address of the Spectracom for which
    /// this status applies.
    SpectracomStatus(std::string hostName);

    /// @brief Construct from an xmlrpc_c::value_struct dictionary as returned
    /// by a call to SpectracomDaemon's XML-RPC getStatus() method.
    /// @param statusDict an xmlrpc_c::value_struct dictionary as returned
    /// by a call to SpectracomDaemon's XML-RPC getStatus() method.
    SpectracomStatus(xmlrpc_c::value_struct & statusDict);

    /// @brief destructor
    virtual ~SpectracomStatus();

    /// @brief Return an external representation of the object's state as
    /// an xmlrpc_c::value_struct dictionary.
    ///
    /// The returned value can be used on the other side of an XML-RPC
    /// connection to create an identical object via the
    /// SpectracomStatus(const xmlrpc_c::value_struct &) constructor.
    /// @return an external representation of the object's state as
    /// an xmlrpc_c::value_struct dictionary.
    xmlrpc_c::value_struct toXmlRpcValue() const;
    
    /// @brief Return the status time, seconds since 1970-01-01 00:00:00 UTC.
    /// @return the status time, seconds since 1970-01-01 00:00:00 UTC.
    time_t statusTime() const { return(_statusTime); }

private:
    friend class boost::serialization::access;

    /// @brief Serialize our members to a boost save/output archive or
    /// populate our members from a boost load/input archive.
    /// @param ar the archive to load from or save to.
    /// @param version the version
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version) {
        using boost::serialization::make_nvp;
        // Version 0 (see BOOST_CLASS_VERSION macro below for latest version)
        if (version >= 0) {
            // Map named entries to our member variables using serialization's
            // name/value pairs (nvp).
            ar & BOOST_SERIALIZATION_NVP(_statusTime);
            ar & BOOST_SERIALIZATION_NVP(_hostName);
            ar & BOOST_SERIALIZATION_NVP(_hostResponding);
            ar & BOOST_SERIALIZATION_NVP(_reference);
            ar & BOOST_SERIALIZATION_NVP(_ntpStratum);
            ar & BOOST_SERIALIZATION_NVP(_inSync);
            ar & BOOST_SERIALIZATION_NVP(_oscType);
            ar & BOOST_SERIALIZATION_NVP(_oscState);
            ar & BOOST_SERIALIZATION_NVP(_tfom);
            ar & BOOST_SERIALIZATION_NVP(_maxTfom);
            ar & BOOST_SERIALIZATION_NVP(_alarmStatusTime);
            ar & BOOST_SERIALIZATION_NVP(_majorAlarm);
            ar & BOOST_SERIALIZATION_NVP(_minorAlarm);
            ar & BOOST_SERIALIZATION_NVP(_alarmList);
            ar & BOOST_SERIALIZATION_NVP(_freqErrTime);
            ar & BOOST_SERIALIZATION_NVP(_freqErr);
        }
        if (version >= 1) {
            // Version 1 stuff will go here...
        }
    }

    /// Status time, seconds since 1970-01-01 00:00:00 UTC
    double _statusTime;
    
    /// Host name (or IP address string) for the Spectracom SecureSync
    std::string _hostName;
    
    /// Is the Spectracom responding?
    bool _hostResponding;
    
    /// String describing the Spectracom's current time and frequency 
    /// reference sources
    std::string _reference;
    
    /// NTP stratum
    int _ntpStratum;
    
    /// Is the Spectracom synchronized with its time and 1PPS references?
    bool _inSync;
    
    /// String describing the type of oscillator installed in the Spectracom
    std::string _oscType;
    
    /// String describing the current oscillator state
    std::string _oscState;
    
    /// TFOM (time figure of merit) is an integer describing a range containing
    /// the current time accuracy
    int _tfom;
    
    /// Max TFOM. Maximum TFOM for which a 1 PPS signal will be generated by 
    /// the Spectracom.
    int _maxTfom;
    
    /// Time at which alarm status was collected, seconds since 1970-01-01 
    /// 00:00:00 UTC
    double _alarmStatusTime;
    
    /// Is a major alarm indicated?
    bool _majorAlarm;
    
    /// Is a minor alarm indicated?
    bool _minorAlarm;
    
    /// List of strings describing current alarms.
    std::vector<std::string> _alarmList;

    /// Time at which frequency error was reported, seconds since 1970-01-01 
    /// 00:00:00 UTC
    double _freqErrTime;
    
    /// Estimated frequency error
    double _freqErr;
};

// Increment this class version number when member variables are changed.
BOOST_CLASS_VERSION(SpectracomStatus, 0)

#endif /* SPECTRACOMSTATUS_H_ */
